/*!
 *
 * Bryntum Scheduler Pro 5.6.2 (TRIAL VERSION)
 *
 * Copyright(c) 2023 Bryntum AB
 * https://bryntum.com/contact
 * https://bryntum.com/license
 *
 */
import { CellCopyPaste, CellCopyPasteConfig, CellMenu, CellMenuConfig, CellTooltip, CellTooltipConfig, Column, ColumnAutoWidth, ColumnAutoWidthConfig, ColumnDragToolbar, ColumnDragToolbarConfig, ColumnPicker, ColumnPickerConfig, ColumnRename, ColumnRenameConfig, ColumnReorder, ColumnReorderConfig, ColumnResize, ColumnResizeConfig, ColumnStore, ColumnStoreConfig, ColumnSummaryConfig, FileDrop, FileDropConfig, FillHandle, FillHandleConfig, Filter, FilterBar, FilterBarConfig, FilterConfig, Grid, GridBase, CellEdit as GridCellEdit, CellEditConfig as GridCellEditConfig, ExcelExporter as GridExcelExporter, ExcelExporterConfig as GridExcelExporterConfig, GroupSummary as GridGroupSummary, GroupSummaryConfig as GridGroupSummaryConfig, PdfExport as GridPdfExport, PdfExportConfig as GridPdfExportConfig, Print as GridPrint, PrintConfig as GridPrintConfig, GridRowModel, RowReorder as GridRowReorder, RowReorderConfig as GridRowReorderConfig, RowResize as GridRowResize, RowResizeConfig as GridRowResizeConfig, Split as GridSplit, SplitConfig as GridSplitConfig, Summary as GridSummary, SummaryConfig as GridSummaryConfig, Group, GroupConfig, HeaderMenu, HeaderMenuConfig, Location, MergeCells, MergeCellsConfig, PreserveScrollOptions, QuickFind, QuickFindConfig, RecordPositionContext, RegionResize, RegionResizeConfig, Row, RowCopyPaste, RowCopyPasteConfig, RowExpander, RowExpanderConfig, Search, SearchConfig, Sort, SortConfig, StickyCells, StickyCellsConfig, Stripe, StripeConfig, SubGrid, SubGridConfig, Tree, TreeConfig, TreeGrid, TreeGroup, TreeGroupConfig } from '../../Grid/build/grid.thin'
import { AjaxStore, AjaxStoreConfig, AlignSpec, Base, BryntumListenerConfig, ChipView, ChipViewConfig, Collection, CollectionConfig, CollectionFilter, CollectionFilterConfig, CollectionSorter, CollectionSorterConfig, Combo, Container, ContainerItemConfig, ContainerLayoutConfig, StateTrackingManager as CoreStateTrackingManager, DataField, DateField, DatePicker, DatePickerConfig, DomClassList, DomConfig, DragHelper, DragHelperConfig, Duration, DurationConfig, DurationField, Editor, EditorConfig, EventsClass, Field, FieldContainer, FieldContainerConfig, FieldTriggerConfig, GridColumnConfig, Grouper, Histogram, HistogramConfig, HistogramSeries, HttpMethods, InputFieldConfig, InstancePlugin, List, ListConfig, LocaleHelper, LocaleManager, Mask, MaskConfig, Menu, MenuItem, MenuItemConfig, Model, ModelConfig, ModelFieldConfig, Panel, PanelCollapser, PanelCollapserConfig, PanelCollapserOverlay, PanelCollapserOverlayConfig, PanelHeader, Popup, PopupConfig, Rectangle, ScrollManager, ScrollManagerConfig, Scroller, ScrollerConfig, Sorter, StateProvider, Store, StoreConfig, SyncDataOnLoadOptions, Tab, TabConfig, Tool, ToolConfig, Toolbar, ToolbarConfig, Tooltip, TooltipConfig, Transaction, UpdateAction, Widget } from '../../Core/build/core.thin'
import { AbstractCrudManager, ColumnLines, ColumnLinesConfig, CrudManager, CrudManagerConfig, CrudManagerStoreDescriptor, DependencyBaseModel, DropData, EventColor, EventCopyPaste, EventCopyPasteConfig, EventDrag, EventDragConfig, EventDragCreate, EventDragCreateConfig, EventDragSelect, EventDragSelectConfig, EventEdit, EventEditConfig, EventFilter, EventFilterConfig, EventMenu, EventMenuConfig, EventNonWorkingTime, EventNonWorkingTimeConfig, EventRenderData, EventTooltip, EventTooltipConfig, ExcelExporter, ExcelExporterConfig, GroupSummary, GroupSummaryConfig, HeaderZoom, HeaderZoomConfig, HistogramRenderData, Labels, LabelsConfig, NonWorkingTime, NonWorkingTimeConfig, Pan, PanConfig, PdfExport, PdfExportConfig, Print, PrintConfig, ProjectModelMixinClass, RecurrenceModel, RecurrenceModelConfig, ResourceHeader, ResourceHeaderConfig, ResourceMarginConfig, ResourceMenu, ResourceMenuConfig, ResourceTimeRangeModel, ResourceTimeRangeModelConfig, ResourceTimeRangeStore, ResourceTimeRangeStoreConfig, ResourceTimeRanges, ResourceTimeRangesBase, ResourceTimeRangesConfig, RowReorder, RowReorderConfig, RowResize, RowResizeConfig, ScalePoint, ScheduleContext, ScheduleContextConfig, ScheduleMenu, ScheduleMenuConfig, ScheduleTooltip, ScheduleTooltipConfig, Scheduler, AssignmentModel as SchedulerAssignmentModel, AssignmentStore as SchedulerAssignmentStore, AssignmentStoreConfig as SchedulerAssignmentStoreConfig, SchedulerBase, Dependencies as SchedulerDependencies, DependenciesConfig as SchedulerDependenciesConfig, DependencyEdit as SchedulerDependencyEdit, DependencyEditConfig as SchedulerDependencyEditConfig, DependencyModel as SchedulerDependencyModel, DependencyModelConfig as SchedulerDependencyModelConfig, DependencyStore as SchedulerDependencyStore, EventModel as SchedulerEventModel, EventModelConfig as SchedulerEventModelConfig, EventResize as SchedulerEventResize, EventResizeConfig as SchedulerEventResizeConfig, EventStore as SchedulerEventStore, EventStoreConfig as SchedulerEventStoreConfig, ProjectModel as SchedulerProjectModel, ResourceModel as SchedulerResourceModel, ResourceModelConfig as SchedulerResourceModelConfig, ResourceStore as SchedulerResourceStore, ResourceStoreConfig as SchedulerResourceStoreConfig, SimpleEventEdit, SimpleEventEditConfig, Split, SplitConfig, StickyEvents, StickyEventsConfig, Summary, SummaryConfig, TimeAxis, TimeAxisColumn, TimeAxisConfig, TimeAxisHeaderMenu, TimeAxisHeaderMenuConfig, TimeRangeStore, TimeRanges, TimeRangesConfig, TimeSelection, TimeSelectionConfig, TimeSpan, TimeSpanConfig, TimelineBase, TimelineContext, TimelineHistogram, VerticalTimeAxisColumn, VerticalTimeAxisColumnConfig, ViewPreset, ViewPresetConfig, VisibleDate } from '../../Scheduler/build/scheduler.thin'

type AnyConstructor<A = any> = new (...input: any[]) => A

/**
 * An object describing the time span region to highlight.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/TimeSpanHighlight#typedef-HighlightTimeSpan)
 */
type HighlightTimeSpan = any & {
    /**
     * A start date constraining the region
     */
    startDate: Date
    /**
     * An end date constraining the region
     */
    endDate: Date
    /**
     * A name to show in the highlight element
     */
    name: string
    /**
     * The resource record (applicable for Scheduler only)
     */
    resourceRecord?: SchedulerResourceModel
    /**
     * The task record (applicable for Gantt only)
     */
    taskRecord?: Model
    /**
     * A CSS class to add to the highlight element
     */
    cls?: string
    /**
     * `false` to keep existing highlight elements
     */
    clearExisting?: boolean
    /**
     * An id to enable animation of highlight elements
     */
    animationId?: string
    /**
     * True to shade the time axis areas before and after the time span
     * (adds a `b-unavailable` CSS class which you can use for styling)
     */
    surround?: boolean
    /**
     * Inflates the non-timeaxis sides of the region by this many pixels
     */
    padding?: number
}

/**
 * An object representing a certain time interval.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceModel#typedef-TickInfo)
 */
type TickInfo = any & {
    /**
     * The interval start date
     */
    startDate: Date
    /**
     * The interval end date
     */
    endDate: Date
}

/**
 * An object containing info on the resource allocation in a certain time interval.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceModel#typedef-ResourceAllocationInterval)
 */
type ResourceAllocationInterval = any & {
    /**
     * Resource model
     */
    resource: ResourceModel
    /**
     * Set of ongoing assignments for the interval
     */
    assignments: Set<any>
    /**
     * Individual ongoing assignments allocation indexed by assignments
     */
    assignmentIntervals: Map<any, any>
    /**
     * Resource effort in the interval (in milliseconds)
     */
    effort: number
    /**
     * `true` if the interval contains a fact of the resource overallocation
     */
    isOverallocated: boolean
    /**
     * `true` if the resource is underallocated in the interval
     */
    isUnderallocated: boolean
    /**
     * Maximum possible resource effort in the interval (in milliseconds)
     */
    maxEffort: number
    /**
     * The time interval
     */
    tick: TickInfo
    /**
     * Resource allocation in percents
     */
    units: number
    /**
     * Indicates if the interval is in the middle of the event timespan.
     */
    inEventTimeSpan: boolean
}

/**
 * An object containing info on the assignment effort in a certain time interval.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceModel#typedef-AssignmentAllocationInterval)
 */
type AssignmentAllocationInterval = any & {
    /**
     * The assignment which allocation is displayed.
     */
    assignment: AssignmentModel
    /**
     * Amount of work performed by the assigned resource in the interval
     */
    effort: number
    /**
     * The interval of time the allocation is collected for
     */
    tick: TickInfo
    /**
     * Assignment [units](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/AssignmentModel#field-units) value
     */
    units: number
    /**
     * The rectangle DOM configuration object
     */
    rectConfig: object
    /**
     * Indicates if the interval is in the middle of the event timespan.
     */
    inEventTimeSpan: boolean
}

/**
 * Resource allocation information.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceModel#typedef-ResourceAllocation)
 */
type ResourceAllocation = any & {
    /**
     * Resource model.
     */
    resource: ResourceModel
    /**
     * The allocation report this instance is part of.
     */
    owner: ResourceAllocationInfo
    /**
     * The resource allocation data collected.
     */
    total: ResourceAllocationInterval[]
    /**
     * A `Map` keyed by [AssignmentModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/AssignmentModel) containing the
     * resource allocation collected for individual assignments.
     */
    byAssignments: Map<any, any>
}

/**
 * Class implementing *resource allocation report* - data representing the provided `resource`
 * utilization in the provided period of time.
 * The data is grouped by the provided time intervals (`ticks`).
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceModel#typedef-ResourceAllocationInfo)
 */
type ResourceAllocationInfo = any & {
    /**
     * Resource model.
     */
    resource: ResourceModel
    /**
     * The collected allocation info.
     */
    allocation: ResourceAllocation
    /**
     * A calendar specifying intervals to group the collected
     * allocation by. <strong>Working</strong> time intervals of the calendars will be used for grouping.
     * This also specifies the time period to collect allocation for.
     * So the first interval `startDate` is treated as the period start and the last interval `endDate` is the period end.
     */
    ticks: CalendarModel
    /**
     * `true` indicates inactive events allocation is included
     * and `false` - it's skipped.
     */
    includeInactiveEvents: boolean
}

/**
 * Config for event layout
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/mixin/SchedulerProEventRendering#typedef-EventLayoutConfig)
 */
type EventLayoutConfig = any & {
    /**
     * Event layout type. Possible values for horizontal mode are
     * `stack`, `pack` and `none`. For vertical mode: `pack`, `mixed` and `none`.
     */
    type: 'stack'|'pack'|'mixed'|'none'
    /**
     * Horizontal mode only. This function allows to manually position events inside the row.
     */
    layoutFn: Function
    /**
     * Horizontal mode only. Specifies groups order.
     */
    weights: object
    /**
     * Horizontal mode only. Specifies a way to group events inside a row.
     */
    groupBy: string|Function
}

/**
 * Type with configuration options for [ResourceCalendarColumn](https://bryntum.com/products/grid/docs/api/SchedulerPro/column/ResourceCalendarColumn) class.
 */
type ResourceCalendarColumnConfig = GridColumnConfig & {
    type: 'resourceCalendar'|'resourcecalendar'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/schedulerpro/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/schedulerpro/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/schedulerpro/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/schedulerpro/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column that displays (and allows user to update) the current [calendar](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/CalendarModel) of
 * the resource.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn)
 */
export class ResourceCalendarColumn extends Column {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/column/ResourceCalendarColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ResourceCalendarColumnConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<ResourceCalendarColumnConfig>, store?: Store, meta?: object);
    /**
     * Override to take action when the AssignmentStore instance is replaced, either from being replaced on the project
     * or from assigning a new project.
     * @param {SchedulerAssignmentStore} store
     */
    attachToAssignmentStore(store: SchedulerAssignmentStore): void;
    /**
     * Override to take action when the CalendarManagerStore instance is replaced, either from being replaced on the
     * project or from assigning a new project.
     * @param {Store} store
     */
    attachToCalendarManagerStore(store: Store): void;
    /**
     * Override to take action when the DependencyStore instance is replaced, either from being replaced on the project
     * or from assigning a new project.
     * @param {SchedulerDependencyStore} store
     */
    attachToDependencyStore(store: SchedulerDependencyStore): void;
    /**
     * Override to take action when the EventStore instance is replaced, either from being replaced on the project or
     * from assigning a new project.
     * @param {SchedulerEventStore} store
     */
    attachToEventStore(store: SchedulerEventStore): void;
    /**
     * Override to take action when the project instance is replaced.
     * @param {SchedulerProjectModel} project
     */
    attachToProject(project: SchedulerProjectModel): void;
    /**
     * Override to take action when the ResourceStore instance is replaced, either from being replaced on the project
     * or from assigning a new project.
     * @param {SchedulerResourceStore} store
     */
    attachToResourceStore(store: SchedulerResourceStore): void;
}

/**
 * Type with configuration options for [AssignmentStore](https://bryntum.com/products/grid/docs/api/SchedulerPro/data/AssignmentStore) class.
 */
type AssignmentStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-allowNoId)
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-applyChangesetFilterSortTarget)
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     * Return `true` to include the passed record, or a `false` to exclude it.
     * @param {Model} record
     * @returns {boolean}
     */
    chainedFilterFn: (record: Model) => boolean
    /**
     * Url to post newly created records to.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-createUrl)
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-data)
     */
    data: object[]|Model[]
    /**
     * Url for deleting records.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-deleteUrl)
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-fetchOptions)
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a [Model](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-fields)
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-filterParamName)
     */
    filterParamName: string
    /**
     * Specify one or more [CollectionFilter](https://bryntum.com/products/schedulerpro/docs/api/Core/util/CollectionFilter) config objects to apply initially.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-filters)
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-headers)
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when [useRestfulMethods](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-useRestfulMethods) is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-httpMethods)
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-listeners)
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of [Model](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model). Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-modelClass)
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting *either* the [pageParamName](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-pageParamName) *or* the
     * [pageStartParamName](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-pageStartParamName), this is the value to send in the [pageSizeParamName](#Core/data/AjaxStore#config-pageSizeParamName).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-pageSize)
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's [readUrl](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-readUrl) to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-readUrl)
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-responseDataProperty)
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-responseSuccessProperty)
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store [is paged](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#property-isPaged)</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-responseTotalProperty)
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-restfulFilter)
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-sortParamName)
     */
    sortParamName: string
    /**
     * Initial sorters, format is:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-sorters)
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-startGroupsCollapsed)
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A [Collection](https://bryntum.com/products/schedulerpro/docs/api/Core/util/Collection), or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Store class to use when creating the store when it is a part of a
     * [CrudManager](https://bryntum.com/products/scheduler/docs/api/Scheduler/data/CrudManager).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-storeClass)
     */
    storeClass: typeof Store
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-syncDataOnLoad)
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * An [EventStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-transformFlatData)
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-updateUrl)
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-useLocaleSort)
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-useRawData)
     * @param {boolean} disableDuplicateIdCheck Data must not contain duplicate ids, check is bypassed.
     * @param {boolean} disableDefaultValue Default values will not be applied to record fields.
     * @param {boolean} disableTypeConversion No type conversions will be performed on record data.
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful [httpMethods](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-httpMethods)
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#config-verifyNoGeneratedIds)
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired when a temporary record with the [isCreating](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model#property-isCreating) property set
     * has been confirmed as a part of this store by having its [isCreating](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model#property-isCreating)
     * property cleared.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {Model} event.record The record confirmed as added.
     */
    onAddConfirmed: ((event: { source: Store, record: Model }) => void)|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     * @param {object} event Event object
     * @param {boolean} event.exception `true`. *Only present if the request triggered an exception.*
     * @param {'create'|'read'|'update'|'delete'} event.action Action that has finished, `'create'`, `'read'`, `'update'` or `'delete'`
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`. <em>Only present if the request triggered an exception.</em>
     * @param {Response} event.response The `Response` object
     * @param {object} event.json The decoded response object if there was no `'network'` exception.
     */
    onAfterRequest: ((event: { exception: boolean, action: 'create'|'read'|'update'|'delete', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoad: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadChildren: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#property-isPaged), this is fired before loading a page and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadPage: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before any remote request is initiated.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing key/value pairs that are passed on the request query string
     * @param {object} event.body The body of the request to be posted to the server.
     * @param {'create'|'read'|'update'|'delete'} event.action Action that is making the request, `'create'`, `'read'`, `'update'` or `'delete'`
     */
    onBeforeRequest: ((event: { source: Store, params: object, body: object, action: 'create'|'read'|'update'|'delete' }) => void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onBeforeUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#event-change)
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of the options listed above
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fired after committing added records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitAdded: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing modified records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitModified: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing removed records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitRemoved: ((event: { source: Store }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#event-exception)
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {boolean} event.exception `true`
     * @param {'create'|'read'|'update'|'delete'|'commit'} event.action Action that failed, `'create'`, `'read'`, `'update'` or `'delete'`. May also be fired with '`commit'` to indicate the failure of an aggregated `create`, `update` and `delete` operation. In this case, the event will contain a property for each operation of the commit named `'create'`, `'update'` and `'delete'`, each containing the individual `exception` events.
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object *if the exceptionType is `'server'`*
     */
    onException: ((event: { source: Store, exception: boolean, action: 'create'|'read'|'update'|'delete'|'commit', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired when the id of a record has changed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {string|number} event.oldValue Old id
     * @param {string|number} event.value New id
     */
    onIdChange: ((event: { source: Store, record: Model, oldValue: string|number, value: string|number }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired on successful load
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object.
     */
    onLoad: ((event: { source: Store, data: object[], response: Response, json: object }) => void)|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {object} event.json The decoded response object.
     */
    onLoadChildren: ((event: { source: Store, data: object[], json: object }) => void)|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadChildrenStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when a block of records has been moved within this Store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record (DEPRECATED) The first record moved (The [move](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-move) API now accepts an array of records to move).
     * @param {Model[]} event.records The records moved.
     * @param {number} event.from The index from which the record was removed (applicable only for flat store).
     * @param {number} event.to The index at which the record was inserted (applicable only for flat store).
     * @param {Model} event.newParent The new parent record for the dragged records (applicable only for tree stores)
     * @param {Model[]} event.oldParents The old parent records for the dragged records (applicable only for move operations in tree stores)
     */
    onMove: ((event: { source: Store, record: Model, records: Model[], from: number, to: number, newParent?: Model, oldParents?: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {boolean} event.batch Flag set to `true` when the refresh is triggered by ending a batch
     * @param {'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group'} event.action Name of action which triggered the change. May be one of the options listed above.
     */
    onRefresh: ((event: { source: Store, batch: boolean, action: 'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group' }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired when the root node is set
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.oldRoot The old root node.
     * @param {Model} event.rootNode The new root node.
     */
    onRootChange: ((event: { source: Store, oldRoot: Model, rootNode: Model }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired when a record is modified
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
}

/**
 * A store representing a collection of assignments between events in the [EventStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) and resources
 * in the [ResourceStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore).
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore)
 */
export class AssignmentStore extends AjaxStore {
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: AssignmentStore
    /**
     * Returns the calendar manager store of the project this entity belongs to.
     */
    readonly calendarManagerStore: CalendarManagerStore
    /**
     * Applies a new dataset to the AssignmentStore. Use it to plug externally fetched data into the store.
     */
    data: Partial<AssignmentModelConfig>[]
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: DependencyStore
    /**
     * Returns the task store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: ProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: ResourceStore
    /**
     * The [store](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) holding data on events.
     */
    readonly taskStore: EventStore
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<AssignmentStoreConfig>} config
     */
    constructor(config?: Partial<AssignmentStoreConfig>);
    /**
     * Add assignments to the store.
     * @param {SchedulerAssignmentModel|SchedulerAssignmentModel[]|Partial<AssignmentModelConfig>|Partial<AssignmentModelConfig>[]} records Array of records/data or a single record/data to add to store
     * @param {boolean} silent Specify `true` to suppress events
     */
    add(records: SchedulerAssignmentModel|SchedulerAssignmentModel[]|Partial<AssignmentModelConfig>|Partial<AssignmentModelConfig>[], silent?: boolean): SchedulerAssignmentModel[];
    /**
     * Add assignments to the store and triggers calculations directly after. Await this function to have up to date
     * references on the added assignments.
     * @param {SchedulerAssignmentModel|SchedulerAssignmentModel[]|Partial<AssignmentModelConfig>|Partial<AssignmentModelConfig>[]} records Array of records/data or a single record/data to add to store
     * @param {boolean} silent Specify `true` to suppress events
     */
    addAsync(records: SchedulerAssignmentModel|SchedulerAssignmentModel[]|Partial<AssignmentModelConfig>|Partial<AssignmentModelConfig>[], silent?: boolean): Promise<SchedulerAssignmentModel[]>;
    /**
     * Creates and adds assignment record(s) for a given event and resource(s).
     * @param {TimeSpan} event
     * @param {SchedulerResourceModel|SchedulerResourceModel[]} resources The resource(s) to assign to the event
     * @param {Function} assignmentSetupFn A hook function which takes an assignment as its argument and must return an assignment.
     * @param {boolean} removeExistingAssignments `true` to remove assignments for other resources
     */
    assignEventToResource(event: TimeSpan, resources: SchedulerResourceModel|SchedulerResourceModel[], assignmentSetupFn?: Function, removeExistingAssignments?: boolean): SchedulerAssignmentModel[];
    /**
     * Returns an assignment record for a given event and resource
     * @param {SchedulerEventModel|string|number} event The event or its id
     * @param {SchedulerResourceModel|string|number} resource The resource or its id
     */
    getAssignmentForEventAndResource(event: SchedulerEventModel|string|number, resource: SchedulerResourceModel|string|number): SchedulerAssignmentModel;
    /**
     * Returns all assignments for a given event.
     * @param {TimeSpan} event
     */
    getAssignmentsForEvent(event: TimeSpan): SchedulerAssignmentModel[];
    /**
     * Returns all assignments for a given resource.
     * @param {SchedulerResourceModel} resource
     */
    getAssignmentsForResource(resource: SchedulerResourceModel): SchedulerAssignmentModel[];
    /**
     * Returns all events assigned to a resource
     * @param {SchedulerResourceModel|string|number} resource
     */
    getEventsForResource(resource: SchedulerResourceModel|string|number): TimeSpan[];
    /**
     * Returns all resources assigned to an event.
     * @param {SchedulerEventModel} event
     */
    getResourcesForEvent(event: SchedulerEventModel): SchedulerResourceModel[];
    /**
     * Checks whether an event is assigned to a resource.
     * @param {SchedulerEventModel|string|number} event Event record or id
     * @param {SchedulerResourceModel|string|number} resource Resource record or id
     */
    isEventAssignedToResource(event: SchedulerEventModel|string|number, resource: SchedulerResourceModel|string|number): boolean;
    /**
     * Applies a new dataset to the AssignmentStore and triggers calculations directly after. Use it to plug externally
     * fetched data into the store.
     * @param {Partial<AssignmentModelConfig>[]} data Array of AssignmentModel data objects
     */
    loadDataAsync(data: Partial<AssignmentModelConfig>[]): Promise<void>;
    /**
     * Maps over event assignments.
     * @param {SchedulerEventModel} event
     * @param {Function} fn
     * @param {Function} filterFn
     */
    mapAssignmentsForEvent(event: SchedulerEventModel, fn?: Function, filterFn?: Function): SchedulerEventModel[]|any[];
    /**
     * Maps over resource assignments.
     * @param {SchedulerResourceModel|number|string} resource
     * @param {Function} fn
     * @param {Function} filterFn
     */
    mapAssignmentsForResource(resource: SchedulerResourceModel|number|string, fn?: Function, filterFn?: Function): SchedulerResourceModel[]|any[];
    /**
     * Removes all assignments for given event
     * @param {TimeSpan} event
     */
    removeAssignmentsForEvent(event: TimeSpan): void;
    /**
     * Removes all assignments for given resource
     * @param {SchedulerResourceModel|any} resource
     */
    removeAssignmentsForResource(resource: SchedulerResourceModel|any): void;
    /**
     * Removes assignment record for a given event and resource.
     * @param {TimeSpan|string|number} event
     * @param {SchedulerResourceModel|string|number} resources The resource to unassign the event from. If omitted, all resources of the events will be unassigned
     */
    unassignEventFromResource(event: TimeSpan|string|number, resources?: SchedulerResourceModel|string|number): SchedulerAssignmentModel|SchedulerAssignmentModel[];
}

/**
 * Type with configuration options for [CalendarManagerStore](https://bryntum.com/products/grid/docs/api/SchedulerPro/data/CalendarManagerStore) class.
 */
type CalendarManagerStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-allowNoId)
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-applyChangesetFilterSortTarget)
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     * Return `true` to include the passed record, or a `false` to exclude it.
     * @param {Model} record
     * @returns {boolean}
     */
    chainedFilterFn: (record: Model) => boolean
    /**
     * Url to post newly created records to.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-createUrl)
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-data)
     */
    data: object[]|Model[]
    /**
     * Url for deleting records.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-deleteUrl)
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-fetchOptions)
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a [Model](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-fields)
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-filterParamName)
     */
    filterParamName: string
    /**
     * Specify one or more [CollectionFilter](https://bryntum.com/products/schedulerpro/docs/api/Core/util/CollectionFilter) config objects to apply initially.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-filters)
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-headers)
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when [useRestfulMethods](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-useRestfulMethods) is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-httpMethods)
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-listeners)
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of [Model](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model). Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-modelClass)
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting *either* the [pageParamName](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-pageParamName) *or* the
     * [pageStartParamName](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-pageStartParamName), this is the value to send in the [pageSizeParamName](#Core/data/AjaxStore#config-pageSizeParamName).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-pageSize)
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's [readUrl](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-readUrl) to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-readUrl)
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-responseDataProperty)
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-responseSuccessProperty)
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store [is paged](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#property-isPaged)</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-responseTotalProperty)
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-restfulFilter)
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-sortParamName)
     */
    sortParamName: string
    /**
     * Initial sorters, format is:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-sorters)
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-startGroupsCollapsed)
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A [Collection](https://bryntum.com/products/schedulerpro/docs/api/Core/util/Collection), or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Store class to use when creating the store when it is a part of a
     * [CrudManager](https://bryntum.com/products/scheduler/docs/api/Scheduler/data/CrudManager).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-storeClass)
     */
    storeClass: typeof Store
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-syncDataOnLoad)
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * An [EventStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-transformFlatData)
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-updateUrl)
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-useLocaleSort)
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-useRawData)
     * @param {boolean} disableDuplicateIdCheck Data must not contain duplicate ids, check is bypassed.
     * @param {boolean} disableDefaultValue Default values will not be applied to record fields.
     * @param {boolean} disableTypeConversion No type conversions will be performed on record data.
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful [httpMethods](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-httpMethods)
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#config-verifyNoGeneratedIds)
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired when a temporary record with the [isCreating](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model#property-isCreating) property set
     * has been confirmed as a part of this store by having its [isCreating](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model#property-isCreating)
     * property cleared.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {Model} event.record The record confirmed as added.
     */
    onAddConfirmed: ((event: { source: Store, record: Model }) => void)|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     * @param {object} event Event object
     * @param {boolean} event.exception `true`. *Only present if the request triggered an exception.*
     * @param {'create'|'read'|'update'|'delete'} event.action Action that has finished, `'create'`, `'read'`, `'update'` or `'delete'`
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`. <em>Only present if the request triggered an exception.</em>
     * @param {Response} event.response The `Response` object
     * @param {object} event.json The decoded response object if there was no `'network'` exception.
     */
    onAfterRequest: ((event: { exception: boolean, action: 'create'|'read'|'update'|'delete', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoad: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadChildren: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#property-isPaged), this is fired before loading a page and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadPage: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before any remote request is initiated.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing key/value pairs that are passed on the request query string
     * @param {object} event.body The body of the request to be posted to the server.
     * @param {'create'|'read'|'update'|'delete'} event.action Action that is making the request, `'create'`, `'read'`, `'update'` or `'delete'`
     */
    onBeforeRequest: ((event: { source: Store, params: object, body: object, action: 'create'|'read'|'update'|'delete' }) => void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onBeforeUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#event-change)
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of the options listed above
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fired after committing added records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitAdded: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing modified records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitModified: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing removed records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitRemoved: ((event: { source: Store }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#event-exception)
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {boolean} event.exception `true`
     * @param {'create'|'read'|'update'|'delete'|'commit'} event.action Action that failed, `'create'`, `'read'`, `'update'` or `'delete'`. May also be fired with '`commit'` to indicate the failure of an aggregated `create`, `update` and `delete` operation. In this case, the event will contain a property for each operation of the commit named `'create'`, `'update'` and `'delete'`, each containing the individual `exception` events.
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object *if the exceptionType is `'server'`*
     */
    onException: ((event: { source: Store, exception: boolean, action: 'create'|'read'|'update'|'delete'|'commit', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired when the id of a record has changed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {string|number} event.oldValue Old id
     * @param {string|number} event.value New id
     */
    onIdChange: ((event: { source: Store, record: Model, oldValue: string|number, value: string|number }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired on successful load
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object.
     */
    onLoad: ((event: { source: Store, data: object[], response: Response, json: object }) => void)|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {object} event.json The decoded response object.
     */
    onLoadChildren: ((event: { source: Store, data: object[], json: object }) => void)|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadChildrenStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when a block of records has been moved within this Store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record (DEPRECATED) The first record moved (The [move](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-move) API now accepts an array of records to move).
     * @param {Model[]} event.records The records moved.
     * @param {number} event.from The index from which the record was removed (applicable only for flat store).
     * @param {number} event.to The index at which the record was inserted (applicable only for flat store).
     * @param {Model} event.newParent The new parent record for the dragged records (applicable only for tree stores)
     * @param {Model[]} event.oldParents The old parent records for the dragged records (applicable only for move operations in tree stores)
     */
    onMove: ((event: { source: Store, record: Model, records: Model[], from: number, to: number, newParent?: Model, oldParents?: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {boolean} event.batch Flag set to `true` when the refresh is triggered by ending a batch
     * @param {'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group'} event.action Name of action which triggered the change. May be one of the options listed above.
     */
    onRefresh: ((event: { source: Store, batch: boolean, action: 'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group' }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired when the root node is set
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.oldRoot The old root node.
     * @param {Model} event.rootNode The new root node.
     */
    onRootChange: ((event: { source: Store, oldRoot: Model, rootNode: Model }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired when a record is modified
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
}

/**
 * A class representing the tree of calendars in the SchedulerPro chart. An individual calendar is represented as an instance of the
 * [CalendarModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/CalendarModel) class. The store expects the data loaded to be hierarchical. Each parent node should
 * contain its children in a property called 'children'.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore)
 */
export class CalendarManagerStore extends AjaxStore {
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: AssignmentStore
    /**
     * Returns the calendar manager store of the project this entity belongs to.
     */
    readonly calendarManagerStore: CalendarManagerStore
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: DependencyStore
    /**
     * Returns the task store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: ProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: ResourceStore
    /**
     * The [store](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) holding data on events.
     */
    readonly taskStore: EventStore
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<CalendarManagerStoreConfig>} config
     */
    constructor(config?: Partial<CalendarManagerStoreConfig>);
}

/**
 * Type with configuration options for [ChangeLogStore](https://bryntum.com/products/grid/docs/api/SchedulerPro/data/ChangeLogStore) class.
 */
type ChangeLogStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ChangeLogStore#config-allowNoId)
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ChangeLogStore#config-applyChangesetFilterSortTarget)
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ChangeLogStore#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ChangeLogStore#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     * Return `true` to include the passed record, or a `false` to exclude it.
     * @param {Model} record
     * @returns {boolean}
     */
    chainedFilterFn: (record: Model) => boolean
    /**
     * Raw data to load initially.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ChangeLogStore#config-data)
     */
    data: object[]|Model[]
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An array of field definitions used to create a [Model](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ChangeLogStore#config-fields)
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * Specify one or more [CollectionFilter](https://bryntum.com/products/schedulerpro/docs/api/Core/util/CollectionFilter) config objects to apply initially.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ChangeLogStore#config-filters)
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ChangeLogStore#config-listeners)
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of [Model](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model). Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ChangeLogStore#config-modelClass)
     */
    modelClass: typeof Model
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * Initial sorters, format is:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ChangeLogStore#config-sorters)
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ChangeLogStore#config-startGroupsCollapsed)
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A [Collection](https://bryntum.com/products/schedulerpro/docs/api/Core/util/Collection), or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Store class to use when creating the store when it is a part of a
     * [CrudManager](https://bryntum.com/products/scheduler/docs/api/Scheduler/data/CrudManager).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ChangeLogStore#config-storeClass)
     */
    storeClass: typeof Store
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ChangeLogStore#config-syncDataOnLoad)
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ChangeLogStore#config-transformFlatData)
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ChangeLogStore#config-useLocaleSort)
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ChangeLogStore#config-useRawData)
     * @param {boolean} disableDuplicateIdCheck Data must not contain duplicate ids, check is bypassed.
     * @param {boolean} disableDefaultValue Default values will not be applied to record fields.
     * @param {boolean} disableTypeConversion No type conversions will be performed on record data.
     */
    useRawData: boolean|object
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ChangeLogStore#config-verifyNoGeneratedIds)
     */
    verifyNoGeneratedIds: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired when a temporary record with the [isCreating](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model#property-isCreating) property set
     * has been confirmed as a part of this store by having its [isCreating](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model#property-isCreating)
     * property cleared.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {Model} event.record The record confirmed as added.
     */
    onAddConfirmed: ((event: { source: Store, record: Model }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onBeforeUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ChangeLogStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ChangeLogStore#event-change)
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of the options listed above
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired when the id of a record has changed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {string|number} event.oldValue Old id
     * @param {string|number} event.value New id
     */
    onIdChange: ((event: { source: Store, record: Model, oldValue: string|number, value: string|number }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when a block of records has been moved within this Store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record (DEPRECATED) The first record moved (The [move](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-move) API now accepts an array of records to move).
     * @param {Model[]} event.records The records moved.
     * @param {number} event.from The index from which the record was removed (applicable only for flat store).
     * @param {number} event.to The index at which the record was inserted (applicable only for flat store).
     * @param {Model} event.newParent The new parent record for the dragged records (applicable only for tree stores)
     * @param {Model[]} event.oldParents The old parent records for the dragged records (applicable only for move operations in tree stores)
     */
    onMove: ((event: { source: Store, record: Model, records: Model[], from: number, to: number, newParent?: Model, oldParents?: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {boolean} event.batch Flag set to `true` when the refresh is triggered by ending a batch
     * @param {'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group'} event.action Name of action which triggered the change. May be one of the options listed above.
     */
    onRefresh: ((event: { source: Store, batch: boolean, action: 'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group' }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired when the root node is set
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.oldRoot The old root node.
     * @param {Model} event.rootNode The new root node.
     */
    onRootChange: ((event: { source: Store, oldRoot: Model, rootNode: Model }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired when a record is modified
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
}

/**
 * A [Store](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store) that contains the changelog, an append-only record of changes to the project,
 * managed by the [Versions](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Versions) feature. See also [VersionStore](#SchedulerPro/data/VersionStore).
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ChangeLogStore)
 */
export class ChangeLogStore extends Store {
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ChangeLogStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/schedulerpro/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
}

/**
 * Type with configuration options for [DependencyStore](https://bryntum.com/products/grid/docs/api/SchedulerPro/data/DependencyStore) class.
 */
type DependencyStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-allowNoId)
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-applyChangesetFilterSortTarget)
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     * Return `true` to include the passed record, or a `false` to exclude it.
     * @param {Model} record
     * @returns {boolean}
     */
    chainedFilterFn: (record: Model) => boolean
    /**
     * Url to post newly created records to.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-createUrl)
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-data)
     */
    data: object[]|Model[]
    /**
     * Url for deleting records.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-deleteUrl)
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-fetchOptions)
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a [Model](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-fields)
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-filterParamName)
     */
    filterParamName: string
    /**
     * Specify one or more [CollectionFilter](https://bryntum.com/products/schedulerpro/docs/api/Core/util/CollectionFilter) config objects to apply initially.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-filters)
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-headers)
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when [useRestfulMethods](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-useRestfulMethods) is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-httpMethods)
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-listeners)
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of [Model](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model). Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-modelClass)
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting *either* the [pageParamName](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-pageParamName) *or* the
     * [pageStartParamName](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-pageStartParamName), this is the value to send in the [pageSizeParamName](#Core/data/AjaxStore#config-pageSizeParamName).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-pageSize)
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's [readUrl](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-readUrl) to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-readUrl)
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-responseDataProperty)
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-responseSuccessProperty)
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store [is paged](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#property-isPaged)</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-responseTotalProperty)
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-restfulFilter)
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-sortParamName)
     */
    sortParamName: string
    /**
     * Initial sorters, format is:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-sorters)
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-startGroupsCollapsed)
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A [Collection](https://bryntum.com/products/schedulerpro/docs/api/Core/util/Collection), or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Store class to use when creating the store when it is a part of a
     * [CrudManager](https://bryntum.com/products/scheduler/docs/api/Scheduler/data/CrudManager).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-storeClass)
     */
    storeClass: typeof Store
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-syncDataOnLoad)
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * An [EventStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-transformFlatData)
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-updateUrl)
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-useLocaleSort)
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-useRawData)
     * @param {boolean} disableDuplicateIdCheck Data must not contain duplicate ids, check is bypassed.
     * @param {boolean} disableDefaultValue Default values will not be applied to record fields.
     * @param {boolean} disableTypeConversion No type conversions will be performed on record data.
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful [httpMethods](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-httpMethods)
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#config-verifyNoGeneratedIds)
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired when a temporary record with the [isCreating](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model#property-isCreating) property set
     * has been confirmed as a part of this store by having its [isCreating](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model#property-isCreating)
     * property cleared.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {Model} event.record The record confirmed as added.
     */
    onAddConfirmed: ((event: { source: Store, record: Model }) => void)|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     * @param {object} event Event object
     * @param {boolean} event.exception `true`. *Only present if the request triggered an exception.*
     * @param {'create'|'read'|'update'|'delete'} event.action Action that has finished, `'create'`, `'read'`, `'update'` or `'delete'`
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`. <em>Only present if the request triggered an exception.</em>
     * @param {Response} event.response The `Response` object
     * @param {object} event.json The decoded response object if there was no `'network'` exception.
     */
    onAfterRequest: ((event: { exception: boolean, action: 'create'|'read'|'update'|'delete', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoad: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadChildren: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#property-isPaged), this is fired before loading a page and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadPage: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before any remote request is initiated.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing key/value pairs that are passed on the request query string
     * @param {object} event.body The body of the request to be posted to the server.
     * @param {'create'|'read'|'update'|'delete'} event.action Action that is making the request, `'create'`, `'read'`, `'update'` or `'delete'`
     */
    onBeforeRequest: ((event: { source: Store, params: object, body: object, action: 'create'|'read'|'update'|'delete' }) => void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onBeforeUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#event-change)
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of the options listed above
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fired after committing added records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitAdded: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing modified records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitModified: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing removed records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitRemoved: ((event: { source: Store }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#event-exception)
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {boolean} event.exception `true`
     * @param {'create'|'read'|'update'|'delete'|'commit'} event.action Action that failed, `'create'`, `'read'`, `'update'` or `'delete'`. May also be fired with '`commit'` to indicate the failure of an aggregated `create`, `update` and `delete` operation. In this case, the event will contain a property for each operation of the commit named `'create'`, `'update'` and `'delete'`, each containing the individual `exception` events.
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object *if the exceptionType is `'server'`*
     */
    onException: ((event: { source: Store, exception: boolean, action: 'create'|'read'|'update'|'delete'|'commit', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired when the id of a record has changed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {string|number} event.oldValue Old id
     * @param {string|number} event.value New id
     */
    onIdChange: ((event: { source: Store, record: Model, oldValue: string|number, value: string|number }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired on successful load
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object.
     */
    onLoad: ((event: { source: Store, data: object[], response: Response, json: object }) => void)|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {object} event.json The decoded response object.
     */
    onLoadChildren: ((event: { source: Store, data: object[], json: object }) => void)|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadChildrenStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when a block of records has been moved within this Store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record (DEPRECATED) The first record moved (The [move](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-move) API now accepts an array of records to move).
     * @param {Model[]} event.records The records moved.
     * @param {number} event.from The index from which the record was removed (applicable only for flat store).
     * @param {number} event.to The index at which the record was inserted (applicable only for flat store).
     * @param {Model} event.newParent The new parent record for the dragged records (applicable only for tree stores)
     * @param {Model[]} event.oldParents The old parent records for the dragged records (applicable only for move operations in tree stores)
     */
    onMove: ((event: { source: Store, record: Model, records: Model[], from: number, to: number, newParent?: Model, oldParents?: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {boolean} event.batch Flag set to `true` when the refresh is triggered by ending a batch
     * @param {'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group'} event.action Name of action which triggered the change. May be one of the options listed above.
     */
    onRefresh: ((event: { source: Store, batch: boolean, action: 'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group' }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired when the root node is set
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.oldRoot The old root node.
     * @param {Model} event.rootNode The new root node.
     */
    onRootChange: ((event: { source: Store, oldRoot: Model, rootNode: Model }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired when a record is modified
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
}

/**
 * A store representing a collection of dependencies between events in the [EventStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore).
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore)
 */
export class DependencyStore extends AjaxStore {
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: AssignmentStore
    /**
     * Returns the calendar manager store of the project this entity belongs to.
     */
    readonly calendarManagerStore: CalendarManagerStore
    /**
     * Applies a new dataset to the DependencyStore. Use it to plug externally fetched data into the store.
     */
    data: Partial<DependencyModelConfig>[]
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: DependencyStore
    /**
     * Returns the task store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: ProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: ResourceStore
    /**
     * The [store](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) holding data on events.
     */
    readonly taskStore: EventStore
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<DependencyStoreConfig>} config
     */
    constructor(config?: Partial<DependencyStoreConfig>);
    /**
     * Add dependencies to the store.
     * @param {SchedulerDependencyModel|SchedulerDependencyModel[]|Partial<DependencyModelConfig>|Partial<DependencyModelConfig>[]} records Array of records/data or a single record/data to add to store
     * @param {boolean} silent Specify `true` to suppress events
     */
    add(records: SchedulerDependencyModel|SchedulerDependencyModel[]|Partial<DependencyModelConfig>|Partial<DependencyModelConfig>[], silent?: boolean): SchedulerDependencyModel[];
    /**
     * Add dependencies to the store and triggers calculations directly after. Await this function to have up to date
     * references on the added dependencies.
     * @param {SchedulerDependencyModel|SchedulerDependencyModel[]|Partial<DependencyModelConfig>|Partial<DependencyModelConfig>[]} records Array of records/data or a single record/data to add to store
     * @param {boolean} silent Specify `true` to suppress events
     */
    addAsync(records: SchedulerDependencyModel|SchedulerDependencyModel[]|Partial<DependencyModelConfig>|Partial<DependencyModelConfig>[], silent?: boolean): Promise<SchedulerDependencyModel[]>;
    /**
     * Returns dependency model instance linking tasks with given ids. The dependency can be forward (from 1st
     * task to 2nd) or backward (from 2nd to 1st).
     * @param {SchedulerEventModel|string} sourceEvent 1st event
     * @param {SchedulerEventModel|string} targetEvent 2nd event
     */
    getDependencyForSourceAndTargetEvents(sourceEvent: SchedulerEventModel|string, targetEvent: SchedulerEventModel|string): SchedulerDependencyModel;
    /**
     * Returns all dependencies for a certain event (both incoming and outgoing)
     * @param {SchedulerEventModel} event
     */
    getEventDependencies(event: SchedulerEventModel): SchedulerDependencyModel[];
    /**
     * Returns a dependency model instance linking given events if such dependency exists in the store.
     * The dependency can be forward (from 1st event to 2nd) or backward (from 2nd to 1st).
     * @param {SchedulerEventModel|string} sourceEvent
     * @param {SchedulerEventModel|string} targetEvent
     */
    getEventsLinkingDependency(sourceEvent: SchedulerEventModel|string, targetEvent: SchedulerEventModel|string): SchedulerDependencyModel;
    /**
     * Returns all dependencies highlighted with the given CSS class
     * @param {string} cls
     */
    getHighlightedDependencies(cls: string): DependencyBaseModel[];
    /**
     * Validation method used to validate a dependency. Override and return `true` to indicate that an
     * existing dependency between two tasks is valid. For a new dependency being created please see
     * [isValidDependencyToCreate](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/mixin/DependencyStoreMixin#function-isValidDependencyToCreate).
     * @param {SchedulerDependencyModel|TimeSpan|number|string} dependencyOrFromId The dependency model, the from task/event or the id of the from task/event
     * @param {TimeSpan|number|string} toId To task/event or id thereof if the first parameter is not a dependency record
     * @param {number} type Dependency [Type](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static) if the first parameter is not a dependency model instance.
     */
    isValidDependency(dependencyOrFromId: SchedulerDependencyModel|TimeSpan|number|string, toId?: TimeSpan|number|string, type?: number): Promise<boolean>;
    /**
     * Validation method used to validate a dependency while creating. Override and return `true` to indicate that
     * a new dependency is valid to be created.
     * @param {TimeSpan|number|string} fromId From event/task or id
     * @param {TimeSpan|number|string} toId To event/task or id
     * @param {number} type Dependency [Type](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static)
     */
    isValidDependencyToCreate(fromId: TimeSpan|number|string, toId: TimeSpan|number|string, type: number): boolean;
    /**
     * Applies a new dataset to the DependencyStore and triggers calculations directly after. Use it to plug externally
     * fetched data into the store.
     * @param {Partial<DependencyModelConfig>[]} data Array of DependencyModel data objects
     */
    loadDataAsync(data: Partial<DependencyModelConfig>[]): Promise<void>;
}

/**
 * Type with configuration options for [EventStore](https://bryntum.com/products/grid/docs/api/SchedulerPro/data/EventStore) class.
 */
type EventStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-allowNoId)
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-applyChangesetFilterSortTarget)
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     * Return `true` to include the passed record, or a `false` to exclude it.
     * @param {Model} record
     * @returns {boolean}
     */
    chainedFilterFn: (record: Model) => boolean
    /**
     * Url to post newly created records to.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-createUrl)
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-data)
     */
    data: object[]|Model[]
    /**
     * Url for deleting records.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-deleteUrl)
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-fetchOptions)
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a [Model](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-fields)
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-filterParamName)
     */
    filterParamName: string
    /**
     * Specify one or more [CollectionFilter](https://bryntum.com/products/schedulerpro/docs/api/Core/util/CollectionFilter) config objects to apply initially.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-filters)
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-headers)
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when [useRestfulMethods](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-useRestfulMethods) is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-httpMethods)
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-listeners)
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records
     */
    modelClass: typeof EventModel
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting *either* the [pageParamName](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-pageParamName) *or* the
     * [pageStartParamName](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-pageStartParamName), this is the value to send in the [pageSizeParamName](#Core/data/AjaxStore#config-pageSizeParamName).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-pageSize)
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's [readUrl](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-readUrl) to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-readUrl)
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * Configure with `true` to also remove the event when removing the last assignment from the linked
     * AssignmentStore. This config has not effect when using EventStore in legacy `resourceId`-mode.
     */
    removeUnassignedEvent: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-responseDataProperty)
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-responseSuccessProperty)
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store [is paged](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#property-isPaged)</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-responseTotalProperty)
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-restfulFilter)
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * Configure with `true` to force single-resource mode, an event can only be assigned to a single resource.
     * If not provided, the mode will be inferred from
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-singleAssignment)
     */
    singleAssignment: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-sortParamName)
     */
    sortParamName: string
    /**
     * Initial sorters, format is:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-sorters)
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-startGroupsCollapsed)
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A [Collection](https://bryntum.com/products/schedulerpro/docs/api/Core/util/Collection), or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Store class to use when creating the store when it is a part of a
     * [CrudManager](https://bryntum.com/products/scheduler/docs/api/Scheduler/data/CrudManager).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-storeClass)
     */
    storeClass: typeof Store
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-syncDataOnLoad)
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * An [EventStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-transformFlatData)
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-updateUrl)
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-useLocaleSort)
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-useRawData)
     * @param {boolean} disableDuplicateIdCheck Data must not contain duplicate ids, check is bypassed.
     * @param {boolean} disableDefaultValue Default values will not be applied to record fields.
     * @param {boolean} disableTypeConversion No type conversions will be performed on record data.
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful [httpMethods](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-httpMethods)
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#config-verifyNoGeneratedIds)
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired when a temporary record with the [isCreating](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model#property-isCreating) property set
     * has been confirmed as a part of this store by having its [isCreating](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model#property-isCreating)
     * property cleared.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {Model} event.record The record confirmed as added.
     */
    onAddConfirmed: ((event: { source: Store, record: Model }) => void)|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     * @param {object} event Event object
     * @param {boolean} event.exception `true`. *Only present if the request triggered an exception.*
     * @param {'create'|'read'|'update'|'delete'} event.action Action that has finished, `'create'`, `'read'`, `'update'` or `'delete'`
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`. <em>Only present if the request triggered an exception.</em>
     * @param {Response} event.response The `Response` object
     * @param {object} event.json The decoded response object if there was no `'network'` exception.
     */
    onAfterRequest: ((event: { exception: boolean, action: 'create'|'read'|'update'|'delete', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoad: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadChildren: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#property-isPaged), this is fired before loading a page and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadPage: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before any remote request is initiated.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing key/value pairs that are passed on the request query string
     * @param {object} event.body The body of the request to be posted to the server.
     * @param {'create'|'read'|'update'|'delete'} event.action Action that is making the request, `'create'`, `'read'`, `'update'` or `'delete'`
     */
    onBeforeRequest: ((event: { source: Store, params: object, body: object, action: 'create'|'read'|'update'|'delete' }) => void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onBeforeUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#event-change)
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of the options listed above
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fired after committing added records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitAdded: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing modified records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitModified: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing removed records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitRemoved: ((event: { source: Store }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#event-exception)
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {boolean} event.exception `true`
     * @param {'create'|'read'|'update'|'delete'|'commit'} event.action Action that failed, `'create'`, `'read'`, `'update'` or `'delete'`. May also be fired with '`commit'` to indicate the failure of an aggregated `create`, `update` and `delete` operation. In this case, the event will contain a property for each operation of the commit named `'create'`, `'update'` and `'delete'`, each containing the individual `exception` events.
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object *if the exceptionType is `'server'`*
     */
    onException: ((event: { source: Store, exception: boolean, action: 'create'|'read'|'update'|'delete'|'commit', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired when the id of a record has changed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {string|number} event.oldValue Old id
     * @param {string|number} event.value New id
     */
    onIdChange: ((event: { source: Store, record: Model, oldValue: string|number, value: string|number }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired on successful load
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object.
     */
    onLoad: ((event: { source: Store, data: object[], response: Response, json: object }) => void)|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {object} event.json The decoded response object.
     */
    onLoadChildren: ((event: { source: Store, data: object[], json: object }) => void)|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadChildrenStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when a range of events is requested from the [getEvents](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/mixin/GetEventsMixin#function-getEvents) method.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#event-loadDateRange)
     * @param {object} event Event object
     * @param {SchedulerEventStore} event.source This EventStore
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     * @param {boolean} event.changed `true` if the date range is different from the last time a request was made.
     */
    onLoadDateRange: ((event: { source: SchedulerEventStore, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date }, changed: boolean }) => void)|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when a block of records has been moved within this Store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record (DEPRECATED) The first record moved (The [move](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-move) API now accepts an array of records to move).
     * @param {Model[]} event.records The records moved.
     * @param {number} event.from The index from which the record was removed (applicable only for flat store).
     * @param {number} event.to The index at which the record was inserted (applicable only for flat store).
     * @param {Model} event.newParent The new parent record for the dragged records (applicable only for tree stores)
     * @param {Model[]} event.oldParents The old parent records for the dragged records (applicable only for move operations in tree stores)
     */
    onMove: ((event: { source: Store, record: Model, records: Model[], from: number, to: number, newParent?: Model, oldParents?: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {boolean} event.batch Flag set to `true` when the refresh is triggered by ending a batch
     * @param {'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group'} event.action Name of action which triggered the change. May be one of the options listed above.
     */
    onRefresh: ((event: { source: Store, batch: boolean, action: 'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group' }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired when the root node is set
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.oldRoot The old root node.
     * @param {Model} event.rootNode The new root node.
     */
    onRootChange: ((event: { source: Store, oldRoot: Model, rootNode: Model }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired when a record is modified
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
}

/**
 * A store holding all the [events](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel) to be rendered into a [Scheduler Pro](#SchedulerPro/view/SchedulerPro).
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore)
 */
export class EventStore extends AjaxStore {
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: AssignmentStore
    /**
     * Returns the calendar manager store of the project this entity belongs to.
     */
    readonly calendarManagerStore: CalendarManagerStore
    /**
     * Applies a new dataset to the EventStore. Use it to plug externally fetched data into the store.
     */
    data: Partial<EventModelConfig>[]
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: DependencyStore
    /**
     * Returns the task store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * Class used to represent records. Defaults to class EventModel.
     */
    modelClass: typeof EventModel
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: ProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: ResourceStore
    /**
     * The [store](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) holding data on events.
     */
    readonly taskStore: EventStore
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when a range of events is requested from the [getEvents](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/mixin/GetEventsMixin#function-getEvents) method.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore#event-loadDateRange)
     * @param {object} event Event object
     * @param {SchedulerEventStore} event.source This EventStore
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     * @param {boolean} event.changed `true` if the date range is different from the last time a request was made.
     */
    onLoadDateRange: ((event: { source: SchedulerEventStore, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date }, changed: boolean }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<EventStoreConfig>} config
     */
    constructor(config?: Partial<EventStoreConfig>);
    /**
     * Add events to the store.
     * @param {SchedulerEventModel|SchedulerEventModel[]|Partial<EventModelConfig>|Partial<EventModelConfig>[]} records Array of records/data or a single record/data to add to store
     * @param {boolean} silent Specify `true` to suppress events
     */
    add(records: SchedulerEventModel|SchedulerEventModel[]|Partial<EventModelConfig>|Partial<EventModelConfig>[], silent?: boolean): SchedulerEventModel[];
    /**
     * Add events to the store and triggers calculations directly after. Await this function to have up to date data on
     * the added events.
     * @param {SchedulerEventModel|SchedulerEventModel[]|Partial<EventModelConfig>|Partial<EventModelConfig>[]} records Array of records/data or a single record/data to add to store
     * @param {boolean} silent Specify `true` to suppress events
     */
    addAsync(records: SchedulerEventModel|SchedulerEventModel[]|Partial<EventModelConfig>|Partial<EventModelConfig>[], silent?: boolean): Promise<SchedulerEventModel[]>;
    /**
     * Appends a new record to the store
     * @param {SchedulerEventModel} record The record to append to the store
     */
    append(record: SchedulerEventModel): void;
    /**
     * Creates and adds assignment record for a given event and a resource.
     * @param {SchedulerEventModel|string|number} event
     * @param {SchedulerResourceModel|string|number|SchedulerResourceModel[]|string[]|number[]} resource The resource(s) to assign to the event
     * @param {boolean} removeExistingAssignments `true` to first remove existing assignments
     */
    assignEventToResource(event: SchedulerEventModel|string|number, resource: SchedulerResourceModel|string|number|SchedulerResourceModel[]|string[]|number[], removeExistingAssignments?: boolean): SchedulerAssignmentModel[];
    /**
     * Calls the supplied iterator function once for every scheduled event, providing these arguments
     * @param {Function} fn iterator function
     * @param {object} thisObj `this` reference for the function
     */
    forEachScheduledEvent(fn: Function, thisObj?: object): void;
    /**
     * Returns all assignments for a given event.
     * @param {SchedulerEventModel|string|number} event
     */
    getAssignmentsForEvent(event: SchedulerEventModel|string|number): SchedulerAssignmentModel[];
    /**
     * Returns all assignments for a given resource.
     * @param {SchedulerResourceModel|string|number} resource
     */
    getAssignmentsForResource(resource: SchedulerResourceModel|string|number): SchedulerAssignmentModel[];
    /**
     * Returns a `Map`, keyed by `YYYY-MM-DD` date keys containing event counts for all the days
     * between the passed `startDate` and `endDate`. Occurrences of recurring events are included.
     * @param {object} options An options object determining which events to return
     */
    getEventCounts(options: {
        startDate: Date
        endDate?: Date
    }): void;
    /**
     * Returns an array of events for the date range specified by the `startDate` and `endDate` options.
     * @param {object} options An options object determining which events to return
     */
    getEvents(options: {
        date?: Date
        startDate: Date
        endDate?: Date
        resourceRecord?: SchedulerResourceModel
        filter?: Function
        ignoreFilters?: boolean
        includeOccurrences?: boolean
        allowPartial?: boolean
        startOnly?: boolean
        onlyAssigned?: boolean
        dateMap?: boolean|Map<any, any>
    }): SchedulerEventModel[]|Map<any, any>;
    /**
     * Returns all events assigned to a resource.
     * *NOTE:* this does not include occurrences of recurring events. Use the
     * [getEvents](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/mixin/GetEventsMixin#function-getEvents) API to include occurrences of recurring events.
     * @param {SchedulerResourceModel|string|number} resource Resource or resource id.
     */
    getEventsForResource(resource: SchedulerResourceModel|string|number): SchedulerEventModel[];
    /**
     * Returns all the recurring events.
     */
    getRecurringEvents(): SchedulerEventModel[];
    /**
     * Returns all the recurring timespans.
     */
    getRecurringTimeSpans(): TimeSpan[];
    /**
     * Returns all resources assigned to an event.
     * @param {SchedulerEventModel|string|number} event
     */
    getResourcesForEvent(event: SchedulerEventModel|string|number): SchedulerResourceModel[];
    /**
     * Returns an object defining the earliest start date and the latest end date of all the events in the store.
     */
    getTotalTimeSpan(): object;
    /**
     * Checks if a date range is allocated or not for a given resource.
     * @param {Date} start The start date
     * @param {Date} end The end date
     * @param {SchedulerEventModel|null} excludeEvent An event to exclude from the check (or null)
     * @param {SchedulerResourceModel} resource The resource
     */
    isDateRangeAvailable(start: Date, end: Date, excludeEvent: SchedulerEventModel|null, resource: SchedulerResourceModel): boolean;
    /**
     * Checks whether an event is assigned to a resource.
     * @param {SchedulerEventModel|string|number} event
     * @param {SchedulerResourceModel|string|number} resource
     */
    isEventAssignedToResource(event: SchedulerEventModel|string|number, resource: SchedulerResourceModel|string|number): boolean;
    /**
     * Checks if given event record is persistable. By default it always is, override EventModels `isPersistable` if you
     * need custom logic.
     * @param {SchedulerEventModel} event
     */
    isEventPersistable(event: SchedulerEventModel): boolean;
    /**
     * Applies a new dataset to the EventStore and triggers calculations directly after. Use it to plug externally
     * fetched data into the store.
     * @param {Partial<EventModelConfig>[]} data Array of EventModel data objects
     */
    loadDataAsync(data: Partial<EventModelConfig>[]): Promise<void>;
    /**
     * Reassigns an event from an old resource to a new resource
     * @param {SchedulerEventModel} event An event or id of the event to reassign
     * @param {SchedulerResourceModel|SchedulerResourceModel[]} oldResource A resource or id to unassign from
     * @param {SchedulerResourceModel|SchedulerResourceModel[]} newResource A resource or id to assign to
     */
    reassignEventFromResourceToResource(event: SchedulerEventModel, oldResource: SchedulerResourceModel|SchedulerResourceModel[], newResource: SchedulerResourceModel|SchedulerResourceModel[]): void;
    /**
     * Removes all assignments for given event
     * @param {SchedulerEventModel|string|number} event
     */
    removeAssignmentsForEvent(event: SchedulerEventModel|string|number): void;
    /**
     * Removes all assignments for given resource
     * @param {SchedulerResourceModel|string|number} resource
     */
    removeAssignmentsForResource(resource: SchedulerResourceModel|string|number): void;
    /**
     * Removes assignment record for a given event and a resource.
     * @param {SchedulerEventModel|string|number} event
     * @param {SchedulerResourceModel|string|number} resource
     */
    unassignEventFromResource(event: SchedulerEventModel|string|number, resource: SchedulerResourceModel|string|number): void;
}

/**
 * Type with configuration options for [ResourceStore](https://bryntum.com/products/grid/docs/api/SchedulerPro/data/ResourceStore) class.
 */
type ResourceStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-allowNoId)
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-applyChangesetFilterSortTarget)
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     * Return `true` to include the passed record, or a `false` to exclude it.
     * @param {Model} record
     * @returns {boolean}
     */
    chainedFilterFn: (record: Model) => boolean
    /**
     * Url to post newly created records to.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-createUrl)
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-data)
     */
    data: object[]|Model[]
    /**
     * Url for deleting records.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-deleteUrl)
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-fetchOptions)
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a [Model](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-fields)
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-filterParamName)
     */
    filterParamName: string
    /**
     * Specify one or more [CollectionFilter](https://bryntum.com/products/schedulerpro/docs/api/Core/util/CollectionFilter) config objects to apply initially.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-filters)
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-headers)
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when [useRestfulMethods](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-useRestfulMethods) is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-httpMethods)
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-listeners)
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of [Model](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model). Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-modelClass)
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting *either* the [pageParamName](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-pageParamName) *or* the
     * [pageStartParamName](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-pageStartParamName), this is the value to send in the [pageSizeParamName](#Core/data/AjaxStore#config-pageSizeParamName).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-pageSize)
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's [readUrl](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-readUrl) to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-readUrl)
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-responseDataProperty)
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-responseSuccessProperty)
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store [is paged](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#property-isPaged)</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-responseTotalProperty)
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-restfulFilter)
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-sortParamName)
     */
    sortParamName: string
    /**
     * Initial sorters, format is:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-sorters)
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-startGroupsCollapsed)
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A [Collection](https://bryntum.com/products/schedulerpro/docs/api/Core/util/Collection), or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Store class to use when creating the store when it is a part of a
     * [CrudManager](https://bryntum.com/products/scheduler/docs/api/Scheduler/data/CrudManager).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-storeClass)
     */
    storeClass: typeof Store
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-syncDataOnLoad)
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * An [EventStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-transformFlatData)
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-updateUrl)
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-useLocaleSort)
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-useRawData)
     * @param {boolean} disableDuplicateIdCheck Data must not contain duplicate ids, check is bypassed.
     * @param {boolean} disableDefaultValue Default values will not be applied to record fields.
     * @param {boolean} disableTypeConversion No type conversions will be performed on record data.
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful [httpMethods](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-httpMethods)
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#config-verifyNoGeneratedIds)
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired when a temporary record with the [isCreating](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model#property-isCreating) property set
     * has been confirmed as a part of this store by having its [isCreating](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model#property-isCreating)
     * property cleared.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {Model} event.record The record confirmed as added.
     */
    onAddConfirmed: ((event: { source: Store, record: Model }) => void)|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     * @param {object} event Event object
     * @param {boolean} event.exception `true`. *Only present if the request triggered an exception.*
     * @param {'create'|'read'|'update'|'delete'} event.action Action that has finished, `'create'`, `'read'`, `'update'` or `'delete'`
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`. <em>Only present if the request triggered an exception.</em>
     * @param {Response} event.response The `Response` object
     * @param {object} event.json The decoded response object if there was no `'network'` exception.
     */
    onAfterRequest: ((event: { exception: boolean, action: 'create'|'read'|'update'|'delete', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoad: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadChildren: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#property-isPaged), this is fired before loading a page and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadPage: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before any remote request is initiated.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing key/value pairs that are passed on the request query string
     * @param {object} event.body The body of the request to be posted to the server.
     * @param {'create'|'read'|'update'|'delete'} event.action Action that is making the request, `'create'`, `'read'`, `'update'` or `'delete'`
     */
    onBeforeRequest: ((event: { source: Store, params: object, body: object, action: 'create'|'read'|'update'|'delete' }) => void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onBeforeUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#event-change)
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of the options listed above
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fired after committing added records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitAdded: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing modified records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitModified: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing removed records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitRemoved: ((event: { source: Store }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#event-exception)
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {boolean} event.exception `true`
     * @param {'create'|'read'|'update'|'delete'|'commit'} event.action Action that failed, `'create'`, `'read'`, `'update'` or `'delete'`. May also be fired with '`commit'` to indicate the failure of an aggregated `create`, `update` and `delete` operation. In this case, the event will contain a property for each operation of the commit named `'create'`, `'update'` and `'delete'`, each containing the individual `exception` events.
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object *if the exceptionType is `'server'`*
     */
    onException: ((event: { source: Store, exception: boolean, action: 'create'|'read'|'update'|'delete'|'commit', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired when the id of a record has changed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {string|number} event.oldValue Old id
     * @param {string|number} event.value New id
     */
    onIdChange: ((event: { source: Store, record: Model, oldValue: string|number, value: string|number }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired on successful load
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object.
     */
    onLoad: ((event: { source: Store, data: object[], response: Response, json: object }) => void)|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {object} event.json The decoded response object.
     */
    onLoadChildren: ((event: { source: Store, data: object[], json: object }) => void)|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadChildrenStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when a block of records has been moved within this Store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record (DEPRECATED) The first record moved (The [move](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-move) API now accepts an array of records to move).
     * @param {Model[]} event.records The records moved.
     * @param {number} event.from The index from which the record was removed (applicable only for flat store).
     * @param {number} event.to The index at which the record was inserted (applicable only for flat store).
     * @param {Model} event.newParent The new parent record for the dragged records (applicable only for tree stores)
     * @param {Model[]} event.oldParents The old parent records for the dragged records (applicable only for move operations in tree stores)
     */
    onMove: ((event: { source: Store, record: Model, records: Model[], from: number, to: number, newParent?: Model, oldParents?: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {boolean} event.batch Flag set to `true` when the refresh is triggered by ending a batch
     * @param {'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group'} event.action Name of action which triggered the change. May be one of the options listed above.
     */
    onRefresh: ((event: { source: Store, batch: boolean, action: 'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group' }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired when the root node is set
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.oldRoot The old root node.
     * @param {Model} event.rootNode The new root node.
     */
    onRootChange: ((event: { source: Store, oldRoot: Model, rootNode: Model }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired when a record is modified
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
}

/**
 * A store holding all the [resources](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceModel) to be rendered into a
 * [Scheduler Pro](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro).
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore)
 */
export class ResourceStore extends AjaxStore {
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: AssignmentStore
    /**
     * Returns the calendar manager store of the project this entity belongs to.
     */
    readonly calendarManagerStore: CalendarManagerStore
    /**
     * Applies a new dataset to the ResourceStore. Use it to plug externally fetched data into the store.
     */
    data: Partial<ResourceModelConfig>[]
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: DependencyStore
    /**
     * Returns the task store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: ProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: ResourceStore
    /**
     * The [store](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) holding data on events.
     */
    readonly taskStore: EventStore
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ResourceStoreConfig>} config
     */
    constructor(config?: Partial<ResourceStoreConfig>);
    /**
     * Add resources to the store.
     * @param {SchedulerResourceModel|SchedulerResourceModel[]|Partial<ResourceModelConfig>|Partial<ResourceModelConfig>[]} records Array of records/data or a single record/data to add to store
     * @param {boolean} silent Specify `true` to suppress events
     */
    add(records: SchedulerResourceModel|SchedulerResourceModel[]|Partial<ResourceModelConfig>|Partial<ResourceModelConfig>[], silent?: boolean): SchedulerResourceModel[];
    /**
     * Add resources to the store and triggers calculations directly after. Await this function to have up to date
     * references on the added resources.
     * @param {SchedulerResourceModel|SchedulerResourceModel[]|Partial<ResourceModelConfig>|Partial<ResourceModelConfig>[]} records Array of records/data or a single record/data to add to store
     * @param {boolean} silent Specify `true` to suppress events
     */
    addAsync(records: SchedulerResourceModel|SchedulerResourceModel[]|Partial<ResourceModelConfig>|Partial<ResourceModelConfig>[], silent?: boolean): Promise<SchedulerResourceModel[]>;
    /**
     * Returns all resources that have no events assigned during the specified time range.
     * @param {Date} startDate Time range start date
     * @param {Date} endDate Time range end date
     */
    getAvailableResources(startDate: Date, endDate: Date): SchedulerResourceModel[];
    /**
     * Applies a new dataset to the ResourceStore and triggers calculations directly after. Use it to plug externally
     * fetched data into the store.
     * @param {Partial<ResourceModelConfig>[]} data Array of ResourceModel data objects
     */
    loadDataAsync(data: Partial<ResourceModelConfig>[]): Promise<void>;
}

/**
 * Type with configuration options for [ResourceUtilizationStore](https://bryntum.com/products/grid/docs/api/SchedulerPro/data/ResourceUtilizationStore) class.
 */
type ResourceUtilizationStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-allowNoId)
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-applyChangesetFilterSortTarget)
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     * Return `true` to include the passed record, or a `false` to exclude it.
     * @param {Model} record
     * @returns {boolean}
     */
    chainedFilterFn: (record: Model) => boolean
    /**
     * Url to post newly created records to.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-createUrl)
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-data)
     */
    data: object[]|Model[]
    /**
     * Url for deleting records.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-deleteUrl)
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-fetchOptions)
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a [Model](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-fields)
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-filterParamName)
     */
    filterParamName: string
    /**
     * Specify one or more [CollectionFilter](https://bryntum.com/products/schedulerpro/docs/api/Core/util/CollectionFilter) config objects to apply initially.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-filters)
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-headers)
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when [useRestfulMethods](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-useRestfulMethods) is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-httpMethods)
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-listeners)
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of [Model](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model). Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-modelClass)
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting *either* the [pageParamName](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-pageParamName) *or* the
     * [pageStartParamName](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-pageStartParamName), this is the value to send in the [pageSizeParamName](#Core/data/AjaxStore#config-pageSizeParamName).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-pageSize)
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's [readUrl](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-readUrl) to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Project instance to retrieve resources and assignments data from.
     */
    project: ProjectModel
    /**
     * Url to read data from.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-readUrl)
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-responseDataProperty)
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-responseSuccessProperty)
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store [is paged](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#property-isPaged)</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-responseTotalProperty)
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-restfulFilter)
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-sortParamName)
     */
    sortParamName: string
    /**
     * Initial sorters, format is:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-sorters)
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-startGroupsCollapsed)
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A [Collection](https://bryntum.com/products/schedulerpro/docs/api/Core/util/Collection), or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Store class to use when creating the store when it is a part of a
     * [CrudManager](https://bryntum.com/products/scheduler/docs/api/Scheduler/data/CrudManager).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-storeClass)
     */
    storeClass: typeof Store
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-syncDataOnLoad)
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-transformFlatData)
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-updateUrl)
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-useLocaleSort)
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-useRawData)
     * @param {boolean} disableDuplicateIdCheck Data must not contain duplicate ids, check is bypassed.
     * @param {boolean} disableDefaultValue Default values will not be applied to record fields.
     * @param {boolean} disableTypeConversion No type conversions will be performed on record data.
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful [httpMethods](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#config-httpMethods)
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#config-verifyNoGeneratedIds)
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired when a temporary record with the [isCreating](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model#property-isCreating) property set
     * has been confirmed as a part of this store by having its [isCreating](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model#property-isCreating)
     * property cleared.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {Model} event.record The record confirmed as added.
     */
    onAddConfirmed: ((event: { source: Store, record: Model }) => void)|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     * @param {object} event Event object
     * @param {boolean} event.exception `true`. *Only present if the request triggered an exception.*
     * @param {'create'|'read'|'update'|'delete'} event.action Action that has finished, `'create'`, `'read'`, `'update'` or `'delete'`
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`. <em>Only present if the request triggered an exception.</em>
     * @param {Response} event.response The `Response` object
     * @param {object} event.json The decoded response object if there was no `'network'` exception.
     */
    onAfterRequest: ((event: { exception: boolean, action: 'create'|'read'|'update'|'delete', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoad: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadChildren: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/schedulerpro/docs/api/Core/data/AjaxStore#property-isPaged), this is fired before loading a page and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadPage: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before any remote request is initiated.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing key/value pairs that are passed on the request query string
     * @param {object} event.body The body of the request to be posted to the server.
     * @param {'create'|'read'|'update'|'delete'} event.action Action that is making the request, `'create'`, `'read'`, `'update'` or `'delete'`
     */
    onBeforeRequest: ((event: { source: Store, params: object, body: object, action: 'create'|'read'|'update'|'delete' }) => void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onBeforeUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#event-change)
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of the options listed above
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fired after committing added records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitAdded: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing modified records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitModified: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing removed records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitRemoved: ((event: { source: Store }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#event-exception)
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {boolean} event.exception `true`
     * @param {'create'|'read'|'update'|'delete'|'commit'} event.action Action that failed, `'create'`, `'read'`, `'update'` or `'delete'`. May also be fired with '`commit'` to indicate the failure of an aggregated `create`, `update` and `delete` operation. In this case, the event will contain a property for each operation of the commit named `'create'`, `'update'` and `'delete'`, each containing the individual `exception` events.
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object *if the exceptionType is `'server'`*
     */
    onException: ((event: { source: Store, exception: boolean, action: 'create'|'read'|'update'|'delete'|'commit', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired when the id of a record has changed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {string|number} event.oldValue Old id
     * @param {string|number} event.value New id
     */
    onIdChange: ((event: { source: Store, record: Model, oldValue: string|number, value: string|number }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired on successful load
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object.
     */
    onLoad: ((event: { source: Store, data: object[], response: Response, json: object }) => void)|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {object} event.json The decoded response object.
     */
    onLoadChildren: ((event: { source: Store, data: object[], json: object }) => void)|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadChildrenStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when a block of records has been moved within this Store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record (DEPRECATED) The first record moved (The [move](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-move) API now accepts an array of records to move).
     * @param {Model[]} event.records The records moved.
     * @param {number} event.from The index from which the record was removed (applicable only for flat store).
     * @param {number} event.to The index at which the record was inserted (applicable only for flat store).
     * @param {Model} event.newParent The new parent record for the dragged records (applicable only for tree stores)
     * @param {Model[]} event.oldParents The old parent records for the dragged records (applicable only for move operations in tree stores)
     */
    onMove: ((event: { source: Store, record: Model, records: Model[], from: number, to: number, newParent?: Model, oldParents?: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {boolean} event.batch Flag set to `true` when the refresh is triggered by ending a batch
     * @param {'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group'} event.action Name of action which triggered the change. May be one of the options listed above.
     */
    onRefresh: ((event: { source: Store, batch: boolean, action: 'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group' }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired when the root node is set
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.oldRoot The old root node.
     * @param {Model} event.rootNode The new root node.
     */
    onRootChange: ((event: { source: Store, oldRoot: Model, rootNode: Model }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired when a record is modified
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
}

/**
 * A store representing [ResourceUtilization](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization) view records.
 * This store accepts a model class inheriting from [ResourceUtilizationModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceUtilizationModel).
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore)
 */
export class ResourceUtilizationStore extends AjaxStore {
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceUtilizationStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ResourceUtilizationStoreConfig>} config
     */
    constructor(config?: Partial<ResourceUtilizationStoreConfig>);
}

/**
 * Type with configuration options for [VersionStore](https://bryntum.com/products/grid/docs/api/SchedulerPro/data/VersionStore) class.
 */
type VersionStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/VersionStore#config-allowNoId)
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/VersionStore#config-applyChangesetFilterSortTarget)
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/VersionStore#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/VersionStore#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     * Return `true` to include the passed record, or a `false` to exclude it.
     * @param {Model} record
     * @returns {boolean}
     */
    chainedFilterFn: (record: Model) => boolean
    /**
     * Raw data to load initially.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/VersionStore#config-data)
     */
    data: object[]|Model[]
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An array of field definitions used to create a [Model](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/VersionStore#config-fields)
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * Specify one or more [CollectionFilter](https://bryntum.com/products/schedulerpro/docs/api/Core/util/CollectionFilter) config objects to apply initially.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/VersionStore#config-filters)
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/VersionStore#config-listeners)
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of [Model](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model). Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/VersionStore#config-modelClass)
     */
    modelClass: typeof Model
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * Initial sorters, format is:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/VersionStore#config-sorters)
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/VersionStore#config-startGroupsCollapsed)
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A [Collection](https://bryntum.com/products/schedulerpro/docs/api/Core/util/Collection), or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Store class to use when creating the store when it is a part of a
     * [CrudManager](https://bryntum.com/products/scheduler/docs/api/Scheduler/data/CrudManager).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/VersionStore#config-storeClass)
     */
    storeClass: typeof Store
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/VersionStore#config-syncDataOnLoad)
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/VersionStore#config-transformFlatData)
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/VersionStore#config-useLocaleSort)
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/VersionStore#config-useRawData)
     * @param {boolean} disableDuplicateIdCheck Data must not contain duplicate ids, check is bypassed.
     * @param {boolean} disableDefaultValue Default values will not be applied to record fields.
     * @param {boolean} disableTypeConversion No type conversions will be performed on record data.
     */
    useRawData: boolean|object
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/VersionStore#config-verifyNoGeneratedIds)
     */
    verifyNoGeneratedIds: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired when a temporary record with the [isCreating](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model#property-isCreating) property set
     * has been confirmed as a part of this store by having its [isCreating](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model#property-isCreating)
     * property cleared.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {Model} event.record The record confirmed as added.
     */
    onAddConfirmed: ((event: { source: Store, record: Model }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onBeforeUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/VersionStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/VersionStore#event-change)
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of the options listed above
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired when the id of a record has changed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {string|number} event.oldValue Old id
     * @param {string|number} event.value New id
     */
    onIdChange: ((event: { source: Store, record: Model, oldValue: string|number, value: string|number }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when a block of records has been moved within this Store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record (DEPRECATED) The first record moved (The [move](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-move) API now accepts an array of records to move).
     * @param {Model[]} event.records The records moved.
     * @param {number} event.from The index from which the record was removed (applicable only for flat store).
     * @param {number} event.to The index at which the record was inserted (applicable only for flat store).
     * @param {Model} event.newParent The new parent record for the dragged records (applicable only for tree stores)
     * @param {Model[]} event.oldParents The old parent records for the dragged records (applicable only for move operations in tree stores)
     */
    onMove: ((event: { source: Store, record: Model, records: Model[], from: number, to: number, newParent?: Model, oldParents?: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {boolean} event.batch Flag set to `true` when the refresh is triggered by ending a batch
     * @param {'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group'} event.action Name of action which triggered the change. May be one of the options listed above.
     */
    onRefresh: ((event: { source: Store, batch: boolean, action: 'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group' }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired when the root node is set
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.oldRoot The old root node.
     * @param {Model} event.rootNode The new root node.
     */
    onRootChange: ((event: { source: Store, oldRoot: Model, rootNode: Model }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired when a record is modified
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
}

/**
 * A [Store](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store) that contains the list of saved versions of the project,
 * managed by the [Versions](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Versions) feature.
 * See also [ChangeLogStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ChangeLogStore).
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/VersionStore)
 */
export class VersionStore extends Store {
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/VersionStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/schedulerpro/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
}

/**
 * Type with configuration options for [PartOfProject](https://bryntum.com/products/grid/docs/api/SchedulerPro/data/mixin/PartOfProject) class.
 */
type PartOfProjectClassConfig = {
    /**
     * An [EventStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
}

export class PartOfProjectClass {
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: AssignmentStore
    /**
     * Returns the calendar manager store of the project this entity belongs to.
     */
    readonly calendarManagerStore: CalendarManagerStore
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: DependencyStore
    /**
     * Returns the task store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: ProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: ResourceStore
    /**
     * The [store](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) holding data on events.
     */
    readonly taskStore: EventStore
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<PartOfProjectClassConfig>} config
     */
    constructor(config?: Partial<PartOfProjectClassConfig>);
}

export const PartOfProject : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & PartOfProjectClass>

/**
 * Type with configuration options for [ProjectCrudManager](https://bryntum.com/products/grid/docs/api/SchedulerPro/data/mixin/ProjectCrudManager) class.
 */
type ProjectCrudManagerClassConfig = {
    /**
     * Specify `true` to automatically call [load](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) method on the next frame after creation.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#config-autoLoad)
     */
    autoLoad: boolean
    /**
     * `true` to automatically persist store changes after edits are made in any of the stores monitored.
     * Please note that sync request will not be invoked immediately but only after
     * [autoSyncTimeout](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSyncTimeout) interval.
     */
    autoSync: boolean
    /**
     * The timeout in milliseconds to wait before persisting changes to the server.
     * Used when [autoSync](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSync) is set to `true`.
     */
    autoSyncTimeout: number
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Sets the list of stores controlled by the CRUD manager.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#config-crudStores)
     */
    crudStores: Store[]|string[]|CrudManagerStoreDescriptor[]
    /**
     * Configuration of the JSON encoder used by the *Crud Manager*.
     */
    encoder: {
        requestData?: object
    }
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#config-listeners)
     */
    listeners: object
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#config-loadUrl)
     */
    loadUrl: string
    /**
     * Field name to be used to transfer a phantom record identifier.
     */
    phantomIdField: string
    /**
     * Field name to be used to transfer a phantom parent record identifier.
     */
    phantomParentIdField: string
    /**
     * `True` to reset identifiers (defined by `idField` config) of phantom records before submitting them
     * to the server.
     */
    resetIdsBeforeSync: boolean
    /**
     * When `true` treats parsed responses without `success` property as successful.
     * In this mode a parsed response is treated as invalid if it has explicitly set `success : false`.
     */
    skipSuccessProperty: boolean
    /**
     * Name of a store property to retrieve store identifiers from. Make sure you have an instance of a
     * store to use it by id. Store identifier is used as a container name holding corresponding store data
     * while transferring them to/from the server. By default, `storeId` property is used. And in case a
     * container identifier has to differ this config can be used:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#config-storeIdProperty)
     */
    storeIdProperty: string
    /**
     * When `true` the Crud Manager does not require all updated and removed records to be mentioned in the
     * *sync* response. In this case response should include only server side changes.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#config-supportShortSyncResponse)
     */
    supportShortSyncResponse: boolean
    /**
     * An array of store identifiers sets an alternative sync responses apply order.
     * By default, the order in which sync responses are applied to the stores is the same as they
     * registered in. But in case of some tricky dependencies between stores this order can be changed:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#config-syncApplySequence)
     */
    syncApplySequence: string[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#config-syncUrl)
     */
    syncUrl: string
    /**
     * If `true`, project [changes](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#property-changes) API will also report project model changes: start/end date,
     * calendar, effort, duration, etc.
     */
    trackProjectModelChanges: boolean
    /**
     * When `true` forces the CRUD manager to process responses depending on their `type` attribute.
     * So `load` request may be responded with `sync` response for example.
     * Can be used for smart server logic allowing the server to decide when it's better to respond with a
     * complete data set (`load` response) or it's enough to return just a delta (`sync` response).
     */
    trackResponseType: boolean
    /**
     * Configuration of the AJAX requests used by *Crud Manager* to communicate with a server-side.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#config-transport)
     */
    transport: {
        load?: object
        sync?: object
    }
    /**
     * This config validates the response structure for requests made by the Crud Manager.
     * When `true`, the Crud Manager checks every parsed response structure for errors
     * and if the response format is invalid, a warning is logged to the browser console.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#config-validateResponse)
     */
    validateResponse: boolean
    /**
     * `true` to write all fields from the record to the server.
     * If set to `false` it will only send the fields that were modified.
     * Note that any fields that have [persist](https://bryntum.com/products/schedulerpro/docs/api/Core/data/field/DataField#config-persist) set to `false` will
     * still be ignored and fields having [alwaysWrite](https://bryntum.com/products/schedulerpro/docs/api/Core/data/field/DataField#config-alwaysWrite) set to `true`
     * will always be included.
     */
    writeAllFields: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before [load request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) is sent. Return `false` to cancel load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeLoad: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.options Options provided to the [load](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     */
    onBeforeLoadApply: ((event: { source: AbstractCrudManager, response: object, options: object }) => void)|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     */
    onBeforeResponseApply: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object }) => void)|string
    /**
     * Fires before a request is sent to the server.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#event-beforeSend)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.crudManager The CRUD manager.
     * @param {object} event.params HTTP request params to be passed in the request URL.
     * @param {'sync'|'load'} event.requestType CrudManager request type (`load`/`sync`)
     * @param {object} event.requestConfig Configuration object for Ajax request call
     */
    onBeforeSend: ((event: { crudManager: AbstractCrudManager, params: object, requestType: 'sync'|'load', requestConfig: object }) => Promise<void>)|string
    /**
     * Fires before [sync request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) is sent. Return `false` to cancel sync request.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#event-beforeSync)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeSync: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     */
    onBeforeSyncApply: ((event: { source: AbstractCrudManager, response: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#event-hasChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onHasChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful [load request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) completion after data gets loaded to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onLoad: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fired after [load request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) was canceled by some [beforeLoad](#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad)
     * listener or due to incomplete prior load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onLoadCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires when a [load request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onLoadFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after [load](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) or [sync](#Scheduler/crud/AbstractCrudManagerMixin#function-sync) request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#event-noChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onNoChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onRequestDone: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseOptions: object }) => void)|string
    /**
     * Fires when a request fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onRequestFail: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires on successful [sync request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) completion.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onSync: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) was canceled by some [beforeSync](#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync) listener.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onSyncCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) was delayed due to incomplete previous one.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.arguments The arguments of [sync](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    onSyncDelayed: ((event: { source: AbstractCrudManager, arguments: object }) => void)|string
    /**
     * Fires when a [sync request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onSyncFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
}

export class ProjectCrudManagerClass {
    /**
     * Returns current changes as an object consisting of added/modified/removed arrays of records for every
     * managed store, keyed by each store's `id`. Returns `null` if no changes exist. Format:
     */
    readonly changes: object
    /**
     * The server revision stamp.
     * The *revision stamp* is a number which should be incremented after each server-side change.
     * This property reflects the current version of the data retrieved from the server and gets updated
     * after each [load](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) and [sync](#Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    readonly crudRevision: number
    /**
     * A list of registered stores whose server communication will be collected into a single batch.
     * Each store is represented by a *store descriptor*.
     */
    crudStores: CrudManagerStoreDescriptor[]
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * Returns `true` if changes tracking is suspended
     */
    readonly isChangeTrackingSuspended: boolean
    /**
     * Returns true if the crud manager is currently loading data
     */
    readonly isCrudManagerLoading: boolean
    /**
     * Returns true if the crud manager is currently syncing data
     */
    readonly isCrudManagerSyncing: boolean
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     */
    loadUrl: string
    /**
     * An array of stores presenting an alternative sync responses apply order.
     * Each store is represented by a *store descriptor*.
     */
    syncApplySequence: CrudManagerStoreDescriptor[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     */
    syncUrl: string
    /**
     * If `true`, project [changes](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#property-changes) API will also report project model changes: start/end date,
     * calendar, effort, duration, etc.
     */
    trackProjectModelChanges: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before [load request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) is sent. Return `false` to cancel load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeLoad: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.options Options provided to the [load](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     */
    onBeforeLoadApply: ((event: { source: AbstractCrudManager, response: object, options: object }) => void)|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     */
    onBeforeResponseApply: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object }) => void)|string
    /**
     * Fires before a request is sent to the server.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#event-beforeSend)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.crudManager The CRUD manager.
     * @param {object} event.params HTTP request params to be passed in the request URL.
     * @param {'sync'|'load'} event.requestType CrudManager request type (`load`/`sync`)
     * @param {object} event.requestConfig Configuration object for Ajax request call
     */
    onBeforeSend: ((event: { crudManager: AbstractCrudManager, params: object, requestType: 'sync'|'load', requestConfig: object }) => Promise<void>)|string
    /**
     * Fires before [sync request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) is sent. Return `false` to cancel sync request.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#event-beforeSync)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeSync: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     */
    onBeforeSyncApply: ((event: { source: AbstractCrudManager, response: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#event-hasChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onHasChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful [load request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) completion after data gets loaded to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onLoad: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fired after [load request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) was canceled by some [beforeLoad](#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad)
     * listener or due to incomplete prior load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onLoadCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires when a [load request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onLoadFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after [load](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) or [sync](#Scheduler/crud/AbstractCrudManagerMixin#function-sync) request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#event-noChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onNoChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onRequestDone: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseOptions: object }) => void)|string
    /**
     * Fires when a request fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onRequestFail: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires on successful [sync request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) completion.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onSync: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) was canceled by some [beforeSync](#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync) listener.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onSyncCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) was delayed due to incomplete previous one.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.arguments The arguments of [sync](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    onSyncDelayed: ((event: { source: AbstractCrudManager, arguments: object }) => void)|string
    /**
     * Fires when a [sync request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onSyncFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ProjectCrudManagerClassConfig>} config
     */
    constructor(config?: Partial<ProjectCrudManagerClassConfig>);
    /**
     * Accepts all changes in all stores, resets the modification tracking:
     */
    acceptChanges(): void;
    /**
     * Adds a store to the collection.
     * @param {Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[]} store A store or list of stores. Each store might be specified by its instance, `storeId` or *descriptor*.
     * @param {number} position The relative position of the store. If `fromStore` is specified the position will be taken relative to it. If not specified then store(s) will be appended to the end of collection. Otherwise, it will be just a position in stores collection. ```javascript // insert stores store4, store5 to the start of collection crudManager.addCrudStore([ store4, store5 ], 0); ```
     * @param {string|Store|CrudManagerStoreDescriptor} fromStore The store relative to which position should be calculated. Can be defined as a store identifier, instance or descriptor (the result of [getStoreDescriptor](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor) call). ```javascript // insert store6 just before a store having storeId equal to 'foo' crudManager.addCrudStore(store6, 0, 'foo');  // insert store7 just after store3 store crudManager.addCrudStore(store7, 1, store3); ```
     */
    addCrudStore(store: Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig|string} config An object containing listener definitions, or the event name to listen for
     * @param {object|Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    addListener(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Adds a store to the alternative sync responses apply sequence.
     * By default, the order in which sync responses are applied to the stores is the same as they registered in.
     * But this order can be changes either on construction step using [syncApplySequence](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-syncApplySequence) option
     * or by calling this method.
     * @param {Store|CrudManagerStoreDescriptor|Store[]|CrudManagerStoreDescriptor[]} store The store to add or its *descriptor* (or array of stores or descriptors).
     * @param {number} position The relative position of the store. If `fromStore` is specified the position will be taken relative to it. If not specified then store(s) will be appended to the end of collection. Otherwise, it will be just a position in stores collection. ```javascript // insert stores store4, store5 to the start of sequence crudManager.addStoreToApplySequence([ store4, store5 ], 0); ```
     * @param {string|Store|CrudManagerStoreDescriptor} fromStore The store relative to which position should be calculated. Can be defined as a store identifier, instance or its descriptor (the result of [getStoreDescriptor](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor) call). ```javascript // insert store6 just before a store having storeId equal to 'foo' crudManager.addStoreToApplySequence(store6, 0, 'foo');  // insert store7 just after store3 store crudManager.addStoreToApplySequence(store7, 1, store3); ```
     */
    addStoreToApplySequence(store: Store|CrudManagerStoreDescriptor|Store[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Applies a set of changes, as an object keyed by store id, to the affected stores. This function is intended
     * to use in apps that handle their own data syncing, it is not needed when using the CrudManager approach.
     * @param {object} changes Changeset to apply, an object keyed by store id where each value follows the format described in [applyChangeset](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#function-applyChangeset)
     * @param {Function} transformFn Optional function used to preprocess a changeset per store in a different format, should return an object with the format expected by [applyChangeset](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#function-applyChangeset)
     * @param {string} phantomIdField Field used by the backend when communicating a record being assigned a proper id instead of a phantom id
     */
    applyChangeset(changes: object, transformFn?: Function, phantomIdField?: string): void;
    /**
     * Cancels a sent request.
     * @param {Promise<any>} requestPromise The Promise object wrapping the Request to be cancelled. The *requestPromise* is the value returned from the corresponding [sendRequest](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/transport/AjaxTransport#function-sendRequest) call.
     */
    cancelRequest(requestPromise: Promise<any>): void;
    /**
     * Returns `true` if any of registered stores (or some particular store) has non persisted changes.
     * @param {string|Store} storeId The store identifier or store instance to check changes for. If not specified then will check changes for all of the registered stores.
     */
    crudStoreHasChanges(storeId?: string|Store): boolean;
    /**
     * Decodes (parses) a *JSON* response string to an object. If parsing fails, it returns null.
     * Supposed to be overridden in case data provided by server has to be transformed into format requested by the *Crud Manager*.
     * @param {string} responseText The response text to decode.
     */
    decode(responseText: string): object;
    /**
     * Encodes a request object to *JSON* encoded string. If encoding fails (due to circular structure), it returns null.
     * Supposed to be overridden in case data provided by the *Crud Manager* has to be transformed into format requested by server.
     * @param {object} requestData The request to encode.
     */
    encode(requestData: object): string;
    /**
     * Returns a registered store.
     * @param {string} storeId Store identifier.
     */
    getCrudStore(storeId: string): Store;
    /**
     * Returns a registered store descriptor.
     * @param {string|Store} storeId The store identifier or registered store instance.
     */
    getStoreDescriptor(storeId: string|Store): CrudManagerStoreDescriptor;
    /**
     * Check if any listener is registered for the specified eventName
     * @param {string} eventName
     */
    hasListener(eventName: string): boolean;
    /**
     * Loads data to the stores registered in the crud manager. For example:
     * @param {object|string} options The request parameters or a URL.
     */
    load(options?: {
        request?: object
    }|string): Promise<any>;
    /**
     * Loads data to the Crud Manager
     * @param {object} response A simple object representing the data. The object structure matches the decoded `load` response structure: ```javascript // load static data into crudManager crudManager.loadCrudManagerData({     success   : true,     resources : {         rows : [             { id : 1, name : 'John' },             { id : 2, name : 'Abby' }         ]     } }); ```
     * @param {object} options Extra data loading options.
     */
    loadCrudManagerData(response: object, options?: object): void;
    /**
     * Alias for [addListener](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/Events#function-addListener). Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig|string} config An object containing listener definitions, or the event name to listen for
     * @param {object|Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    on(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name
     * before relaying, for example add -&gt; storeAdd
     * @param {EventsClass} through Object to relay the events through, needs to mix Events mixin in
     * @param {string} prefix Prefix to add to event name
     * @param {boolean} transformCase Specify false to prevent making first letter of event name uppercase
     */
    relayAll(through: EventsClass, prefix: string, transformCase?: boolean): void;
    /**
     * Removes all listeners registered to this object by the application.
     */
    removeAllListeners(): void;
    /**
     * Removes a store from collection. If the store was registered in alternative sync sequence list
     * it will be removed from there as well.
     * @param {CrudManagerStoreDescriptor|string|Store} store The store to remove. Either the store descriptor, store identifier or store itself.
     */
    removeCrudStore(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Removes an event listener. Same API signature as [addListener](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/Events#function-addListener)
     * @param {object|string} config A config object or the event name
     * @param {object|Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    removeListener(config: object|string, thisObj: object|Function, oldThisObj: object): void;
    /**
     * Removes a store from the alternative sync sequence.
     * @param {CrudManagerStoreDescriptor|string|Store} store The store to remove. Either the store descriptor, store identifier or store itself.
     */
    removeStoreFromApplySequence(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Resumes automatic sync upon store changes. Will schedule a sync if the internal counter is 0.
     * @param {boolean} doSync Pass `true` to schedule a sync after resuming (if there are pending changes) and `false` to not persist the changes.
     */
    resumeAutoSync(doSync?: boolean): void;
    /**
     * Resumes [hasChanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#event-hasChanges) and [noChanges](#Scheduler/crud/AbstractCrudManagerMixin#event-noChanges) events. By default, it will check for changes
     * and if there are any, `hasChanges` or `noChanges` event will be triggered.
     * @param {boolean} skipChangeCheck
     */
    resumeChangeTracking(skipChangeCheck?: boolean): void;
    /**
     * Resume event triggering after a call to [suspendEvents()](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/Events#function-suspendEvents). If any triggered events were queued they will be triggered.
     */
    resumeEvents(): boolean;
    /**
     * Reverts all changes in all stores and re-inserts any records that were removed locally. Any new uncommitted
     * records will be removed.
     */
    revertChanges(): void;
    /**
     * Sends a *Crud Manager* request to the server.
     * @param {object} request The request configuration object having following properties:
     */
    sendRequest(request: {
        type: 'load'|'sync'
        url: string
        data: string
        params: object
        success: Function
        failure: Function
        thisObj: object
    }): Promise<any>;
    /**
     * Suspends automatic sync upon store changes. Can be called multiple times (it uses an internal counter).
     */
    suspendAutoSync(): void;
    /**
     * Suspends [hasChanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#event-hasChanges) and [noChanges](#Scheduler/crud/AbstractCrudManagerMixin#event-noChanges) events.
     */
    suspendChangeTracking(): void;
    /**
     * Prevents events from being triggered until [resumeEvents()](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/Events#function-resumeEvents) is called. Optionally queues events that are triggered while
     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.
     * @param {boolean} queue Specify true to queue events triggered while suspended
     */
    suspendEvents(queue?: boolean): void;
    /**
     * Persists changes made on the registered stores to the server and/or receives changes made on the backend.
     * Usage:
     */
    sync(): Promise<any>;
    /**
     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener
     * makes function return false.
     * @param {string} eventName Event name for which to trigger listeners
     * @param {{bubbles?: boolean, [key: string]: any}} param Single parameter passed on to listeners, source property will be added to it (this)
     */
    trigger(eventName: string, param?: {bubbles?: boolean, [key: string]: any}): Promise<boolean|any>;
    /**
     * Shorthand for [removeListener](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/Events#function-removeListener)
     * @param {object|string} config A config object or the event name
     * @param {object|Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    un(config: object|string, thisObj?: object|Function, oldThisObj?: object): void;
}

export const ProjectCrudManager : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & ProjectCrudManagerClass>

/**
 * Type with configuration options for [StateTrackingManager](https://bryntum.com/products/grid/docs/api/SchedulerPro/data/stm/StateTrackingManager) class.
 */
type StateTrackingManagerConfig = {
    /**
     * Whether to start transaction recording automatically in case the Manager is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/stm/StateTrackingManager#config-autoRecord)
     */
    autoRecord: boolean
    /**
     * The transaction duration (in ms) for the auto recording mode [autoRecord](https://bryntum.com/products/schedulerpro/docs/api/Core/data/stm/StateTrackingManager#config-autoRecord)
     */
    autoRecordTransactionStopTimeout: number
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/stm/StateTrackingManager#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/stm/StateTrackingManager#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Default manager disabled state
     */
    disabled: boolean
    /**
     * Function to create a transaction title if none is provided.
     * The function receives a transaction and should return a title.
     * @param {Transaction} transaction
     * @returns {string}
     */
    getTransactionTitle: (transaction: Transaction) => string
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/stm/StateTrackingManager#config-listeners)
     */
    listeners: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/stm/StateTrackingManager#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the disabled state of the STM changes
     * @param {object} event Event object
     * @param {CoreStateTrackingManager} event.source
     * @param {boolean} event.disabled The current disabled state of the STM
     */
    onDisabled: ((event: { source: CoreStateTrackingManager, disabled: boolean }) => void)|string
    /**
     * Fired upon state undo/redo queue reset.
     * @param {object} event Event object
     * @param {CoreStateTrackingManager} event.stm
     */
    onQueueReset: ((event: { stm: CoreStateTrackingManager }) => void)|string
    /**
     * Fired upon state recording operation starts.
     * @param {object} event Event object
     * @param {CoreStateTrackingManager} event.stm
     * @param {Transaction} event.transaction
     */
    onRecordingStart: ((event: { stm: CoreStateTrackingManager, transaction: Transaction }) => void)|string
    /**
     * Fired upon state recording operation stops.
     * @param {object} event Event object
     * @param {CoreStateTrackingManager} event.stm
     * @param {Transaction} event.transaction
     * @param {object} event.reason Transaction stop reason
     * @param {boolean} event.reason.stop Transaction recording has been stopped in a normal way.
     * @param {boolean} event.reason.disabled Transaction recording has been stopped due to STM has been disabled.
     * @param {boolean} event.reason.rejected Transaction recording has been stopped due to transaction has been rejected.
     */
    onRecordingStop: ((event: { stm: CoreStateTrackingManager, transaction: Transaction, reason: { stop: boolean, disabled: boolean, rejected: boolean } }) => void)|string
    /**
     * Fired upon state restoration operation starts.
     * @param {object} event Event object
     * @param {CoreStateTrackingManager} event.stm
     */
    onRestoringStart: ((event: { stm: CoreStateTrackingManager }) => void)|string
    /**
     * Fired upon state restoration operation stops.
     * @param {object} event Event object
     * @param {CoreStateTrackingManager} event.stm
     */
    onRestoringStop: ((event: { stm: CoreStateTrackingManager }) => void)|string
}

/**
 * [StateTrackingManager](https://bryntum.com/products/schedulerpro/docs/api/Core/data/stm/StateTrackingManager) subclass that's aware of the Scheduler Pro data structure specifics,
 * namely supports tracking of event segment changes.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/stm/StateTrackingManager)
 */
export class StateTrackingManager extends CoreStateTrackingManager {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/stm/StateTrackingManager#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/schedulerpro/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
}

/**
 * Type with configuration options for [EventUpdateAction](https://bryntum.com/products/grid/docs/api/SchedulerPro/data/stm/action/EventUpdateAction) class.
 */
type EventUpdateActionConfig = {
    /**
     * Reference to a model which has been updated.
     */
    model: Model
    /**
     * Map of updated properties with new values.
     */
    newData: {[key: string]:any}
    /**
     * Map of updated properties with old values.
     */
    oldData: {[key: string]:any}
}

/**
 * Action to record the fact that an event model has been updated.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/stm/action/EventUpdateAction)
 */
export class EventUpdateAction extends UpdateAction {
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<EventUpdateActionConfig>} config
     */
    constructor(config?: Partial<EventUpdateActionConfig>);
}

/**
 * Type with configuration options for [ProHorizontalLayout](https://bryntum.com/products/grid/docs/api/SchedulerPro/eventlayout/ProHorizontalLayout) class.
 */
type ProHorizontalLayoutClassConfig = {
    /**
     * Specifies a way to group events inside the row. Can accept either a model field name or a function which
     * is provided with event record as a single argument and is expected to return group for the event.
     * @param {EventModel} event Event record
     * @returns {string} Group name for the event
     */
    groupBy: string|((event: EventModel) => string)
    /**
     * Supply a function to manually layout events. It accepts event layout data and should set `top`
     * and `height` for every provided data item (left and width are calculated according to the event start
     * date and duration). The function should return the total row height in pixels.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/eventlayout/ProHorizontalLayout#config-layoutFn)
     * @param {EventRenderData>} events Unordered array of event render data, sorting may be required
     * @param {ResourceModel} resource The resource for which the events are being laid out.
     * @returns {number} Returns total row height
     */
    layoutFn: (events: EventRenderData[], resource: SchedulerResourceModel) => number
    /**
     * Type of horizontal layout. Supported values are `stack`, `pack` and `none`.
     */
    type: 'stack'|'pack'|'none'
    /**
     * The weights config allows you to specify order of the event groups inside the row. Higher weights are
     * placed further down in the row. If field value is not specified in the weights object, it will be
     * assigned `Infinity` value and pushed to the bottom.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/eventlayout/ProHorizontalLayout#config-weights)
     */
    weights: Record<string, number>
}

export class ProHorizontalLayoutClass {
    /**
     * Returns `true` if event [grouper](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/eventlayout/ProHorizontalLayout#config-groupBy) is defined.
     */
    readonly grouped: boolean
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ProHorizontalLayoutClassConfig>} config
     */
    constructor(config?: Partial<ProHorizontalLayoutClassConfig>);
    /**
     * This method performs layout on an array of event render data and returns amount of *bands*. Band is a multiplier of a
     * configured [rowHeight](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/Scheduler#config-rowHeight) to calculate total row height required to fit all
     * events.
     * This method should not be used directly, it is called by the Scheduler during the row rendering process.
     * @param {EventRenderData[]} events
     * @param {SchedulerResourceModel} resource
     */
    applyLayout(events: EventRenderData[], resource: SchedulerResourceModel): number;
    /**
     * Sorts events by group and returns ordered array of groups, or empty array if events are not grouped.
     * @param {EventRenderData[]} events
     */
    getEventGroups(events: EventRenderData[]): string[];
    /**
     * Returns group for the passed event render data.
     * @param {EventRenderData} layoutData
     */
    getGroupValue(layoutData: EventRenderData): any;
    /**
     * This method iterates over events and calculates top position for each of them. Default layouts calculate
     * positions to avoid events overlapping horizontally (except for the 'none' layout). Pack layout will squeeze events to a single
     * row by reducing their height, Stack layout will increase the row height and keep event height intact.
     * This method should not be used directly, it is called by the Scheduler during the row rendering process.
     * @param {EventRenderData[]} events
     */
    layoutEventsInBands(events: EventRenderData[]): void;
}

export const ProHorizontalLayout : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & ProHorizontalLayoutClass>

/**
 * Type with configuration options for [ProHorizontalLayoutPack](https://bryntum.com/products/grid/docs/api/SchedulerPro/eventlayout/ProHorizontalLayoutPack) class.
 */
type ProHorizontalLayoutPackConfig = {
    /**
     * Specifies a way to group events inside the row. Can accept either a model field name or a function which
     * is provided with event record as a single argument and is expected to return group for the event.
     * @param {EventModel} event Event record
     * @returns {string} Group name for the event
     */
    groupBy: string|((event: EventModel) => string)
    /**
     * Supply a function to manually layout events. It accepts event layout data and should set `top`
     * and `height` for every provided data item (left and width are calculated according to the event start
     * date and duration). The function should return the total row height in pixels.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/eventlayout/ProHorizontalLayoutPack#config-layoutFn)
     * @param {EventRenderData>} events Unordered array of event render data, sorting may be required
     * @param {ResourceModel} resource The resource for which the events are being laid out.
     * @returns {number} Returns total row height
     */
    layoutFn: (events: EventRenderData[], resource: SchedulerResourceModel) => number
    /**
     * Type of horizontal layout. Supported values are `stack`, `pack` and `none`.
     */
    type: 'stack'|'pack'|'none'
    /**
     * The weights config allows you to specify order of the event groups inside the row. Higher weights are
     * placed further down in the row. If field value is not specified in the weights object, it will be
     * assigned `Infinity` value and pushed to the bottom.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/eventlayout/ProHorizontalLayoutPack#config-weights)
     */
    weights: Record<string, number>
}

/**
 * Handles layout of events within a row (resource) in horizontal mode. Packs events (adjusts their height) to fit
 * available row height.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/eventlayout/ProHorizontalLayoutPack)
 */
export class ProHorizontalLayoutPack {
    /**
     * Returns `true` if event [grouper](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/eventlayout/ProHorizontalLayout#config-groupBy) is defined.
     */
    readonly grouped: boolean
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ProHorizontalLayoutPackConfig>} config
     */
    constructor(config?: Partial<ProHorizontalLayoutPackConfig>);
    /**
     * This method performs layout on an array of event render data and returns amount of *bands*. Band is a multiplier of a
     * configured [rowHeight](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/Scheduler#config-rowHeight) to calculate total row height required to fit all
     * events.
     * This method should not be used directly, it is called by the Scheduler during the row rendering process.
     * @param {EventRenderData[]} events
     * @param {SchedulerResourceModel} resource
     */
    applyLayout(events: EventRenderData[], resource: SchedulerResourceModel): number;
    /**
     * Sorts events by group and returns ordered array of groups, or empty array if events are not grouped.
     * @param {EventRenderData[]} events
     */
    getEventGroups(events: EventRenderData[]): string[];
    /**
     * Returns group for the passed event render data.
     * @param {EventRenderData} layoutData
     */
    getGroupValue(layoutData: EventRenderData): any;
    /**
     * This method iterates over events and calculates top position for each of them. Default layouts calculate
     * positions to avoid events overlapping horizontally (except for the 'none' layout). Pack layout will squeeze events to a single
     * row by reducing their height, Stack layout will increase the row height and keep event height intact.
     * This method should not be used directly, it is called by the Scheduler during the row rendering process.
     * @param {EventRenderData[]} events
     */
    layoutEventsInBands(events: EventRenderData[]): void;
}

/**
 * Type with configuration options for [ProHorizontalLayoutStack](https://bryntum.com/products/grid/docs/api/SchedulerPro/eventlayout/ProHorizontalLayoutStack) class.
 */
type ProHorizontalLayoutStackConfig = {
    /**
     * Specifies a way to group events inside the row. Can accept either a model field name or a function which
     * is provided with event record as a single argument and is expected to return group for the event.
     * @param {EventModel} event Event record
     * @returns {string} Group name for the event
     */
    groupBy: string|((event: EventModel) => string)
    /**
     * Supply a function to manually layout events. It accepts event layout data and should set `top`
     * and `height` for every provided data item (left and width are calculated according to the event start
     * date and duration). The function should return the total row height in pixels.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/eventlayout/ProHorizontalLayoutStack#config-layoutFn)
     * @param {EventRenderData>} events Unordered array of event render data, sorting may be required
     * @param {ResourceModel} resource The resource for which the events are being laid out.
     * @returns {number} Returns total row height
     */
    layoutFn: (events: EventRenderData[], resource: SchedulerResourceModel) => number
    /**
     * Type of horizontal layout. Supported values are `stack`, `pack` and `none`.
     */
    type: 'stack'|'pack'|'none'
    /**
     * The weights config allows you to specify order of the event groups inside the row. Higher weights are
     * placed further down in the row. If field value is not specified in the weights object, it will be
     * assigned `Infinity` value and pushed to the bottom.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/eventlayout/ProHorizontalLayoutStack#config-weights)
     */
    weights: Record<string, number>
}

/**
 * Handles layout of events within a row (resource) in horizontal mode. Stacks events, increasing row height to fit
 * all overlapping events.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/eventlayout/ProHorizontalLayoutStack)
 */
export class ProHorizontalLayoutStack {
    /**
     * Returns `true` if event [grouper](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/eventlayout/ProHorizontalLayout#config-groupBy) is defined.
     */
    readonly grouped: boolean
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ProHorizontalLayoutStackConfig>} config
     */
    constructor(config?: Partial<ProHorizontalLayoutStackConfig>);
    /**
     * This method performs layout on an array of event render data and returns amount of *bands*. Band is a multiplier of a
     * configured [rowHeight](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/Scheduler#config-rowHeight) to calculate total row height required to fit all
     * events.
     * This method should not be used directly, it is called by the Scheduler during the row rendering process.
     * @param {EventRenderData[]} events
     * @param {SchedulerResourceModel} resource
     */
    applyLayout(events: EventRenderData[], resource: SchedulerResourceModel): number;
    /**
     * Sorts events by group and returns ordered array of groups, or empty array if events are not grouped.
     * @param {EventRenderData[]} events
     */
    getEventGroups(events: EventRenderData[]): string[];
    /**
     * Returns group for the passed event render data.
     * @param {EventRenderData} layoutData
     */
    getGroupValue(layoutData: EventRenderData): any;
    /**
     * This method iterates over events and calculates top position for each of them. Default layouts calculate
     * positions to avoid events overlapping horizontally (except for the 'none' layout). Pack layout will squeeze events to a single
     * row by reducing their height, Stack layout will increase the row height and keep event height intact.
     * This method should not be used directly, it is called by the Scheduler during the row rendering process.
     * @param {EventRenderData[]} events
     */
    layoutEventsInBands(events: EventRenderData[]): void;
}

/**
 * Type with configuration options for [CalendarHighlight](https://bryntum.com/products/grid/docs/api/SchedulerPro/feature/CalendarHighlight) class.
 */
type CalendarHighlightConfig = {
    type: 'calendarHighlight'|'calendarhighlight'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/CalendarHighlight#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * A string defining which calendar(s) to highlight during drag drop, resize or create flows.
     * Valid values are `event` or `resource`.
     */
    calendar: 'event'|'resource'
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/CalendarHighlight#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * A callback function which is called when you interact with one or more events (e.g. drag drop) to
     * highlight only available resources.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/CalendarHighlight#config-collectAvailableResources)
     * @param {object} context A context object
     * @param {SchedulerPro} context.scheduler The scheduler instance
     * @param {EventModel>} context.eventRecords The event records
     * @returns {ResourceModel>} An array with the available resource records
     */
    collectAvailableResources: (context: { scheduler: SchedulerPro, eventRecords: SchedulerEventModel[] }) => SchedulerResourceModel[]
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/CalendarHighlight#config-disabled)
     */
    disabled: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/CalendarHighlight#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/CalendarHighlight#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/CalendarHighlight#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Specify value to use for the tabIndex attribute of range elements
     */
    tabIndex: number
    /**
     * A string defining which calendar(s) to highlight during drag drop, resize or create flows.
     * Valid values are `event` or `resource`.
     */
    unhighlightOnDrop: 'event'|'resource'
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/CalendarHighlight#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * This feature temporarily visualizes [calendars](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/CalendarModel) for the event or resource
 * calendar (controlled by the [calendar](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/CalendarHighlight#config-calendar) config). The calendars are highlighted while a user is creating,
 * dragging or resizing a task. Enabling this feature makes it easier for the end user to understand the underlying
 * rules of the schedule.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/CalendarHighlight)
 */
export class CalendarHighlight extends ResourceTimeRangesBase {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/CalendarHighlight#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/schedulerpro/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
    /**
     * Highlights the time spans representing the calendars of the passed event records, and resource records.
     * @param {SchedulerEventModel[]} eventRecords The event records
     * @param {SchedulerResourceModel[]} resourceRecords The resource records
     * @param {boolean} clearExisting Provide `false` to leave previous highlight elements
     */
    highlightEventCalendars(eventRecords: SchedulerEventModel[], resourceRecords?: SchedulerResourceModel[], clearExisting?: boolean): void;
    /**
     * Highlights the time spans representing the working time calendars of the passed resource records.
     * @param {SchedulerResourceModel[]} resourceRecords The resource records
     * @param {boolean} clearExisting Provide `false` to leave previous highlight elements
     */
    highlightResourceCalendars(resourceRecords: SchedulerResourceModel[], clearExisting?: boolean): void;
    /**
     * Removes all highlight elements.
     */
    unhighlightCalendars(): void;
}

/**
 * Type with configuration options for [CellEdit](https://bryntum.com/products/grid/docs/api/SchedulerPro/feature/CellEdit) class.
 */
type CellEditConfig = {
    type: 'cellEdit'|'celledit'
    /**
     * Set to true to have TAB key on the last cell (and ENTER anywhere in the last row) in the data set create
     * a new record and begin editing it at its first editable cell.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/CellEdit#config-addNewAtEnd)
     */
    addNewAtEnd: boolean|object
    /**
     * Set to `true` to add record to the parent of the last record, when configured with [addNewAtEnd](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellEdit#config-addNewAtEnd).
     * Only applicable when using a tree view and store.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/CellEdit#config-addToCurrentParent)
     */
    addToCurrentParent: boolean
    /**
     * Set to `true` to start editing when user starts typing text on a focused cell (as in Excel)
     */
    autoEdit: boolean
    /**
     * Set to true to select the field text when editing starts
     */
    autoSelect: boolean
    /**
     * What action should be taken when focus moves leaves the cell editor, for example when clicking outside.
     * May be `'complete'` or `'cancel`'.
     */
    blurAction: 'complete'|'cancel'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/CellEdit#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/CellEdit#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * Set to `false` to stop editing when clicking another cell after a cell edit.
     */
    continueEditingOnCellClick: boolean
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/CellEdit#config-disabled)
     */
    disabled: boolean
    /**
     * Set to `false` to not start editing next record when user presses enter inside a cell editor (or previous
     * record if SHIFT key is pressed). This is set to `false` when [autoEdit](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellEdit#config-autoEdit) is `true`. Please
     * note that these key combinations could be different if a customized [keyMap](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellEdit#config-keyMap) is used.
     */
    editNextOnEnterPress: boolean
    /**
     * A CSS selector for elements that when clicked, should not trigger editing. Useful if you render actionable
     * icons or buttons into a grid cell.
     */
    ignoreCSSSelector: string
    /**
     * See [Keyboard shortcuts](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellEdit#keyboard-shortcuts) for details
     */
    keyMap: Record<string, string>
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/CellEdit#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/CellEdit#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/CellEdit#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * If set to `true` (which is default) this will make it possible to edit current column in multiple rows
     * simultaneously.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/CellEdit#config-multiEdit)
     */
    multiEdit: boolean
    /**
     * The name of the grid event that will trigger cell editing. Defaults to
     * [celldblclick](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/mixin/GridElementEvents#event-cellDblClick) but can be changed to any other event,
     * such as [cellclick](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/mixin/GridElementEvents#event-cellClick).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/CellEdit#config-triggerEvent)
     */
    triggerEvent: string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/CellEdit#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Extends the [CellEdit](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellEdit) to encapsulate SchedulerPro functionality.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/CellEdit)
 */
export class CellEdit extends GridCellEdit {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/CellEdit#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/schedulerpro/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
}

/**
 * Type with configuration options for [Dependencies](https://bryntum.com/products/grid/docs/api/SchedulerPro/feature/Dependencies) class.
 */
type DependenciesConfig = {
    type: 'dependencies'
    /**
     * Set to `false` to not allow creating dependencies
     */
    allowCreate: boolean
    /**
     * `false` to require a drop on a target event bar side circle to define the dependency type.
     * If dropped on the event bar, the `defaultValue` of the DependencyModel `type` field will be used to
     * determine the target task side.
     */
    allowDropOnEventBar: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Dependencies#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Dependencies#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The clickable/touchable width of the dependency line in pixels. Setting this to a number greater than 1 will
     * draw an invisible but clickable line along the same path as the dependency line, making it easier to click.
     * The tradeoff is that twice as many lines will be drawn, which can affect performance.
     */
    clickWidth: number
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * A tooltip config object that will be applied to the dependency creation [Tooltip](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip)
     */
    creationTooltip: Partial<TooltipConfig>
    /**
     * A template function that will be called to generate the HTML contents of the dependency creation tooltip.
     * You can return either an HTML string or a [DomConfig](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DomHelper#typedef-DomConfig) object.
     * @param {object} data Data about the dependency being created
     * @param {TimeSpan} data.source The from event
     * @param {TimeSpan} data.target The target event
     * @param {string} data.fromSide The from side (start, end, top, bottom)
     * @param {string} data.toSide The target side (start, end, top, bottom)
     * @param {boolean} data.valid The validity of the dependency
     * @returns {string|DomConfig}
     */
    creationTooltipTemplate: (data: { source: TimeSpan, target: TimeSpan, fromSide: string, toSide: string, valid: boolean }) => string|DomConfig
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Dependencies#config-disabled)
     */
    disabled: boolean
    /**
     * *Experimental* - This setting only applies when using dependencies with the nested events feature. In such
     * scenarios, enabling this config will cause the dependency lines to, when the algorithm determines it is
     * possible, be drawn around parent events, instead of through them.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Dependencies#config-drawAroundParents)
     */
    drawAroundParents: boolean
    /**
     * Specify `false` to prevent dependencies from being drawn during scroll, for smoother scrolling in schedules
     * with lots of dependencies. Dependencies will be drawn when scrolling stops instead.
     */
    drawOnScroll: boolean
    /**
     * Specify `true` to highlight incoming and outgoing dependencies when hovering an event.
     */
    highlightDependenciesOnEventHover: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Dependencies#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Dependencies#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Dependencies#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * SVG path definition used as marker (arrow head) for the dependency lines.
     * Should fit in a viewBox that is 9 x 6.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Dependencies#config-markerDef)
     */
    markerDef: string
    /**
     * Radius (in px) used to draw arcs where dependency line segments connect. Specify it to get a rounded look.
     * The radius will during drawing be reduced as needed on a per segment basis to fit lines.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Dependencies#config-radius)
     */
    radius: number
    /**
     * Renderer function, supply one if you want to manipulate the [DomConfig](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DomHelper#typedef-DomConfig) object used to draw a
     * dependency line between two assignments.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Dependencies#config-renderer)
     * @param {object} renderData
     * @param {DomConfig} renderData.domConfig that will be used to create the dependency line, can be manipulated by the renderer
     * @param {DependencyModel} renderData.dependencyRecord The dependency being rendered
     * @param {AssignmentModel} renderData.fromAssignmentRecord Drawing line from this assignment
     * @param {AssignmentModel} renderData.toAssignmentRecord Drawing line to this assignment
     * @param {<Object>} renderData.points A collection of points making up the line segments for the dependency line. Read-only in the renderer, any manipulation should be done to `domConfig`
     * @param {Rectangle} renderData.fromBox Bounds for the fromAssignment's element
     * @param {Rectangle} renderData.toBox Bounds for the toAssignment's element
     * @param {'top'|'right'|'bottom'|'left'} renderData.fromSide Drawn from this side of the fromAssignment
     * @param {'top'|'right'|'bottom'|'left'} renderData.toSide Drawn to this side of the fromAssignment
     * @returns {void}
     */
    renderer: (renderData: { domConfig: DomConfig, dependencyRecord: SchedulerDependencyModel, fromAssignmentRecord: SchedulerAssignmentModel, toAssignmentRecord: SchedulerAssignmentModel, points: object[], fromBox: Rectangle, toBox: Rectangle, fromSide: 'top'|'right'|'bottom'|'left', toSide: 'top'|'right'|'bottom'|'left' }) => void
    /**
     * `false` to not show a tooltip while creating a dependency
     */
    showCreationTooltip: boolean
    /**
     * Set to `true` to show the lag in the tooltip
     */
    showLagInTooltip: boolean
    /**
     * Set to `true` to show a tooltip when hovering a dependency line
     */
    showTooltip: boolean
    /**
     * CSS class used for terminals
     */
    terminalCls: string
    /**
     * Delay in ms before hiding the terminals when the mouse leaves an event bar or terminal.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Dependencies#config-terminalHideDelay)
     */
    terminalHideDelay: number
    /**
     * Terminal offset from their initial position, in px. Positive values move terminals further away from the
     * event bar, negative values inside the event bar.
     */
    terminalOffset: number
    /**
     * Delay in ms before showing the terminals when hovering over an event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Dependencies#config-terminalShowDelay)
     */
    terminalShowDelay: number
    /**
     * Where (on event bar edges) to display terminals. The sides are `'start'`, `'top'`,
     * `'end'` and `'bottom'`
     */
    terminalSides: string[]
    /**
     * Terminal diameter in px, overrides the default CSS value for it (which might depend on theme).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Dependencies#config-terminalSize)
     */
    terminalSize: number|string
    /**
     * A tooltip config object that will be applied to the dependency hover tooltip. Can be used to for example
     * customize delay
     */
    tooltip: Partial<TooltipConfig>
    /**
     * A template function allowing you to configure the contents of the tooltip shown when hovering a
     * dependency line. You can return either an HTML string or a [DomConfig](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DomHelper#typedef-DomConfig) object.
     * @param {DependencyBaseModel} dependency The dependency record
     * @returns {string|DomConfig}
     */
    tooltipTemplate: (dependency: DependencyBaseModel) => string|DomConfig
    /**
     * Fired on the owning Scheduler/Gantt after a dependency drag creation operation finished, no matter to outcome
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {DependencyBaseModel} event.dependency The created dependency
     */
    onAfterDependencyCreateDrop: ((event: { source: TimeSpan, target: TimeSpan, dependency: DependencyBaseModel }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt before a dependency creation drag operation starts. Return `false` to
     * prevent it
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     */
    onBeforeDependencyCreateDrag: ((event: { source: TimeSpan }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when a dependency drag creation operation is about to finalize
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {'start'|'end'|'top'|'bottom'} event.fromSide The from side (start / end / top / bottom)
     * @param {'start'|'end'|'top'|'bottom'} event.toSide The to side (start / end / top / bottom)
     */
    onBeforeDependencyCreateFinalize: ((event: { source: TimeSpan, target: TimeSpan, fromSide: 'start'|'end'|'top'|'bottom', toSide: 'start'|'end'|'top'|'bottom' }) => Promise<boolean|void>)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt before showing dependency terminals on a task or event. Return `false` to
     * prevent it
     * @param {object} event Event object
     * @param {TimeSpan} event.source The hovered task
     */
    onBeforeShowTerminals: ((event: { source: TimeSpan }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Dependencies#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when a dependency creation drag operation starts
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     */
    onDependencyCreateDragStart: ((event: { source: TimeSpan }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when a dependency drag creation operation succeeds
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {DependencyBaseModel} event.dependency The created dependency
     */
    onDependencyCreateDrop: ((event: { source: TimeSpan, target: TimeSpan, dependency: DependencyBaseModel }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when asynchronous dependency validation completes
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {number} event.dependencyType The dependency type, see [Type](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static)
     */
    onDependencyValidationComplete: ((event: { source: TimeSpan, target: TimeSpan, dependencyType: number }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when asynchronous dependency validation starts
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {number} event.dependencyType The dependency type, see [Type](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static)
     */
    onDependencyValidationStart: ((event: { source: TimeSpan, target: TimeSpan, dependencyType: number }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * This feature implements support for project transactions and is used by default in Scheduler Pro. For general
 * dependencies documentation see [Dependencies](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/Dependencies).
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Dependencies)
 */
export class Dependencies extends SchedulerDependencies {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Dependencies#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/schedulerpro/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
}

/**
 * Type with configuration options for [DependencyEdit](https://bryntum.com/products/grid/docs/api/SchedulerPro/feature/DependencyEdit) class.
 */
type DependencyEditConfig = {
    type: 'dependencyEdit'|'dependencyedit'
    /**
     * True to hide this editor if a click is detected outside it (defaults to true)
     */
    autoClose: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/DependencyEdit#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/DependencyEdit#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/DependencyEdit#config-disabled)
     */
    disabled: boolean
    /**
     * Default editor configuration, used to configure the Popup.
     */
    editorConfig: Partial<PopupConfig>
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/DependencyEdit#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/DependencyEdit#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/DependencyEdit#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * True to save and close this panel if ENTER is pressed in one of the input fields inside the panel.
     */
    saveAndCloseOnEnter: boolean
    /**
     * True to show a delete button in the form.
     */
    showDeleteButton: boolean
    /**
     * True to show the lag field for the dependency
     */
    showLagField: boolean
    /**
     * The event that shall trigger showing the editor. Defaults to `dependencydblclick`, set to empty string or
     * `null` to disable editing of dependencies.
     */
    triggerEvent: string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/DependencyEdit#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Feature that displays a popup containing fields for editing dependency data.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/DependencyEdit)
 */
export class DependencyEdit extends SchedulerDependencyEdit {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/DependencyEdit#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/schedulerpro/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
}

/**
 * Type with configuration options for [EventBuffer](https://bryntum.com/products/grid/docs/api/SchedulerPro/feature/EventBuffer) class.
 */
type EventBufferConfig = {
    type: 'eventBuffer'|'eventbuffer'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventBuffer#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventBuffer#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventBuffer#config-disabled)
     */
    disabled: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventBuffer#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventBuffer#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventBuffer#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Show buffer duration labels
     */
    showDuration: boolean
    /**
     * A function which receives data about the buffer time and returns a html string to show in a tooltip when
     * hovering a buffer time element
     * @param {object} data Data
     * @param {Duration} data.duration Buffer time duration
     * @param {boolean} data.before `true` if this is a buffer time before the event start, `false` if after
     * @param {EventModel} data.eventRecord The event record
     * @returns {string} String representing the HTML markup
     */
    tooltipTemplate: (data: { duration: Duration, before: boolean, eventRecord: EventModel }) => string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventBuffer#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Feature that allows showing additional time before &amp; after an event, to visualize things like travel time - or the time you
 * need to prepare a room for a meeting + clean it up after.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventBuffer)
 */
export class EventBuffer extends InstancePlugin {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventBuffer#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/schedulerpro/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
}

/**
 * Type with configuration options for [EventResize](https://bryntum.com/products/grid/docs/api/SchedulerPro/feature/EventResize) class.
 */
type EventResizeConfig = {
    type: 'eventResize'|'eventresize'
    /**
     * Set to true to allow resizing to a zero-duration span
     */
    allowResizeToZero: boolean
    /**
     * Use bottom handle when resizing. Only applies when owning client's `direction` is 'vertical'
     */
    bottomHandle: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventResize#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventResize#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventResize#config-disabled)
     */
    disabled: boolean
    /**
     * The amount of pixels to move pointer/mouse before it counts as a drag operation.
     */
    dragThreshold: number
    /**
     * Automatically shrink virtual handles when available space &lt; handleSize. The virtual handles will
     * decrease towards width/height 1, reserving space between opposite handles to for example leave room for
     * dragging. To configure reserved space, see [reservedSpace](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventResize#config-reservedSpace).
     */
    dynamicHandleSize: boolean
    /**
     * Resizing handle size to use instead of that determined by CSS
     * @deprecated Since 5.2.7. The handle size is determined from responsive CSS. Will be removed in 6.0
     */
    handleSize: number
    /**
     * Use left handle when resizing. Only applies when owning client's `direction` is 'horizontal'
     */
    leftHandle: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventResize#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventResize#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventResize#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Locks the layout during drag resize, overriding the default behaviour that uses the same rendering
     * pathway for drag resize as for already existing events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventResize#config-lockLayout)
     */
    lockLayout: boolean
    /**
     * Room in px to leave unoccupied by handles when shrinking them dynamically (see
     * [dynamicHandleSize](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventResize#config-dynamicHandleSize)).
     */
    reservedSpace: number
    /**
     * Use right handle when resizing. Only applies when owning client's `direction` is 'horizontal'
     */
    rightHandle: boolean
    /**
     * true to see exact event length during resizing
     */
    showExactResizePosition: boolean
    /**
     * `false` to not show a tooltip while resizing
     */
    showTooltip: boolean
    /**
     * If a tooltip is required to illustrate the resize, specify this as `true`, or a config
     * object for the [Tooltip](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip).
     */
    tip: Tooltip|Partial<TooltipConfig>
    /**
     * A template function returning the content to show during a resize operation.
     * @param {object} context A context object
     * @param {Date} context.startDate New start date
     * @param {Date} context.endDate New end date
     * @param {TimeSpan} context.record The record being resized
     * @param {string} context.startClockHtml Predefined HTML to show the start time
     * @param {string} context.endClockHtml Predefined HTML to show the end time
     * @returns {string} String representing the HTML markup
     */
    tooltipTemplate: (context: { startDate: Date, endDate: Date, record: TimeSpan, startClockHtml: string, endClockHtml: string }) => string
    /**
     * Use top handle when resizing. Only applies when owning client's direction` is 'vertical'
     */
    topHandle: boolean
    /**
     * Resizing handle size to use instead of that determined by CSS on touch devices
     * @deprecated Since 5.2.7. The handle size is determined from responsive CSS. Will be removed in 6.0
     */
    touchHandleSize: number
    /**
     * An empty function by default, but provided so that you can perform custom validation on
     * the item being resized. Return true if the new duration is valid, false to signal that it is not.
     * @param {object} context The resize context, contains the record &amp; dates.
     * @param {TimeSpan} context.record The record being resized.
     * @param {Date} context.startDate The new start date.
     * @param {Date} context.endDate The new start date.
     * @param {Date} context.originalStartDate Start date before resize
     * @param {Date} context.originalEndDate End date before resize
     * @param {Event} event The browser Event object
     * @returns {boolean}
     */
    validatorFn: (context: { record: TimeSpan, startDate: Date, endDate: Date, originalStartDate: Date, originalEndDate: Date }, event: Event) => boolean
    /**
     * `this` reference for the validatorFn
     */
    validatorFnThisObj: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventResize#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Feature that allows resizing an event by dragging its start or end.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventResize)
 */
export class EventResize extends SchedulerEventResize {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventResize#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/schedulerpro/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
}

/**
 * Type with configuration options for [EventSegmentDrag](https://bryntum.com/products/grid/docs/api/SchedulerPro/feature/EventSegmentDrag) class.
 */
type EventSegmentDragConfig = {
    type: 'eventSegmentDrag'|'eventsegmentdrag'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegmentDrag#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegmentDrag#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * Set to true to only allow dragging events within the same resource.
     */
    constrainDragToResource: boolean
    /**
     * Set to true to only allow dragging events to different resources, and disallow rescheduling by dragging.
     */
    constrainDragToTimeSlot: boolean
    /**
     * Set to `false` to allow dragging tasks outside the client Scheduler.
     * Useful when you want to drag tasks between multiple Scheduler instances
     */
    constrainDragToTimeline: boolean
    /**
     * A modifier key (CTRL, SHIFT, ALT, META) that when pressed will copy an event instead of moving it. Set to
     * empty string to disable copying
     */
    copyKey: 'CTRL'|'ALT'|'SHIFT'|'META'|''
    /**
     * Event can be copied two ways: either by adding new assignment to an existing event ('assignment'), or
     * by copying the event itself ('event'). 'auto' mode will pick 'event' for a single-assignment mode (when
     * event has `resourceId` field) and 'assignment' mode otherwise.
     */
    copyMode: 'auto'|'assignment'|'event'
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegmentDrag#config-disabled)
     */
    disabled: boolean
    /**
     * An object used to configure the internal [DragHelper](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DragHelper) class
     */
    dragHelperConfig: Partial<DragHelperConfig>
    /**
     * A CSS selector specifying elements outside the scheduler element which are valid drop targets.
     */
    externalDropTargetSelector: string
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegmentDrag#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegmentDrag#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegmentDrag#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * When enabled, the event being dragged always "snaps" to the exact start date that it will have after drop.
     */
    showExactDropPosition: boolean
    /**
     * Specifies whether or not to show tooltip while dragging event
     */
    showTooltip: boolean
    /**
     * A hook that allows manipulating the position the drag proxy snaps to. Manipulate the `snapTo` property
     * to alter snap position.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegmentDrag#config-snapToPosition)
     * @param {object} context
     * @param {AssignmentModel} context.assignmentRecord Dragged assignment
     * @param {EventModel} context.eventRecord Dragged event
     * @param {ResourceModel} context.resourceRecord Currently over this resource
     * @param {Date} context.startDate Start date for current position
     * @param {Date} context.endDate End date for current position
     * @param {object} context.snapTo
     * @param {number} context.snapTo.x X to snap to
     * @param {number} context.snapTo.y Y to snap to
     * @returns {void}
     */
    snapToPosition: (context: { assignmentRecord: SchedulerAssignmentModel, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, startDate: Date, endDate: Date, snapTo: { x: number, y: number } }) => void
    /**
     * The `eventDrag`and `taskDrag` events are normally only triggered when the drag operation will lead to a
     * change in date or assignment. By setting this config to `false`, that logic is bypassed to trigger events
     * for each native mouse move event.
     */
    throttleDragEvent: boolean
    /**
     * A config object to allow customization of the [Tooltip](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip) which tracks
     * the event during a drag operation.
     */
    tip: Partial<TooltipConfig>
    /**
     * Template used to generate drag tooltip contents.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegmentDrag#config-tooltipTemplate)
     * @param {object} data Tooltip data
     * @param {EventModel} data.eventRecord
     * @param {boolean} data.valid Currently over a valid drop target or not
     * @param {Date} data.startDate New start date
     * @param {Date} data.endDate New end date
     * @returns {string}
     */
    tooltipTemplate: (data: { eventRecord: SchedulerEventModel, valid: boolean, startDate: Date, endDate: Date }) => string
    /**
     * When the host Scheduler is `[multiEventSelect](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/EventSelection#config-multiEventSelect): true`
     * then, there are two modes of dragging *within the same Scheduler*.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegmentDrag#config-unifiedDrag)
     */
    unifiedDrag: boolean
    /**
     * An empty function by default, but provided so that you can perform custom validation on the item being
     * dragged. This function is called during the drag and drop process and also after the drop is made.
     * Return `true` if the new position is valid, `false` to prevent the drag.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegmentDrag#config-validatorFn)
     * @param {object} context A drag drop context object
     * @param {Date} context.startDate New start date
     * @param {Date} context.endDate New end date
     * @param {AssignmentModel>} context.assignmentRecords Assignment records which were dragged
     * @param {EventModel>} context.eventRecords Event records which were dragged
     * @param {ResourceModel} context.newResource New resource record
     * @param {EventModel} context.targetEventRecord Currently hovering this event record
     * @param {Event} event The event object
     * @returns {boolean|object} `true` if this validation passes, `false` if it does not. Or an object with 2 properties: `valid` -  Boolean `true`/`false` depending on validity, and `message` - String with a custom error message to display when invalid.
     */
    validatorFn: (context: { startDate: Date, endDate: Date, assignmentRecords: SchedulerAssignmentModel[], eventRecords: SchedulerEventModel[], newResource: SchedulerResourceModel, targetEventRecord: SchedulerEventModel }, event: Event) => boolean|object
    /**
     * The `this` reference for the validatorFn
     */
    validatorFnThisObj: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegmentDrag#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Allows user to drag and drop event segments within the row.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegmentDrag)
 */
export class EventSegmentDrag extends EventDrag {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegmentDrag#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<EventSegmentDragConfig>} config
     */
    constructor(config?: Partial<EventSegmentDragConfig>);
}

/**
 * Type with configuration options for [EventSegmentResize](https://bryntum.com/products/grid/docs/api/SchedulerPro/feature/EventSegmentResize) class.
 */
type EventSegmentResizeConfig = {
    type: 'eventSegmentResize'|'eventsegmentresize'
    /**
     * Set to true to allow resizing to a zero-duration span
     */
    allowResizeToZero: boolean
    /**
     * Use bottom handle when resizing. Only applies when owning client's `direction` is 'vertical'
     */
    bottomHandle: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegmentResize#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegmentResize#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegmentResize#config-disabled)
     */
    disabled: boolean
    /**
     * The amount of pixels to move pointer/mouse before it counts as a drag operation.
     */
    dragThreshold: number
    /**
     * Automatically shrink virtual handles when available space &lt; handleSize. The virtual handles will
     * decrease towards width/height 1, reserving space between opposite handles to for example leave room for
     * dragging. To configure reserved space, see [reservedSpace](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventResize#config-reservedSpace).
     */
    dynamicHandleSize: boolean
    /**
     * Resizing handle size to use instead of that determined by CSS
     * @deprecated Since 5.2.7. The handle size is determined from responsive CSS. Will be removed in 6.0
     */
    handleSize: number
    /**
     * Use left handle when resizing. Only applies when owning client's `direction` is 'horizontal'
     */
    leftHandle: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegmentResize#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegmentResize#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegmentResize#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Locks the layout during drag resize, overriding the default behaviour that uses the same rendering
     * pathway for drag resize as for already existing events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegmentResize#config-lockLayout)
     */
    lockLayout: boolean
    /**
     * Room in px to leave unoccupied by handles when shrinking them dynamically (see
     * [dynamicHandleSize](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventResize#config-dynamicHandleSize)).
     */
    reservedSpace: number
    /**
     * Use right handle when resizing. Only applies when owning client's `direction` is 'horizontal'
     */
    rightHandle: boolean
    /**
     * true to see exact event length during resizing
     */
    showExactResizePosition: boolean
    /**
     * `false` to not show a tooltip while resizing
     */
    showTooltip: boolean
    /**
     * If a tooltip is required to illustrate the resize, specify this as `true`, or a config
     * object for the [Tooltip](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip).
     */
    tip: Tooltip|Partial<TooltipConfig>
    /**
     * A template function returning the content to show during a resize operation.
     * @param {object} context A context object
     * @param {Date} context.startDate New start date
     * @param {Date} context.endDate New end date
     * @param {TimeSpan} context.record The record being resized
     * @param {string} context.startClockHtml Predefined HTML to show the start time
     * @param {string} context.endClockHtml Predefined HTML to show the end time
     * @returns {string} String representing the HTML markup
     */
    tooltipTemplate: (context: { startDate: Date, endDate: Date, record: TimeSpan, startClockHtml: string, endClockHtml: string }) => string
    /**
     * Use top handle when resizing. Only applies when owning client's direction` is 'vertical'
     */
    topHandle: boolean
    /**
     * Resizing handle size to use instead of that determined by CSS on touch devices
     * @deprecated Since 5.2.7. The handle size is determined from responsive CSS. Will be removed in 6.0
     */
    touchHandleSize: number
    /**
     * An empty function by default, but provided so that you can perform custom validation on
     * the item being resized. Return true if the new duration is valid, false to signal that it is not.
     * @param {object} context The resize context, contains the record &amp; dates.
     * @param {TimeSpan} context.record The record being resized.
     * @param {Date} context.startDate The new start date.
     * @param {Date} context.endDate The new start date.
     * @param {Date} context.originalStartDate Start date before resize
     * @param {Date} context.originalEndDate End date before resize
     * @param {Event} event The browser Event object
     * @returns {boolean}
     */
    validatorFn: (context: { record: TimeSpan, startDate: Date, endDate: Date, originalStartDate: Date, originalEndDate: Date }, event: Event) => boolean
    /**
     * `this` reference for the validatorFn
     */
    validatorFnThisObj: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegmentResize#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Feature that allows resizing an event segment by dragging its end.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegmentResize)
 */
export class EventSegmentResize extends EventResize {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegmentResize#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/schedulerpro/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
}

/**
 * Type with configuration options for [EventSegments](https://bryntum.com/products/grid/docs/api/SchedulerPro/feature/EventSegments) class.
 */
type EventSegmentsConfig = {
    type: 'eventSegments'|'eventsegments'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegments#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegments#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegments#config-disabled)
     */
    disabled: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegments#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegments#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegments#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Maximum allowed [split duration](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegments#config-splitDuration).
     * The value is used when calculating split duration automatically.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegments#config-maxSplitDuration)
     */
    maxSplitDuration: Duration|Partial<DurationConfig>|number
    /**
     * Minimum allowed [split duration](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegments#config-splitDuration).
     * The value is used when calculating split duration automatically.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegments#config-minSplitDuration)
     */
    minSplitDuration: Duration|Partial<DurationConfig>|number
    /**
     * The split duration to be used when "Split event" menu item is called.
     * When set to zero (default) the duration is calculated automatically as the clicked tick duration
     * restricted by [minSplitDuration](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegments#config-minSplitDuration) and [maxSplitDuration](#SchedulerPro/feature/EventSegments#config-maxSplitDuration) values.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegments#config-splitDuration)
     */
    splitDuration: Duration|Partial<DurationConfig>|number
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegments#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * This feature provides segmented events support. It implements rendering of such events and also adds a entries to the
 * event context menu allowing to split the selected event and rename segments.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegments)
 */
export class EventSegments extends InstancePlugin {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/EventSegments#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/schedulerpro/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
    /**
     * Returns a date at which to split an event.
     * @param {object} context Split function-call context
     */
    getSplitDate(context: {
        eventRecord: EventModel
        point: any[]
        date: Date
        tick: object
        timeAxis: TimeAxis
    }): Date;
    /**
     * Returns the event split duration.
     * @param {object} context Split call context
     */
    getSplitDuration(context: {
        eventRecord: EventModel
        point: any[]
        date: Date
        tick: object
        timeAxis: TimeAxis
    }): number;
    /**
     * Returns the duration unit to be used for the event splitting.
     * @param {object} context Split function-call context
     */
    getSplitDurationUnit(context: {
        eventRecord: EventModel
        point: any[]
        date: Date
        tick: object
        timeAxis: TimeAxis
    }): string;
}

/**
 * Type with configuration options for [NestedEvents](https://bryntum.com/products/grid/docs/api/SchedulerPro/feature/NestedEvents) class.
 */
type NestedEventsConfig = {
    type: 'nestedEvents'|'nestedevents'
    /**
     * Allow dropping a nested event directly on a resource to de-nest it, turning it into an ordinary event.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/NestedEvents#config-allowDeNestingOnDrop)
     */
    allowDeNestingOnDrop: boolean
    /**
     * Allow an event to be dropped on another to nest it.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/NestedEvents#config-allowNestingOnDrop)
     */
    allowNestingOnDrop: boolean
    /**
     * Vertical (horizontal in vertical mode) space between nested event bars, in px
     */
    barMargin: number
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/NestedEvents#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/NestedEvents#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * Constrains dragging of nested events within their parent when configured as `true`, allows them to be
     * dragged out of it when configured as `false` (the default).
     */
    constrainDragToParent: boolean
    /**
     * Constrains resizing of nested events to their parents start and end dates when configured as `true` (the
     * default), preventing them from changing their parents dates.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/NestedEvents#config-constrainResizeToParent)
     */
    constrainResizeToParent: boolean
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/NestedEvents#config-disabled)
     */
    disabled: boolean
    /**
     * Fixed event height (width in vertical mode) to use when configured with `eventLayout : 'stack'`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/NestedEvents#config-eventHeight)
     */
    eventHeight: number|number[]
    /**
     * This config defines how to handle overlapping nested events. Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/NestedEvents#config-eventLayout)
     */
    eventLayout: 'stack'|'pack'|'none'
    /**
     * Space (in px) in a parent element reserved for displaying a title etc. Used to compute available space for
     * the nested events container inside the parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/NestedEvents#config-headerHeight)
     */
    headerHeight: number
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/NestedEvents#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/NestedEvents#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/NestedEvents#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Maximum nesting level for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/NestedEvents#config-maxNesting)
     */
    maxNesting: number
    /**
     * Control how much space to leave between the first nested event bar/last nested event and the parent event (top/bottom
     * margin within the parent event row in horizontal mode, left/right margin within the parent event column in
     * vertical mode), in px.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/NestedEvents#config-resourceMargin)
     */
    resourceMargin: number|Partial<ResourceMarginConfig>
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/NestedEvents#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * A feature that renders child events nested inside their parent. Requires Scheduler Pro to use a tree event store
 * (normally handled automatically when events in data has children).
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/NestedEvents)
 */
export class NestedEvents extends InstancePlugin {
    /**
     * Allow dropping a nested event directly on a resource to de-nest it, turning it into an ordinary event.
     */
    allowDeNestingOnDrop: boolean
    /**
     * Allow an event to be dropped on another to nest it.
     */
    allowNestingOnDrop: boolean
    /**
     * Vertical (horizontal in vertical mode) space between nested event bars, in px
     */
    barMargin: number
    /**
     * Constrains dragging of nested events within their parent when configured as `true`, allows them to be
     * dragged out of it when configured as `false` (the default).
     */
    constrainDragToParent: boolean
    /**
     * Constrains resizing of nested events to their parents start and end dates when configured as `true` (the
     * default), preventing them from changing their parents dates.
     */
    constrainResizeToParent: boolean
    /**
     * Fixed event height (width in vertical mode) to use when configured with `eventLayout : 'stack'`.
     */
    eventHeight: number|number[]
    /**
     * This config defines how to handle overlapping nested events. Valid values are:
     */
    eventLayout: 'stack'|'pack'|'none'
    /**
     * Space (in px) in a parent element reserved for displaying a title etc. Used to compute available space for
     * the nested events container inside the parent.
     */
    headerHeight: number
    /**
     * Maximum nesting level for events.
     */
    maxNesting: number
    /**
     * Control how much space to leave between the first nested event bar/last nested event and the parent event (top/bottom
     * margin within the parent event row in horizontal mode, left/right margin within the parent event column in
     * vertical mode), in px.
     */
    resourceMargin: number|Partial<ResourceMarginConfig>
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/NestedEvents#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/schedulerpro/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
}

/**
 * Type with configuration options for [PercentBar](https://bryntum.com/products/grid/docs/api/SchedulerPro/feature/PercentBar) class.
 */
type PercentBarConfig = {
    type: 'percentBar'|'percentbar'
    /**
     * `true` to allow drag drop resizing to set the % done
     */
    allowResize: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/PercentBar#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/PercentBar#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/PercentBar#config-disabled)
     */
    disabled: boolean
    /**
     * Field name to use to display the value
     */
    displayField: string
    /**
     * By default, the underlying task record is updated live as the user drags the handle. Set to false
     * to only update the record upon drop.
     */
    instantUpdate: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/PercentBar#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/PercentBar#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/PercentBar#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * `true` to show a small % done label within the event while drag changing its value
     */
    showPercentage: boolean
    /**
     * Field name to use as the data source
     */
    valueField: string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/PercentBar#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * This feature visualizes the [percentDone](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone) field as a
 * progress bar on the event elements. Each progress bar also optionally has a drag handle which users can drag can
 * change the value.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/PercentBar)
 */
export class PercentBar extends InstancePlugin {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/PercentBar#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/schedulerpro/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
}

/**
 * Type with configuration options for [ResourceNonWorkingTime](https://bryntum.com/products/grid/docs/api/SchedulerPro/feature/ResourceNonWorkingTime) class.
 */
type ResourceNonWorkingTimeConfig = {
    type: 'resourceNonWorkingTime'|'resourcenonworkingtime'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/ResourceNonWorkingTime#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/ResourceNonWorkingTime#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/ResourceNonWorkingTime#config-disabled)
     */
    disabled: boolean
    /**
     * Set to `true` to allow mouse interactions with the rendered range elements. By default, the range elements
     * are not reachable with the mouse, and only serve as a static background.
     */
    enableMouseEvents: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/ResourceNonWorkingTime#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/ResourceNonWorkingTime#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/ResourceNonWorkingTime#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * The largest time axis unit to display non working ranges for ('hour' or 'day' etc).
     * When zooming to a view with a larger unit, no non-working time elements will be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/ResourceNonWorkingTime#config-maxTimeAxisUnit)
     */
    maxTimeAxisUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * The Model class to use for representing a [ResourceTimeRangeModel](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/ResourceTimeRangeModel)
     */
    resourceTimeRangeModelClass: typeof ResourceTimeRangeModel
    /**
     * Specify value to use for the tabIndex attribute of range elements
     */
    tabIndex: number
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/ResourceNonWorkingTime#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Feature that highlights the non-working intervals for resources based on their [calendar](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceModel#field-calendar).
 * If a resource has no calendar defined, the project's calendar will be used. The non-working time interval can
 * also be recurring. You can find a live example showing how to achieve this in the [Resource Non-Working Time Demo](../examples/resource-non-working-time/).
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/ResourceNonWorkingTime)
 */
export class ResourceNonWorkingTime extends ResourceTimeRangesBase {
    /**
     * Set to `true` to allow mouse interactions with the rendered range elements. By default, the range elements
     * are not reachable with the mouse, and only serve as a static background.
     */
    enableMouseEvents: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/ResourceNonWorkingTime#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/schedulerpro/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
    /**
     * Returns a resource nonworking time range record from the passed element
     * @param {HTMLElement} rangeElement
     */
    resolveResourceNonWorkingTimeInterval(rangeElement: HTMLElement): ResourceTimeRangeModel;
}

/**
 * Type with configuration options for [TaskEdit](https://bryntum.com/products/grid/docs/api/SchedulerPro/feature/TaskEdit) class.
 */
type TaskEditConfig = {
    type: 'taskEdit'|'taskedit'
    /**
     * What action should be taken when you click outside the editor, `cancel` or `save`
     */
    blurAction: 'cancel'|'save'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/TaskEdit#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/TaskEdit#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * True to show a confirmation dialog before deleting the event
     */
    confirmDelete: boolean
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/TaskEdit#config-disabled)
     */
    disabled: boolean
    /**
     * Class to use as the editor. By default it picks editor class depending on the project type.
     * It can be either [SchedulerTaskEditor](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor) or
     * [GanttTaskEditor](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor).
     * By specifying your own `editorClass` you override this.
     */
    editorClass: typeof Widget
    /**
     * A configuration object applied to the internal [TaskEditor](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase).
     * Useful to for example change the title of the editor or to set its dimensions in code:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/TaskEdit#config-editorConfig)
     */
    editorConfig: Partial<TaskEditorBaseConfig>
    /**
     * A configuration object used to customize the contents of the task editor. Supply a config object or
     * boolean per tab (listed below) to either affects its contents or toggle it on/off.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/TaskEdit#config-items)
     */
    items: object
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/TaskEdit#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/TaskEdit#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/TaskEdit#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * True to save and close this panel if ENTER is pressed in one of the input fields inside the panel.
     */
    saveAndCloseOnEnter: boolean
    /**
     * Set to false to not scroll event into view when invoking edit action (e.g. if event is only partially visible)
     */
    scrollIntoView: boolean
    /**
     * When field in task editor is changed, project model normally will trigger `hasChanges` event. If you use
     * this event to handle project changes excessive events might be a problem. Set this flag to true to only
     * trigger single `hasChanges` event after task changes are applied.
     */
    suspendHasChangesEvent: boolean
    /**
     * The event that shall trigger showing the editor. Defaults to `eventdblclick`, set to `` or null to
     * disable editing of existing events.
     */
    triggerEvent: string
    /**
     * The week start day used in all date fields of the feature editor form by default.
     * 0 means Sunday, 6 means Saturday.
     * Defaults to the locale's week start day.
     */
    weekStartDay: number
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/TaskEdit#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Feature that displays a [Task editor](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor), allowing users to edit task data.
 * The Task editor is a popup containing tabs with fields for editing task data.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/TaskEdit)
 */
export class TaskEdit extends InstancePlugin {
    /**
     * Returns true if the editor is currently active
     */
    readonly isEditing: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/TaskEdit#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/schedulerpro/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
    /**
     * Call this method to close task editor reverting changes.
     */
    cancel(): Promise<any>;
    /**
     * Shows a [scheduler task editor](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor) or [gantt task editor](#SchedulerPro/widget/GanttTaskEditor)
     * to edit the passed task. This function is exposed on the Scheduler Pro instance and can be called as `scheduler.editTask()`.
     * @param {EventModel|Function} taskRecord Task to edit or a function returning a task to edit, the function will be executed within an STM transaction which will be canceled in case user presses Cancel button or closes editor w/o hitting Save.
     * @param {ResourceModel} resourceRecord The Resource record for the event. This parameter is required if the event is newly created for a resource and has not been assigned, or when using multi assignment.
     * @param {HTMLElement} element Element to anchor editor to (defaults to events element)
     */
    editEvent(taskRecord: EventModel|Function, resourceRecord?: ResourceModel, element?: HTMLElement): Promise<any>;
    /**
     * Call this method to close task editor saving changes.
     */
    save(): Promise<any>;
}

/**
 * Type with configuration options for [TimeSpanHighlight](https://bryntum.com/products/grid/docs/api/SchedulerPro/feature/TimeSpanHighlight) class.
 */
type TimeSpanHighlightConfig = {
    type: 'timeSpanHighlight'|'timespanhighlight'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/TimeSpanHighlight#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/TimeSpanHighlight#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/TimeSpanHighlight#config-disabled)
     */
    disabled: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/TimeSpanHighlight#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/TimeSpanHighlight#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/TimeSpanHighlight#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/TimeSpanHighlight#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * This feature exposes methods on the owning Scheduler or Gantt widget which you can use to highlight one or multiple time spans
 * in the schedule. Please see [highlightTimeSpan](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/TimeSpanHighlight#function-highlightTimeSpan) and [highlightTimeSpans](#SchedulerPro/feature/TimeSpanHighlight#function-highlightTimeSpans) to learn
 * more or try the demo below:
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/TimeSpanHighlight)
 */
export class TimeSpanHighlight extends InstancePlugin {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/TimeSpanHighlight#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/schedulerpro/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
    /**
     * Highlights the region representing the passed time span and optionally for a single certain resource.
     * @param {HighlightTimeSpan} options A single options object describing the time span to highlight.
     */
    highlightTimeSpan(options: HighlightTimeSpan): void;
    /**
     * Highlights the regions representing the passed time spans.
     * @param {HighlightTimeSpan[]} timeSpans An array of objects with start/end dates describing the rectangle to highlight.
     * @param {object} options A single options object
     */
    highlightTimeSpans(timeSpans: HighlightTimeSpan[], options?: {
        clearExisting?: boolean
    }): void;
    /**
     * Removes any highlighting elements.
     * @param {boolean} fadeOut `true` to fade out the highlight elements before removing
     */
    unhighlightTimeSpans(fadeOut?: boolean): Promise<void>;
}

/**
 * Type with configuration options for [Versions](https://bryntum.com/products/grid/docs/api/SchedulerPro/feature/Versions) class.
 */
type VersionsConfig = {
    type: 'versions'
    /**
     * The interval between autosaves, in minutes. To disable autosave, set the interval to zero.
     * To save on the hour, use 'hourly'.
     */
    autoSaveInterval: 'hourly'|number
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Versions#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Versions#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Versions#config-disabled)
     */
    disabled: boolean
    /**
     * The set of Model types whose subtypes should be recorded as the base type in the change log. For example,
     * by default if a subclassed TaskModelEx exists and an instance of one is updated, it will be recorded in the
     * changelog as a TaskModel.
     */
    knownBaseTypes: any[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Versions#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Versions#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Versions#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Optional subclass of [ChangeLogTransactionModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/changelog/ChangeLogTransactionModel) to use instead of [ChangeLogTransactionModel](#SchedulerPro/model/changelog/ChangeLogTransactionModel).
     * Use this to extend ChangeLogTransactionModel to add any additional fields your application needs.
     */
    transactionModelClass: typeof ChangeLogTransactionModel
    /**
     * Optional subclass of [VersionModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/VersionModel) to use instead of [VersionModel](#SchedulerPro/model/VersionModel).
     * Use this to extend VersionModel to add any additional fields your application needs.
     */
    versionModelClass: typeof VersionModel
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Versions#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Captures versions (snapshots) of the active project, including a detailed log of the changes new in each version.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Versions)
 */
export class Versions extends InstancePlugin {
    /**
     * Whether a pending transaction is open with changes not yet added to the changelog.
     */
    hasChanges: boolean
    /**
     * Whether a saved version is currently being compared.
     */
    isComparing: boolean
    /**
     * Sets the description of the current transaction. This will override the default
     * transaction description.
     */
    transactionDescription: string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Versions#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/schedulerpro/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
    /**
     * When autosave is 'hourly', we check the time every 30 seconds and autosave on the hour.
     */
    autoSaveHourly(): void;
    /**
     * Loads the given version as a set of baselines into the current project.
     * @param {VersionModel} version The version to compare against the current working copy
     */
    compareVersion(version: VersionModel): Promise<void>;
    /**
     * Retrieve a single version's content from the backend.
     * @param {VersionModel} version Load content into the `content` field of a VersionModel
     */
    loadVersionContent(version: VersionModel): Promise<void>;
    /**
     * Restores the given version, replacing any [ProjectModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel) currently
     * present in the scheduler.
     * @param {VersionModel} version The version to compare against the current working copy
     */
    restoreVersion(version: VersionModel): Promise<void>;
    /**
     * Save a new version containing any unsaved audit log entries, with the given name (optional).
     * @param {string} versionName The name for the version
     */
    saveVersion(versionName?: string): void;
    /**
     * Stops comparing a currently compared version.
     */
    stopComparing(): void;
}

/**
 * Type with configuration options for [AssignmentModel](https://bryntum.com/products/grid/docs/api/SchedulerPro/model/AssignmentModel) class.
 */
type AssignmentModelConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/AssignmentModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * Specify `false` to opt out of drawing dependencies from/to this assignment
     */
    drawDependencies: boolean
    /**
     * Id for event to assign. Can be used as an alternative to `eventId`, but please note that after
     * load it will be populated with the actual event and not its id. This field is not persistable.
     */
    event: string|number|EventModel|TimeSpan
    /**
     * Id for the event to assign
     */
    eventId: string|number
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/AssignmentModel#config-id)
     */
    id: string|number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/AssignmentModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * Id for resource to assign to. Can be used as an alternative to `resourceId`, but please note that after
     * load it will be populated with the actual resource and not its id. This field is not persistable.
     */
    resource: string|number|ResourceModel
    /**
     * Id for the resource to assign to
     */
    resourceId: string|number
    /**
     * A numeric, percent-like value, indicating the "contribution level"
     * of the resource availability to the [event](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/AssignmentModel#field-event).
     * Number 100 means that the assigned [resource](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/AssignmentModel#field-resource) spends all its working time
     * on the [event](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/AssignmentModel#field-event).
     * And number 50 means that the resource spends only half of its available time
     * on the [event](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/AssignmentModel#field-event).
     * Setting the value to 0 will unassign the resource (and remove the assignment)
     */
    units: number
}

/**
 * This class represent a single assignment of a resource to an event in Scheduler Pro. It has a lot in common with
 * Schedulers AssignmentModel, they are separate models but they share much functionality using the
 * [AssignmentModelMixin](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/mixin/AssignmentModelMixin) mixin.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/AssignmentModel)
 */
export class AssignmentModel extends Model {
    /**
     * Specify `false` to opt out of drawing dependencies from/to this assignment
     */
    drawDependencies: boolean
    /**
     * Id for event to assign. Can be used as an alternative to `eventId`, but please note that after
     * load it will be populated with the actual event and not its id. This field is not persistable.
     */
    event: string|number|EventModel|TimeSpan
    /**
     * Id for the event to assign
     */
    eventId: string|number
    /**
     * Convenience property to get the name of the associated event.
     */
    readonly eventName: string
    /**
     * Returns true if the Assignment can be persisted (e.g. task and resource are not 'phantoms')
     */
    isPersistable: boolean
    /**
     * Id for resource to assign to. Can be used as an alternative to `resourceId`, but please note that after
     * load it will be populated with the actual resource and not its id. This field is not persistable.
     */
    resource: string|number|ResourceModel
    /**
     * Id for the resource to assign to
     */
    resourceId: string|number
    /**
     * Convenience property to get the name of the associated resource.
     */
    readonly resourceName: string
    /**
     * A numeric, percent-like value, indicating the "contribution level"
     * of the resource availability to the [event](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/AssignmentModel#field-event).
     * Number 100 means that the assigned [resource](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/AssignmentModel#field-resource) spends all its working time
     * on the [event](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/AssignmentModel#field-event).
     * And number 50 means that the resource spends only half of its available time
     * on the [event](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/AssignmentModel#field-event).
     * Setting the value to 0 will unassign the resource (and remove the assignment)
     */
    units: number
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<AssignmentModelConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<AssignmentModelConfig>, store?: Store, meta?: object);
    /**
     * Returns the resource associated with this assignment.
     */
    getResource(): SchedulerResourceModel;
    /**
     * Set value for the specified field(s), triggering engine calculations immediately. See
     * [Model#set()](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model#function-set) for arguments.
     * @param {string|object} field The field to set value for, or an object with multiple values to set in one call
     * @param {any} value Value to set
     * @param {boolean} silent Set to true to not trigger events automatically.
     */
    setAsync(field: string|object, value?: any, silent?: boolean): Promise<void>;
    /**
     * Returns a textual representation of this assignment (e.g. Mike 50%).
     */
    toString(): string;
}

/**
 * Type with configuration options for [CalendarIntervalModel](https://bryntum.com/products/grid/docs/api/SchedulerPro/model/CalendarIntervalModel) class.
 */
type CalendarIntervalModelConfig = {
    /**
     * A CSS class to add to the element visualizing this interval, when using the NonWorkingTime feature.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/CalendarIntervalModel#config-cls)
     */
    cls: string
    /**
     * The end date of the fixed (not recurrent) time interval.
     */
    endDate: Date
    /**
     * A CSS class used to add an icon to the element visualizing this interval, when using the NonWorkingTime feature.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/CalendarIntervalModel#config-iconCls)
     */
    iconCls: string
    /**
     * The "is working" flag, which defines what kind of interval this is - either working or non-working. Default value is `false`,
     * denoting non-working intervals.
     */
    isWorking: boolean
    /**
     * The end date of the recurrent time interval. Should be specified as any expression, recognized
     * by the excellent [later](http://bunkat.github.io/later/) library.
     */
    recurrentEndDate: string
    /**
     * The start date of the recurrent time interval. Should be specified as any expression, recognized
     * by the excellent [later](http://bunkat.github.io/later/) library.
     */
    recurrentStartDate: string
    /**
     * The start date of the fixed (not recurrent) time interval.
     */
    startDate: Date
}

/**
 * This is a documentation-only class, representing an interval in the [calendar](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/CalendarModel)
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/CalendarIntervalModel)
 */
export class CalendarIntervalModel {
    /**
     * A CSS class to add to the element visualizing this interval, when using the NonWorkingTime feature.
     */
    cls: string
    /**
     * The end date of the fixed (not recurrent) time interval.
     */
    endDate: Date
    /**
     * A CSS class used to add an icon to the element visualizing this interval, when using the NonWorkingTime feature.
     */
    iconCls: string
    /**
     * The "is working" flag, which defines what kind of interval this is - either working or non-working. Default value is `false`,
     * denoting non-working intervals.
     */
    isWorking: boolean
    /**
     * The end date of the recurrent time interval. Should be specified as any expression, recognized
     * by the excellent [later](http://bunkat.github.io/later/) library.
     */
    recurrentEndDate: string
    /**
     * The start date of the recurrent time interval. Should be specified as any expression, recognized
     * by the excellent [later](http://bunkat.github.io/later/) library.
     */
    recurrentStartDate: string
    /**
     * The start date of the fixed (not recurrent) time interval.
     */
    startDate: Date
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<CalendarIntervalModelConfig>} config
     */
    constructor(config?: Partial<CalendarIntervalModelConfig>);
    /**
     * Returns an internal representation of the recurrent end date from the `later` library.
     */
    getEndDateSchedule(): object;
    /**
     * Returns an internal representation of the recurrent start date from the `later` library.
     */
    getStartDateSchedule(): object;
    /**
     * Whether this interval is recurrent (both `recurrentStartDate` and `recurrentEndDate` are present and parsed correctly
     * by the `later` library).
     */
    isRecurrent(): boolean;
    /**
     * Whether this interval is static - both `startDate` and `endDate` are present.
     */
    isStatic(): boolean;
}

/**
 * Type with configuration options for [CalendarModel](https://bryntum.com/products/grid/docs/api/SchedulerPro/model/CalendarModel) class.
 */
type CalendarModelConfig = {
    /**
     * A flag, indicating whether the duration calculation should adjust the result to DST time shift.
     * By default, this flag is ignored and the corresponding flag from the
     * [ProjectModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-adjustDurationToDST) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/CalendarModel#config-adjustDurationToDST)
     */
    adjustDurationToDST: boolean
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/CalendarModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * A CSS class to add to calendar interval elements rendered in the UI.
     */
    cls: string
    /**
     * Start expanded or not
     */
    expanded: boolean
    /**
     * A CSS class defining an icon to show in non-working time elements rendered in the UI.
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/CalendarModel#config-id)
     */
    id: string|number
    /**
     * If using the [timeZone](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/ProjectModel#config-timeZone) config, you can set this to `true` to
     * *not* convert this calendar to the specified time zone.
     */
    ignoreTimeZone: boolean
    /**
     * [Intervals](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/CalendarIntervalModel) collection of the calendar. Accepts an array
     * as its input, which behind the scenes will be converted to a store containing the intervals. When
     * serializing it will be converted back to an array.
     */
    intervals: CalendarIntervalModel[]|Partial<CalendarIntervalModelConfig>[]|Store
    /**
     * The calendar name.
     */
    name: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/CalendarModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * An [EventStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * The flag, indicating, whether the "unspecified" time (time that does not belong to any interval
     * is working (`true`) or not (`false`).
     */
    unspecifiedTimeIsWorking: boolean
}

/**
 * This class represents a calendar in the Scheduler Pro project. It contains a collection of the [CalendarIntervalModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/CalendarIntervalModel).
 * Every interval can be either recurrent (regularly repeating in time) or static. These intervals can be visualized
 * by the [ResourceNonWorkingTime](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/ResourceNonWorkingTime) or [NonWorkingTime](#Scheduler/feature/NonWorkingTime) features.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/CalendarModel)
 */
export class CalendarModel extends Model {
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: AssignmentStore
    /**
     * Returns the calendar manager store of the project this entity belongs to.
     */
    readonly calendarManagerStore: CalendarManagerStore
    /**
     * A CSS class to add to calendar interval elements rendered in the UI.
     */
    cls: string
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: DependencyStore
    /**
     * Returns the task store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * Start expanded or not
     */
    readonly expanded: boolean
    /**
     * A CSS class defining an icon to show in non-working time elements rendered in the UI.
     */
    iconCls: string
    /**
     * If using the [timeZone](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/ProjectModel#config-timeZone) config, you can set this to `true` to
     * *not* convert this calendar to the specified time zone.
     */
    ignoreTimeZone: boolean
    /**
     * [Intervals](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/CalendarIntervalModel) collection of the calendar. Accepts an array
     * as its input, which behind the scenes will be converted to a store containing the intervals. When
     * serializing it will be converted back to an array.
     */
    intervals: CalendarIntervalModel[]|Partial<CalendarIntervalModelConfig>[]|Store
    /**
     * The calendar name.
     */
    name: string
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: ProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: ResourceStore
    /**
     * The [store](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) holding data on events.
     */
    readonly taskStore: EventStore
    /**
     * The flag, indicating, whether the "unspecified" time (time that does not belong to any interval
     * is working (`true`) or not (`false`).
     */
    unspecifiedTimeIsWorking: boolean
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<CalendarModelConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<CalendarModelConfig>, store?: Store, meta?: object);
    /**
     * This method adds a single [CalendarIntervalModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/CalendarIntervalModel) to the internal collection of the
     * calendar
     * @param {CalendarIntervalModel|Partial<CalendarIntervalModelConfig>} interval record or an object with data used to create a new record
     */
    addInterval(interval: CalendarIntervalModel|Partial<CalendarIntervalModelConfig>): CalendarIntervalModel[];
    /**
     * This method adds an array of [CalendarIntervalModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/CalendarIntervalModel) to the internal collection of the
     * calendar
     * @param {CalendarIntervalModel[]|Partial<CalendarIntervalModelConfig>[]} intervals An array of records or an array of objects with data used to create new records
     */
    addIntervals(intervals: CalendarIntervalModel[]|Partial<CalendarIntervalModelConfig>[]): CalendarIntervalModel[];
    /**
     * Calculate the working time duration for specific interval, in milliseconds.
     * @param {Date} startDate Start of the interval
     * @param {Date} endDate End of the interval
     */
    calculateDurationMs(startDate: Date, endDate: Date): number;
    /**
     * Calculates the end date of the time interval which starts at `startDate` and has `durationMs` working time
     * duration (in milliseconds).
     * @param {Date} startDate Start date
     * @param {number} durationMs Duration in milliseconds
     */
    calculateEndDate(startDate: Date, durationMs: number): Date;
    /**
     * Calculates the start date of the time interval which ends at `endDate` and has `durationMs` working time
     * duration (in milliseconds).
     * @param {Date} endDate End date
     * @param {number} durationMs Duration in milliseconds
     */
    calculateStartDate(endDate: Date, durationMs: number): Date;
    /**
     * This method removes all intervals from the internal collection of the calendar
     * @param {boolean} silent Do not trigger events
     */
    clearIntervals(silent?: boolean): void;
    /**
     * Returns non-working time ranges between the provided dates.
     * @param {Date} startDate Start of the period to get ranges from
     * @param {Date} endDate End of the period to get ranges from
     */
    getNonWorkingTimeRanges(startDate: Date, endDate: Date): {name: string, startDate: Date, endDate: Date}[];
    /**
     * Returns working time ranges between the provided dates.
     * @param {Date} startDate Start of the period to get ranges from
     * @param {Date} endDate End of the period to get ranges from
     */
    getWorkingTimeRanges(startDate: Date, endDate: Date): {name: string, startDate: Date, endDate: Date}[];
    /**
     * Checks if there is a working time interval in the provided time range
     * @param {Date} startDate Start of the interval
     * @param {Date} endDate End of the interval
     */
    isWorkingTime(startDate: Date, endDate: Date): boolean;
    /**
     * Returns the earliest point at which a working period of time starts, following the given date.
     * Can be the date itself, if it occurs during working time.
     * @param {Date} date The date after which to skip the non-working time
     * @param {boolean} isForward Whether the "following" means forward in time or backward
     */
    skipNonWorkingTime(date: Date, isForward?: boolean): Date;
}

/**
 * Type with configuration options for [DependencyModel](https://bryntum.com/products/grid/docs/api/SchedulerPro/model/DependencyModel) class.
 */
type DependencyModelConfig = {
    /**
     * Set to `false` to ignore this dependency in scheduling
     */
    active: boolean
    /**
     * Bidirectional, drawn with arrows in both directions
     */
    bidirectional: boolean
    /**
     * The calendar of the dependency used to take `lag` duration into account.
     */
    calendar: CalendarModel
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/DependencyModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class to apply to lines drawn for the dependency
     */
    cls: string
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * From event, id of source event
     */
    from: string|number
    /**
     * Gets/sets the source event of the dependency.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/DependencyModel#config-fromEvent)
     */
    fromEvent: string|number|SchedulerEventModel
    /**
     * Start side on source (top, left, bottom, right)
     */
    fromSide: 'top'|'left'|'bottom'|'right'
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/DependencyModel#config-id)
     */
    id: string|number
    /**
     * The magnitude of this dependency's lag (the number of units).
     */
    lag: number
    /**
     * The units of this dependency's lag, defaults to "d" (days). Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/DependencyModel#config-lagUnit)
     */
    lagUnit: 'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/DependencyModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * An [EventStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * To event, id of target event
     */
    to: string|number
    /**
     * Gets/sets the target event of the dependency.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/DependencyModel#config-toEvent)
     */
    toEvent: string|number|SchedulerEventModel
    /**
     * End side on target (top, left, bottom, right)
     */
    toSide: 'top'|'left'|'bottom'|'right'
    /**
     * Dependency type, see static property [Type](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static)
     */
    type: number
}

/**
 * This model represents a dependency between two events, usually added to a [DependencyStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore).
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/DependencyModel)
 */
export class DependencyModel extends DependencyBaseModel {
    /**
     * Set to `false` to ignore this dependency in scheduling
     */
    active: boolean
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: AssignmentStore
    /**
     * The calendar of the dependency used to take `lag` duration into account.
     */
    calendar: CalendarModel
    /**
     * Returns the calendar manager store of the project this entity belongs to.
     */
    readonly calendarManagerStore: CalendarManagerStore
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: DependencyStore
    /**
     * Returns the task store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: ProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: ResourceStore
    /**
     * The [store](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) holding data on events.
     */
    readonly taskStore: EventStore
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<DependencyModelConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<DependencyModelConfig>, store?: Store, meta?: object);
}

/**
 * Type with configuration options for [EventModel](https://bryntum.com/products/grid/docs/api/SchedulerPro/model/EventModel) class.
 */
type EventModelConfig = {
    /**
     * A field marking event as all day(s) spanning event.
     * For example, a holiday day may be represented by a `startDate`, and the `allDay` flag.
     */
    allDay: boolean
    /**
     * The calendar, assigned to the entity. Allows you to set the time when entity can perform the work.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#config-calendar)
     */
    calendar: CalendarModel
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * An encapsulation of the CSS classes to add to the rendered time span element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#config-cls)
     */
    cls: DomClassList|string|string[]|object
    /**
     * Field defining the constraint boundary date, if applicable.
     */
    constraintDate: Date
    /**
     * Field storing the event constraint alias or NULL if not constraint set.
     * Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#config-constraintType)
     */
    constraintType: 'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null
    /**
     * Amount of time to delay a nested event from its parent. Expressed in [durationUnit](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#field-durationUnit) units
     * (defaults to days).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#config-delayFromParent)
     */
    delayFromParent: number
    /**
     * Specify false to prevent the event from being dragged (if EventDrag feature is used)
     */
    draggable: boolean
    /**
     * The numeric part of the timespan's duration (the number of units).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#config-duration)
     */
    duration: number
    /**
     * The unit part of the TimeSpan duration, defaults to "d" (days). Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#config-durationUnit)
     */
    durationUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * A calculated field storing the *early end date* of the event.
     * The *early end date* is the earliest possible date the event can finish.
     * This value is calculated based on the earliest dates of the event predecessors and the event own constraints.
     * If the event has no predecessors nor other constraints, its early end date matches the project start date plus the event duration.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#config-earlyEndDate)
     */
    earlyEndDate: Date
    /**
     * A calculated field storing the *early start date* of the event.
     * The *early start date* is the earliest possible date the event can start.
     * This value is calculated based on the earliest dates of the event predecessors and the event own constraints.
     * If the event has no predecessors nor other constraints, its early start date matches the project start date.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#config-earlyStartDate)
     */
    earlyStartDate: Date
    /**
     * The numeric part of the event effort (the number of units).
     */
    effort: number
    /**
     * This boolean flag defines what part the data should be updated in the `FixedDuration` scheduling
     * mode.
     * If it is `true`, then [effort](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#field-effort) is kept intact when new duration is provided and
     * assignment [units](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/AssignmentModel#field-units) is updated.
     * If it is `false`, then assignment [units](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/AssignmentModel#field-units) is kept
     * intact when new duration is provided and [effort](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#field-effort) is updated.
     */
    effortDriven: boolean
    /**
     * The unit part of the event effort, defaults to "h" (hours). Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#config-effortUnit)
     */
    effortUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * The end date of a time span (or Event / Task).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#config-endDate)
     */
    endDate: string|Date
    /**
     * Controls the primary color of the event. For available standard colors, see
     * [EventColor](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/mixin/EventModelMixin#typedef-EventColor).
     */
    eventColor: EventColor|string|null
    /**
     * Controls this events appearance, see Schedulers
     * [eventStyle config](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventStyle) for
     * available options.
     */
    eventStyle: 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null
    /**
     * A string (either a single date or multiple dates separated by comma) or an array of strings containing
     * the timespan exception dates. The dates that must be skipped when generating occurrences for a repeating
     * timespan. This is used to modify only individual occurrences of the timespan so the further regenerations
     * won't create another copy of this occurrence again.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#config-exceptionDates)
     */
    exceptionDates: string|string[]
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the [duration](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/TimeSpan#field-duration) and [durationUnit](#Scheduler/model/TimeSpan#field-durationUnit) fields.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * CSS class specifying an icon to apply to the rendered time span element.
     * <strong>Note</strong>: In case event is a milestone, using `iconCls` with dependency feature might slightly decrease
     * performance because feature will refer to the DOM to get exact size of the element.
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#config-id)
     */
    id: string|number
    /**
     * When set to `true` the calendars of the assigned resources
     * are not taken into account when scheduling the event.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#config-ignoreResourceCalendar)
     */
    ignoreResourceCalendar: boolean
    /**
     * When set to `true` the event becomes inactive and stops taking part in the project scheduling (doesn't
     * affect linked events and affect its assigned resources allocation).
     */
    inactive: boolean
    /**
     * When set to `true`, the `startDate` of the event will not be changed by any of its incoming dependencies
     * or constraints.
     */
    manuallyScheduled: boolean
    /**
     * Width (in px) to use for this milestone when using Scheduler#milestoneLayoutMode 'data'.
     */
    milestoneWidth: number
    /**
     * The name of the time span (or Event / Task)
     */
    name: string
    /**
     * Note about the event
     */
    note: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * The current status of a task, expressed as the percentage completed (integer from 0 to 100)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#config-percentDone)
     */
    percentDone: number
    /**
     * Buffer time after event end. Specified in a human-friendly form as accepted by
     * [parseDuration](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DateHelper#function-parseDuration-static):
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#config-postamble)
     */
    postamble: string
    /**
     * Buffer time before event start. Specified in a human-friendly form as accepted by
     * [parseDuration](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DateHelper#function-parseDuration-static):
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#config-preamble)
     */
    preamble: string|Duration
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * The timespan recurrence rule. A string in [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.3.10)
     * described format ("RRULE" expression).
     */
    recurrenceRule: string
    /**
     * Specify `false` to prevent the event from being resized (if EventResize feature is used). You can also
     * specify `'start'` or `'end'` to only allow resizing in one direction
     */
    resizable: boolean|string
    /**
     * Id of the resource this event is associated with (only usable for single assignments). We recommend
     * using assignments in an AssignmentStore over this approach. Internally any Event using `resourceId`
     * will have an assignment in AssignmentStore generated.
     */
    resourceId: string|number
    /**
     * Ids of the resources this event is associated with (can be used for for multiple assignments).
     * Any event using `resourceIds` will have assignments in AssignmentStore generated automatically.
     * It only applies if is configured with `perist: true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#config-resourceIds)
     */
    resourceIds: string[]|number[]
    /**
     * The array of [resources](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/ResourceModel) which are assigned to this event.
     */
    resources: SchedulerResourceModel[]
    /**
     * This field defines the event scheduling mode. Based on this field some fields of the event
     * will be "fixed" (should be provided by the user) and some - computed.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#config-schedulingMode)
     */
    schedulingMode: 'Normal'|'FixedDuration'
    /**
     * Segments of the event that appear when the event gets [splitToSegments](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#function-splitToSegments).
     */
    segments: EventSegmentModel[]
    /**
     * Set this to true if this task should be shown in the Timeline widget
     */
    showInTimeline: boolean
    /**
     * The start date of a time span (or Event / Task).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#config-startDate)
     */
    startDate: string|Date
    /**
     * Set this field to `false` to opt out of [sticky event content](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/StickyEvents)
     * (keeping event text in view while scrolling).
     */
    stickyContents: boolean
    /**
     * A CSS style string (applied to `style.cssText`) or object (applied to `style`)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#config-style)
     */
    style: string
    /**
     * An [EventStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#config-timeZone)
     */
    timeZone: string|number|null
    /**
     * This field is automatically set to `true` when the event is "unscheduled" - user has provided an empty
     * string in one of the UI editors for start date, end date or duration. Such event is not rendered,
     * and does not affect the schedule of its successors.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#config-unscheduled)
     */
    unscheduled: boolean
}

/**
 * This class represent a single event in your schedule, usually added to a [EventStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore).
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel)
 */
export class EventModel extends TimeSpan {
    /**
     * A field marking event as all day(s) spanning event.
     * For example, a holiday day may be represented by a `startDate`, and the `allDay` flag.
     */
    allDay: boolean
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: AssignmentStore
    /**
     * Returns all assignments for the event. Event must be part of the store for this method to work.
     */
    readonly assignments: SchedulerAssignmentModel[]
    /**
     * The calendar, assigned to the entity. Allows you to set the time when entity can perform the work.
     */
    calendar: CalendarModel
    /**
     * Returns the calendar manager store of the project this entity belongs to.
     */
    readonly calendarManagerStore: CalendarManagerStore
    /**
     * Field defining the constraint boundary date, if applicable.
     */
    constraintDate: Date
    /**
     * Field storing the event constraint alias or NULL if not constraint set.
     * Valid values are:
     */
    constraintType: 'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null
    /**
     * Amount of time to delay a nested event from its parent. Expressed in [durationUnit](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#field-durationUnit) units
     * (defaults to days).
     */
    readonly delayFromParent: number
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: DependencyStore
    /**
     * Specify false to prevent the event from being dragged (if EventDrag feature is used)
     */
    draggable: boolean
    /**
     * The numeric part of the timespan's duration (the number of units).
     */
    duration: number
    /**
     * A calculated field storing the *early end date* of the event.
     * The *early end date* is the earliest possible date the event can finish.
     * This value is calculated based on the earliest dates of the event predecessors and the event own constraints.
     * If the event has no predecessors nor other constraints, its early end date matches the project start date plus the event duration.
     */
    readonly earlyEndDate: Date
    /**
     * A calculated field storing the *early start date* of the event.
     * The *early start date* is the earliest possible date the event can start.
     * This value is calculated based on the earliest dates of the event predecessors and the event own constraints.
     * If the event has no predecessors nor other constraints, its early start date matches the project start date.
     */
    readonly earlyStartDate: Date
    /**
     * The event effective calendar. Returns the
     * [project calendar](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#field-calendar) if the event has no own
     * [calendar](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#field-calendar) provided.
     */
    effectiveCalendar: CalendarModel
    /**
     * The numeric part of the event effort (the number of units).
     */
    effort: number
    /**
     * This boolean flag defines what part the data should be updated in the `FixedDuration` scheduling
     * mode.
     * If it is `true`, then [effort](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#field-effort) is kept intact when new duration is provided and
     * assignment [units](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/AssignmentModel#field-units) is updated.
     * If it is `false`, then assignment [units](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/AssignmentModel#field-units) is kept
     * intact when new duration is provided and [effort](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#field-effort) is updated.
     */
    effortDriven: boolean
    /**
     * The unit part of the event effort, defaults to "h" (hours). Valid values are:
     */
    readonly effortUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * The end date of a time span (or Event / Task).
     */
    endDate: string|Date
    /**
     * Controls the primary color of the event. For available standard colors, see
     * [EventColor](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/mixin/EventModelMixin#typedef-EventColor).
     */
    eventColor: EventColor|string|null
    /**
     * Returns the event store this event is part of.
     */
    readonly eventStore: EventStore
    /**
     * Controls this events appearance, see Schedulers
     * [eventStyle config](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventStyle) for
     * available options.
     */
    eventStyle: 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null
    /**
     * A string (either a single date or multiple dates separated by comma) or an array of strings containing
     * the timespan exception dates. The dates that must be skipped when generating occurrences for a repeating
     * timespan. This is used to modify only individual occurrences of the timespan so the further regenerations
     * won't create another copy of this occurrence again.
     */
    exceptionDates: string|string[]
    /**
     * The event first segment or null if the event is not segmented.
     */
    firstSegment: EventSegmentModel
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the [duration](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/mixin/EventModelMixin#field-duration) and
     * [durationUnit](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/TimeSpan#field-durationUnit) fields.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * Property which encapsulates the effort's magnitude and units.
     */
    fullEffort: Duration
    /**
     * The unique identifier of a task (mandatory)
     */
    id: string|number
    /**
     * When set to `true` the calendars of the assigned resources
     * are not taken into account when scheduling the event.
     */
    ignoreResourceCalendar: boolean
    /**
     * When set to `true` the event becomes inactive and stops taking part in the project scheduling (doesn't
     * affect linked events and affect its assigned resources allocation).
     */
    inactive: boolean
    /**
     * Indicates if the task is complete (its [percent completion](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone) is 100% (or greater)).
     */
    isCompleted: boolean
    /**
     * Returns true if event can be drag and dropped
     */
    isDraggable: boolean
    /**
     * Indicates if the task is in progress (its [percent completion](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone) is greater than zero and less than 100%).
     */
    isInProgress: boolean
    /**
     * Flag which indicates that this event is an interday event. This means that it spans
     * an entire day or multiple days.
     */
    readonly isInterDay: boolean
    /**
     * Indicates if the timespan is an occurrence of another recurring timespan.
     */
    readonly isOccurrence: boolean
    /**
     * Returns false if the event is not persistable. By default it always is, override this getter if you need
     * custom logic.
     */
    readonly isPersistable: boolean
    /**
     * Indicates if the timespan is recurring.
     */
    readonly isRecurring: boolean
    /**
     * Returns true if event can be resized, but can additionally return 'start' or 'end' indicating how this event can
     * be resized.
     */
    readonly isResizable: boolean|string
    /**
     * Indicates if the task is started (its [percent completion](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone) is greater than zero).
     */
    isStarted: boolean
    /**
     * The event last segment or null if the event is not segmented.
     */
    lastSegment: EventSegmentModel
    /**
     * When set to `true`, the `startDate` of the event will not be changed by any of its incoming dependencies
     * or constraints.
     */
    manuallyScheduled: boolean
    /**
     * Width (in px) to use for this milestone when using Scheduler#milestoneLayoutMode 'data'.
     */
    milestoneWidth: number
    /**
     * Note about the event
     */
    note: string
    /**
     * If this event is an [occurrence](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/mixin/RecurringTimeSpan#property-isOccurrence) of a recurring event, then this
     * property yields its zero-based occurrence index in the sequence.
     */
    readonly occurrenceIndex: number
    /**
     * Returns event end date adjusted by [postamble](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#field-postamble) (end date + duration).
     */
    readonly outerEndDate: Date
    /**
     * Returns event start date adjusted by [preamble](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#field-preamble) (start date - duration).
     */
    readonly outerStartDate: Date
    /**
     * The current status of a task, expressed as the percentage completed (integer from 0 to 100)
     */
    percentDone: number
    /**
     * Buffer time after event end. Specified in a human-friendly form as accepted by
     * [parseDuration](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DateHelper#function-parseDuration-static):
     */
    postamble: string
    /**
     * Buffer time before event start. Specified in a human-friendly form as accepted by
     * [parseDuration](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DateHelper#function-parseDuration-static):
     */
    preamble: string|Duration
    /**
     * Returns all predecessor dependencies of this event
     */
    readonly predecessors: DependencyBaseModel[]
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: ProjectModel
    /**
     * The recurrence model used for the timespan.
     */
    recurrence: RecurrenceModel
    /**
     * Name of the class representing the recurrence model, defaults to [RecurrenceModel](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/RecurrenceModel)
     */
    recurrenceModel: string
    /**
     * The timespan recurrence rule. A string in [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.3.10)
     * described format ("RRULE" expression).
     */
    recurrenceRule: string
    /**
     * Human-friendly rounding. When task is completed &lt; 99%, it rounds the value. It floors value between 99 and 100, to not
     * show task as completed when it is for example 99.51% done.
     */
    renderedPercentDone: number
    /**
     * Specify `false` to prevent the event from being resized (if EventResize feature is used). You can also
     * specify `'start'` or `'end'` to only allow resizing in one direction
     */
    resizable: boolean|string
    /**
     * Returns the first assigned resource, or assigns a resource
     */
    resource: SchedulerResourceModel
    /**
     * Id of the resource this event is associated with (only usable for single assignments). We recommend
     * using assignments in an AssignmentStore over this approach. Internally any Event using `resourceId`
     * will have an assignment in AssignmentStore generated.
     */
    resourceId: string|number
    /**
     * Ids of the resources this event is associated with (can be used for for multiple assignments).
     * Any event using `resourceIds` will have assignments in AssignmentStore generated automatically.
     * It only applies if is configured with `perist: true`.
     */
    resourceIds: string[]|number[]
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: ResourceStore
    /**
     * Returns all resources assigned to an event.
     */
    readonly resources: SchedulerResourceModel[]
    /**
     * This field defines the event scheduling mode. Based on this field some fields of the event
     * will be "fixed" (should be provided by the user) and some - computed.
     */
    schedulingMode: 'Normal'|'FixedDuration'
    /**
     * Segments of the event that appear when the event gets [splitToSegments](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#function-splitToSegments).
     */
    segments: EventSegmentModel[]
    /**
     * Set this to true if this task should be shown in the Timeline widget
     */
    showInTimeline: boolean
    /**
     * The start date of a time span (or Event / Task).
     */
    startDate: string|Date
    /**
     * Set this field to `false` to opt out of [sticky event content](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/StickyEvents)
     * (keeping event text in view while scrolling).
     */
    stickyContents: boolean
    /**
     * Returns all successor dependencies of this event
     */
    readonly successors: DependencyBaseModel[]
    /**
     * Returns `true` if this timespan supports recurring.
     */
    supportsRecurring: boolean
    /**
     * The [store](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) holding data on events.
     */
    readonly taskStore: EventStore
    /**
     * This field is automatically set to `true` when the event is "unscheduled" - user has provided an empty
     * string in one of the UI editors for start date, end date or duration. Such event is not rendered,
     * and does not affect the schedule of its successors.
     */
    readonly unscheduled: boolean
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<EventModelConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<EventModelConfig>, store?: Store, meta?: object);
    /**
     * This method assigns a resource to this event.
     * @param {ResourceModel|string|number|ResourceModel[]|string[]|number[]} resource A new resource for this event, either as a full Resource record or an id (or an array of such).
     * @param {number} units The `units` field of the new assignment
     */
    assign(resource: ResourceModel|string|number|ResourceModel[]|string[]|number[], units?: number): Promise<void>;
    /**
     * If given resource is assigned to this event, returns a [AssignmentModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/AssignmentModel) record.
     * Otherwise, returns `null`
     * @param {ResourceModel} resource The instance of [ResourceModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceModel)
     */
    getAssignmentFor(resource: ResourceModel): AssignmentModel|null;
    /**
     * Returns the event calendar.
     */
    getCalendar(): CalendarModel;
    /**
     * Returns the event [ignoreResourceCalendar](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#field-ignoreResourceCalendar) field value.
     */
    getIgnoreResourceCalendar(): boolean;
    /**
     * Returns the occurrences of this event over the specified time range. If the first
     * occurrence is in the time range `*this*` record is included in that position.
     * @param {Date} startDate The start date of the range for which to include occurrences.
     * @param {Date} endDate The end date of the range for which to include occurrences. Defaults to the startDate.
     */
    getOccurrencesForDateRange(startDate: Date, endDate?: Date): TimeSpan[];
    /**
     * Returns either the resource associated with this event (when called w/o `resourceId`) or resource
     * with specified id.
     * @param {string} resourceId To retrieve a specific resource
     */
    getResource(resourceId?: string): SchedulerResourceModel;
    /**
     * Does this recurring event have an exception on the passed date.
     * @param {Date} date The date to find an exception for.
     */
    hasException(date: Date): boolean;
    /**
     * Returns true if this event is assigned to a certain resource.
     * @param {SchedulerResourceModel|string|number} resource The resource to query for
     */
    isAssignedTo(resource: SchedulerResourceModel|string|number): boolean;
    /**
     * Defines if the given event field should be manually editable in UI.
     * You can override this method to provide your own logic.
     * @param {string} fieldName Name of the field
     */
    isEditable(fieldName: string): boolean;
    /**
     * Merges the event segments.
     * The method merges two provided event segments (and all the segment between them if any).
     * @param {EventSegmentModel} segment1 First segment to merge.
     * @param {EventSegmentModel} segment2 Second segment to merge.
     */
    mergeSegments(segment1?: EventSegmentModel, segment2?: EventSegmentModel): Promise<any>;
    /**
     * Reassigns an event from an old resource to a new resource
     * @param {SchedulerResourceModel|string|number} oldResourceId A resource to unassign from or its id
     * @param {SchedulerResourceModel|string|number} newResourceId A resource to assign to or its id
     */
    reassign(oldResourceId: SchedulerResourceModel|string|number, newResourceId: SchedulerResourceModel|string|number): void;
    /**
     * Override of [Model](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model)'s method. If an [isOccurrence](#Scheduler/model/mixin/RecurringTimeSpan#property-isOccurrence)
     * is passed, it is detached from its parent recurring event. If it still has a recurrence
     * then the recurring event is changed to stop at the occurrence date. If it has no recurrence
     * an exception is added at the occurrence date.
     */
    remove(): void;
    /**
     * Set value for the specified field(s), triggering engine calculations immediately. See
     * [Model#set()](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model#function-set) for arguments.
     * @param {string|object} field The field to set value for, or an object with multiple values to set in one call
     * @param {any} value Value to set
     * @param {boolean} silent Set to true to not trigger events. If event is recurring, occurrences won't be updated automatically.
     */
    setAsync(field: string|object, value?: any, silent?: boolean): Promise<void>;
    /**
     * Sets the calendar of the event. Will cause the schedule to be updated - returns a `Promise`
     * @param {CalendarModel} calendar The new calendar. Provide `null` to fall back to the project calendar.
     */
    setCalendar(calendar: CalendarModel): Promise<void>;
    /**
     * Sets the constraint type and (optionally) constraining date to the event.
     * @param {'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null} constraintType Constraint type, please refer to the [constraintType](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#field-constraintType) for the valid values.
     * @param {Date} constraintDate Constraint date.
     */
    setConstraint(constraintType: 'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null, constraintDate?: Date): Promise<void>;
    /**
     * Updates the duration (and optionally unit) of the event. Will cause the schedule to be updated - returns a `Promise`
     * @param {number} duration New duration value
     * @param {string} unit New duration unit
     */
    setDuration(duration: number, unit?: string): Promise<void>;
    /**
     * Updates the [effort](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#field-effort) (and optionally [unit](#SchedulerPro/model/EventModel#field-effortUnit)) of the event.
     * Will cause the schedule to be updated - returns a `Promise`
     * @param {number} effort New effort value
     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} unit New effort unit
     */
    setEffort(effort: number, unit?: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'): Promise<void>;
    /**
     * Sets the end date of the event. Will cause the schedule to be updated - returns a `Promise`
     * @param {Date} date The new end date.
     * @param {boolean} keepDuration Whether to keep the duration (and update the start date), while changing the end date, or vice-versa.
     */
    setEndDate(date: Date, keepDuration?: boolean): Promise<void>;
    /**
     * Sets the event [ignoreResourceCalendar](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#field-ignoreResourceCalendar) field value and triggers rescheduling.
     * @param {boolean} ignore Provide `true` to ignore the calendars of the assigned resources when scheduling the event. If `false` the event performs only when its own [calendar](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#field-calendar) and some of the assigned resource calendars allow that.
     */
    setIgnoreResourceCalendar(ignore: boolean): Promise<void>;
    /**
     * Either activates or deactivates the task depending on the passed value.
     * Will cause the schedule to be updated - returns a `Promise`
     * @param {boolean} inactive `true` to deactivate the task, `false` to activate it.
     */
    setInactive(inactive: boolean): Promise<void>;
    /**
     * Sets a recurrence for the timespan with a given frequency, interval, and end.
     * @param {Partial<RecurrenceModelConfig>|string|RecurrenceModel} recurrence A data object for an instance of [RecurrenceModel](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/RecurrenceModel). May also be the frequency string: `DAILY`, `WEEKLY`, `MONTHLY`, or `YEARLY`. ```javascript // repeat the event every other week till Jan 2 2039 event.setRecurrence({     frequency : "WEEKLY",     interval  : 2,     endDate   : new Date(2039, 0, 2) }); ``` Also a [recurrence model](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/RecurrenceModel) can be provided as the only argument for this method: ```javascript const recurrence = new RecurrenceModel({ frequency : 'DAILY', interval : 5 });  event.setRecurrence(recurrence); ``` or ```javascript event.setRecurrence("WEEKLY", 2, new Date(2039, 0, 2)); ```
     * @param {number} interval The interval between occurrences (instances of this recurrence). For example, a daily recurrence with an interval of 2 occurs every other day. Must be greater than 0.
     * @param {number|Date} recurrenceEnd The end of the recurrence. The value can be specified by a date or by a maximum count of occurrences (has to greater than 1, since 1 means the event itself).
     */
    setRecurrence(recurrence: Partial<RecurrenceModelConfig>|string|RecurrenceModel, interval?: number, recurrenceEnd?: number|Date): void;
    /**
     * Sets [segments](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#field-segments) field value.
     * @param {EventSegmentModel[]} segments Array of segments or null to make the event not segmented.
     */
    setSegments(segments: EventSegmentModel[]): Promise<any>;
    /**
     * Sets the start date of the event. Will cause the schedule to be updated - returns a `Promise`
     * @param {Date} date The new start date.
     * @param {boolean} keepDuration Whether to keep the duration (and update the end date), while changing the start date, or vice-versa.
     */
    setStartDate(date: Date, keepDuration?: boolean): Promise<void>;
    /**
     * Shift the dates for the date range by the passed amount and unit
     * @param {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} unit The unit to shift by, see [DateHelper](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DateHelper) for more information on valid formats.
     * @param {number} amount The amount to shift
     */
    shift(unit: 'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y', amount: number): Promise<any>;
    /**
     * Splits the event into segments.
     * @param {Date} from The date to split this event at.
     * @param {number} lag Split duration.
     * @param {string} lagUnit Split duration unit.
     */
    splitToSegments(from: Date, lag?: number, lagUnit?: string): Promise<any>;
    /**
     * This method unassigns a resource from this event.
     * @param {ResourceModel} resource The instance of [ResourceModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceModel)
     */
    unassign(resource: ResourceModel): Promise<void>;
}

/**
 * Type with configuration options for [EventSegmentModel](https://bryntum.com/products/grid/docs/api/SchedulerPro/model/EventSegmentModel) class.
 */
type EventSegmentModelConfig = {
    /**
     * A field marking event as all day(s) spanning event.
     * For example, a holiday day may be represented by a `startDate`, and the `allDay` flag.
     */
    allDay: boolean
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventSegmentModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * An encapsulation of the CSS classes to add to the rendered time span element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventSegmentModel#config-cls)
     */
    cls: DomClassList|string|string[]|object
    /**
     * Specify false to prevent the event from being dragged (if EventDrag feature is used)
     */
    draggable: boolean
    /**
     * The numeric part of the timespan's duration (the number of units).
     */
    duration: number
    /**
     * The unit part of the TimeSpan duration, defaults to "d" (days). Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventSegmentModel#config-durationUnit)
     */
    durationUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * The end date of a time span (or Event / Task).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventSegmentModel#config-endDate)
     */
    endDate: string|Date
    /**
     * Controls the primary color of the event. For available standard colors, see
     * [EventColor](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/mixin/EventModelMixin#typedef-EventColor).
     */
    eventColor: EventColor|string|null
    /**
     * Controls this events appearance, see Schedulers
     * [eventStyle config](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventStyle) for
     * available options.
     */
    eventStyle: 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the [duration](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/TimeSpan#field-duration) and [durationUnit](#Scheduler/model/TimeSpan#field-durationUnit) fields.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * CSS class specifying an icon to apply to the rendered time span element.
     * <strong>Note</strong>: In case event is a milestone, using `iconCls` with dependency feature might slightly decrease
     * performance because feature will refer to the DOM to get exact size of the element.
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventSegmentModel#config-id)
     */
    id: string|number
    /**
     * Width (in px) to use for this milestone when using Scheduler#milestoneLayoutMode 'data'.
     */
    milestoneWidth: number
    /**
     * The name of the time span (or Event / Task)
     */
    name: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * The current status of a task, expressed as the percentage completed (integer from 0 to 100)
     */
    percentDone: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventSegmentModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * Specify `false` to prevent the event from being resized (if EventResize feature is used). You can also
     * specify `'start'` or `'end'` to only allow resizing in one direction
     */
    resizable: boolean|string
    /**
     * Id of the resource this event is associated with (only usable for single assignments). We recommend
     * using assignments in an AssignmentStore over this approach. Internally any Event using `resourceId`
     * will have an assignment in AssignmentStore generated.
     */
    resourceId: string|number
    /**
     * Ids of the resources this event is associated with (can be used for for multiple assignments).
     * Any event using `resourceIds` will have assignments in AssignmentStore generated automatically.
     * It only applies if is configured with `perist: true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventSegmentModel#config-resourceIds)
     */
    resourceIds: string[]|number[]
    /**
     * The array of [resources](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/ResourceModel) which are assigned to this event.
     */
    resources: SchedulerResourceModel[]
    /**
     * The start date of a time span (or Event / Task).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventSegmentModel#config-startDate)
     */
    startDate: string|Date
    /**
     * Set this field to `false` to opt out of [sticky event content](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/StickyEvents)
     * (keeping event text in view while scrolling).
     */
    stickyContents: boolean
    /**
     * A CSS style string (applied to `style.cssText`) or object (applied to `style`)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventSegmentModel#config-style)
     */
    style: string
    /**
     * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventSegmentModel#config-timeZone)
     */
    timeZone: string|number|null
}

/**
 * This class represents an individual segment of a split event.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventSegmentModel)
 */
export class EventSegmentModel extends TimeSpan {
    /**
     * A field marking event as all day(s) spanning event.
     * For example, a holiday day may be represented by a `startDate`, and the `allDay` flag.
     */
    allDay: boolean
    /**
     * Returns all assignments for the event. Event must be part of the store for this method to work.
     */
    readonly assignments: SchedulerAssignmentModel[]
    /**
     * Specify false to prevent the event from being dragged (if EventDrag feature is used)
     */
    draggable: boolean
    /**
     * The numeric part of the timespan's duration (the number of units).
     */
    duration: number
    /**
     * The end date of a time span (or Event / Task).
     */
    endDate: string|Date
    /**
     * The event this segment belongs to.
     */
    readonly event: EventModel
    /**
     * Controls the primary color of the event. For available standard colors, see
     * [EventColor](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/mixin/EventModelMixin#typedef-EventColor).
     */
    eventColor: EventColor|string|null
    /**
     * Controls this events appearance, see Schedulers
     * [eventStyle config](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventStyle) for
     * available options.
     */
    eventStyle: 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the [duration](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/mixin/EventModelMixin#field-duration) and
     * [durationUnit](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/TimeSpan#field-durationUnit) fields.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * The unique identifier of a task (mandatory)
     */
    id: string|number
    /**
     * Indicates if the task is complete (its [percent completion](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone) is 100% (or greater)).
     */
    isCompleted: boolean
    /**
     * Returns true if event can be drag and dropped
     */
    isDraggable: boolean
    /**
     * Indicates if the task is in progress (its [percent completion](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone) is greater than zero and less than 100%).
     */
    isInProgress: boolean
    /**
     * Flag which indicates that this event is an interday event. This means that it spans
     * an entire day or multiple days.
     */
    readonly isInterDay: boolean
    /**
     * Returns false if the event is not persistable. By default it always is, override this getter if you need
     * custom logic.
     */
    readonly isPersistable: boolean
    /**
     * Returns true if event can be resized, but can additionally return 'start' or 'end' indicating how this event can
     * be resized.
     */
    readonly isResizable: boolean|string
    /**
     * Indicates if the task is started (its [percent completion](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone) is greater than zero).
     */
    isStarted: boolean
    /**
     * Width (in px) to use for this milestone when using Scheduler#milestoneLayoutMode 'data'.
     */
    milestoneWidth: number
    /**
     * The current status of a task, expressed as the percentage completed (integer from 0 to 100)
     */
    percentDone: number
    /**
     * Returns all predecessor dependencies of this event
     */
    readonly predecessors: DependencyBaseModel[]
    /**
     * Human-friendly rounding. When task is completed &lt; 99%, it rounds the value. It floors value between 99 and 100, to not
     * show task as completed when it is for example 99.51% done.
     */
    renderedPercentDone: number
    /**
     * Specify `false` to prevent the event from being resized (if EventResize feature is used). You can also
     * specify `'start'` or `'end'` to only allow resizing in one direction
     */
    resizable: boolean|string
    /**
     * Returns the first assigned resource, or assigns a resource
     */
    resource: SchedulerResourceModel
    /**
     * Id of the resource this event is associated with (only usable for single assignments). We recommend
     * using assignments in an AssignmentStore over this approach. Internally any Event using `resourceId`
     * will have an assignment in AssignmentStore generated.
     */
    resourceId: string|number
    /**
     * Ids of the resources this event is associated with (can be used for for multiple assignments).
     * Any event using `resourceIds` will have assignments in AssignmentStore generated automatically.
     * It only applies if is configured with `perist: true`.
     */
    resourceIds: string[]|number[]
    /**
     * Returns all resources assigned to an event.
     */
    readonly resources: SchedulerResourceModel[]
    /**
     * The start date of a time span (or Event / Task).
     */
    startDate: string|Date
    /**
     * Set this field to `false` to opt out of [sticky event content](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/StickyEvents)
     * (keeping event text in view while scrolling).
     */
    stickyContents: boolean
    /**
     * Returns all successor dependencies of this event
     */
    readonly successors: DependencyBaseModel[]
    /**
     * Alias for `event`, to better match naming in Gantt.
     */
    readonly task: EventModel
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<EventSegmentModelConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<EventSegmentModelConfig>, store?: Store, meta?: object);
    /**
     * Assigns this event to the specified resource.
     * @param {SchedulerResourceModel|string|number|SchedulerResourceModel[]|string[]|number[]} resource A new resource for this event, either as a full Resource record or an id (or an array of such).
     * @param {boolean|number} removeExistingAssignments `true` to first remove existing assignments
     */
    assign(resource: SchedulerResourceModel|string|number|SchedulerResourceModel[]|string[]|number[], removeExistingAssignments?: boolean|number): Promise<void>;
    /**
     * Returns either the resource associated with this event (when called w/o `resourceId`) or resource
     * with specified id.
     * @param {string} resourceId To retrieve a specific resource
     */
    getResource(resourceId?: string): SchedulerResourceModel;
    /**
     * Returns true if this event is assigned to a certain resource.
     * @param {SchedulerResourceModel|string|number} resource The resource to query for
     */
    isAssignedTo(resource: SchedulerResourceModel|string|number): boolean;
    /**
     * Defines if the given event field should be manually editable in UI.
     * You can override this method to provide your own logic.
     * @param {string} fieldName Name of the field
     */
    isEditable(fieldName: string): boolean;
    /**
     * Reassigns an event from an old resource to a new resource
     * @param {SchedulerResourceModel|string|number} oldResourceId A resource to unassign from or its id
     * @param {SchedulerResourceModel|string|number} newResourceId A resource to assign to or its id
     */
    reassign(oldResourceId: SchedulerResourceModel|string|number, newResourceId: SchedulerResourceModel|string|number): void;
    /**
     * Set value for the specified field(s), triggering engine calculations immediately. See
     * [Model#set()](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model#function-set) for arguments.
     * @param {string|object} field The field to set value for, or an object with multiple values to set in one call
     * @param {any} value Value to set
     * @param {boolean} silent Set to true to not trigger events. If event is recurring, occurrences won't be updated automatically.
     */
    setAsync(field: string|object, value?: any, silent?: boolean): Promise<void>;
    /**
     * Shift the dates for the date range by the passed amount and unit
     * @param {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} unit The unit to shift by, see [DateHelper](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DateHelper) for more information on valid formats.
     * @param {number} amount The amount to shift
     */
    shift(unit: 'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y', amount: number): Promise<any>;
    /**
     * Unassigns this event from the specified resource
     * @param {SchedulerResourceModel|string|number} resource The resource to unassign from.
     */
    unassign(resource?: SchedulerResourceModel|string|number): Promise<void>;
}

/**
 * Type with configuration options for [ProjectModel](https://bryntum.com/products/grid/docs/api/SchedulerPro/model/ProjectModel) class.
 */
type ProjectModelConfig = {
    /**
     * If this flag is set to `true` (default) when a start/end date is set on the event, a corresponding
     * `start-no-earlier/later-than` constraint is added, automatically. This is done in order to
     * keep the event "attached" to this date, according to the user intention.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-addConstraintOnDateSet)
     */
    addConstraintOnDateSet: boolean
    /**
     * This config manages DST correction in the scheduling engine. It only has effect when DST transition hour is
     * working time. Usually DST transition occurs on Sunday, so with non working weekends the DST correction logic
     * is not involved.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-adjustDurationToDST)
     */
    adjustDurationToDST: boolean
    /**
     * The constructor of the assignment model class, to be used in the project. Will be set as the
     * [modelClass](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-modelClass) property of the [assignmentStore](#SchedulerPro/model/ProjectModel#property-assignmentStore)
     */
    assignmentModelClass: typeof AssignmentModel
    /**
     * An [AssignmentStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore) instance or a config object.
     */
    assignmentStore: AssignmentStore|Partial<AssignmentStoreConfig>
    /**
     * The constructor to create an assignment store instance with. Should be a class, subclassing the
     * [AssignmentStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore)
     */
    assignmentStoreClass: typeof AssignmentStore
    /**
     * Data use to fill the [assignmentStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#property-assignmentStore). Should be an array of
     * [AssignmentModels](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/AssignmentModel) or its configuration objects.
     */
    assignments: AssignmentModel[]|Partial<AssignmentModelConfig>[]
    /**
     * The initial data, to fill the [assignmentStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#property-assignmentStore) with.
     * Should be an array of [AssignmentModels](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/AssignmentModel) or its configuration
     * objects.
     */
    assignmentsData: AssignmentModel[]
    /**
     * Specify `true` to automatically call [load](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) method on the next frame after creation.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-autoLoad)
     */
    autoLoad: boolean
    /**
     * `true` to automatically persist store changes after edits are made in any of the stores monitored.
     * Please note that sync request will not be invoked immediately but only after
     * [autoSyncTimeout](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSyncTimeout) interval.
     */
    autoSync: boolean
    /**
     * The timeout in milliseconds to wait before persisting changes to the server.
     * Used when [autoSync](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSync) is set to `true`.
     */
    autoSyncTimeout: number
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * The project calendar.
     */
    calendar: string|Partial<CalendarModelConfig>|CalendarModel
    /**
     * A [CalendarManagerStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore) instance or a config object.
     */
    calendarManagerStore: CalendarManagerStore|Partial<CalendarManagerStoreConfig>
    /**
     * The constructor to create a calendar store instance with. Should be a class, subclassing the
     * [CalendarManagerStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore)
     */
    calendarManagerStoreClass: typeof CalendarManagerStore
    /**
     * The constructor of the calendar model class, to be used in the project. Will be set as the
     * [modelClass](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-modelClass) property of the
     * [calendarManagerStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#property-calendarManagerStore)
     */
    calendarModelClass: typeof CalendarModel
    /**
     * Data use to fill the [eventStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#property-eventStore). Should be a [CalendarModel](#SchedulerPro/model/CalendarModel)
     * array or its configuration objects.
     */
    calendars: CalendarModel[]|Partial<CalendarModelConfig>[]
    /**
     * The initial data, to fill the [calendarManagerStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#property-calendarManagerStore) with.
     * Should be an array of [CalendarModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/CalendarModel) or it's configuration objects.
     */
    calendarsData: CalendarModel[]
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * Sets the list of stores controlled by the CRUD manager.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-crudStores)
     */
    crudStores: Store[]|string[]|CrudManagerStoreDescriptor[]
    /**
     * The number of days per month.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-daysPerMonth)
     */
    daysPerMonth: number
    /**
     * The number of days per week.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-daysPerWeek)
     */
    daysPerWeek: number
    /**
     * Enables early rendering in SchedulerPro, by postponing calculations to after the first refresh.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-delayCalculation)
     */
    delayCalculation: boolean
    /**
     * Data use to fill the [dependencyStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#property-dependencyStore). Should be an array of
     * [DependencyModels](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/DependencyModel) or its configuration objects.
     */
    dependencies: DependencyModel[]|Partial<DependencyModelConfig>[]
    /**
     * The source of the calendar for dependencies (the calendar used for taking dependencies lag into account).
     * Possible values are:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-dependenciesCalendar)
     */
    dependenciesCalendar: 'ToEvent'|'FromEvent'|'Project'
    /**
     * The initial data, to fill the [dependencyStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#property-dependencyStore) with.
     * Should be an array of [DependencyModels](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/DependencyModel) or its configuration
     * objects.
     */
    dependenciesData: DependencyModel[]
    /**
     * The constructor of the dependency model class, to be used in the project. Will be set as the
     * [modelClass](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-modelClass) property of the [dependencyStore](#SchedulerPro/model/ProjectModel#property-dependencyStore)
     */
    dependencyModelClass: typeof DependencyModel
    /**
     * A [DependencyStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore) instance or a config object.
     */
    dependencyStore: DependencyStore|Partial<DependencyStoreConfig>
    /**
     * The constructor to create a dependency store instance with. Should be a class, subclassing the
     * [DependencyStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore)
     */
    dependencyStoreClass: typeof DependencyStore
    /**
     * Set to `true` to enable calculation progress notifications.
     * When enabled the project fires [progress](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#event-progress) event.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-enableProgressNotifications)
     */
    enableProgressNotifications: boolean
    /**
     * Configuration of the JSON encoder used by the *Crud Manager*.
     */
    encoder: {
        requestData?: object
    }
    /**
     * The constructor of the event model class, to be used in the project. Will be set as the
     * [modelClass](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-modelClass) property of the [eventStore](#SchedulerPro/model/ProjectModel#property-eventStore)
     */
    eventModelClass: typeof EventModel
    /**
     * An [EventStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) instance or a config object.
     */
    eventStore: EventStore|Partial<EventStoreConfig>
    /**
     * The constructor to create an event store instance with. Should be a class, subclassing the
     * [EventStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore)
     */
    eventStoreClass: typeof EventStore
    /**
     * Data use to fill the [eventStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#property-eventStore). Should be an array of
     * [EventModels](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel) or its configuration objects.
     */
    events: EventModel[]|Partial<EventModelConfig>[]
    /**
     * The initial data, to fill the [eventStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#property-eventStore) with.
     * Should be an array of [EventModels](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel) or its configuration objects.
     */
    eventsData: EventModel[]
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * The number of hours per day.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-hoursPerDay)
     */
    hoursPerDay: number
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-id)
     */
    id: string|number
    /**
     * Project data as a JSON string, used to populate its stores.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-json)
     */
    json: string
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-listeners)
     */
    listeners: object
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-loadUrl)
     */
    loadUrl: string
    /**
     * Maximum range the project calendars can iterate.
     * The value is defined in milliseconds and by default equals `5 years` roughly.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-maxCalendarRange)
     */
    maxCalendarRange: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Field name to be used to transfer a phantom record identifier.
     */
    phantomIdField: string
    /**
     * Field name to be used to transfer a phantom parent record identifier.
     */
    phantomParentIdField: string
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * `True` to reset identifiers (defined by `idField` config) of phantom records before submitting them
     * to the server.
     */
    resetIdsBeforeSync: boolean
    /**
     * Set to `true` to reset the undo/redo queues of the internal [StateTrackingManager](https://bryntum.com/products/schedulerpro/docs/api/Core/data/stm/StateTrackingManager)
     * after the Project has loaded. Defaults to `false`
     */
    resetUndoRedoQueuesAfterLoad: boolean
    /**
     * Class implementing resource allocation report used by
     * [resource histogram](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram) and
     * [resource utilization](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization) views
     * for collecting resource allocation.
     */
    resourceAllocationInfoClass: ResourceAllocationInfo
    /**
     * The constructor of the resource model class, to be used in the project. Will be set as the
     * [modelClass](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-modelClass) property of the [resourceStore](#SchedulerPro/model/ProjectModel#property-resourceStore)
     */
    resourceModelClass: typeof ResourceModel
    /**
     * A [ResourceStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore) instance or a config object.
     */
    resourceStore: ResourceStore|Partial<ResourceStoreConfig>
    /**
     * The constructor to create a resource store instance with. Should be a class, subclassing the
     * [ResourceStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore)
     */
    resourceStoreClass: typeof ResourceStore
    /**
     * A [ResourceTimeRangeStore](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/ResourceTimeRangeStore) instance or a config object.
     */
    resourceTimeRangeStore: ResourceTimeRangeStore|Partial<ResourceTimeRangeStoreConfig>
    /**
     * The constructor to create a resource time range store instance with. Should be a class subclassing the
     * [ResourceTimeRangeStore](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/ResourceTimeRangeStore)
     */
    resourceTimeRangeStoreClass: typeof ResourceTimeRangeStore
    /**
     * Data use to fill the [resourceTimeRangeStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#property-resourceTimeRangeStore). Should be an array
     * of [ResourceTimeRangeModels](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/ResourceTimeRangeModel) or its configuration objects.
     */
    resourceTimeRanges: ResourceTimeRangeModel[]|Partial<ResourceTimeRangeModelConfig>[]
    /**
     * The initial data, to fill the [resourceTimeRangeStore](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/mixin/ProjectModelMixin#property-resourceTimeRangeStore) with.
     * Should be an array of [ResourceTimeRangeModel](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/ResourceTimeRangeModel) or it's
     * configuration objects.
     */
    resourceTimeRangesData: ResourceTimeRangeModel[]
    /**
     * Data use to fill the [resourceStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#property-resourceStore). Should be an array of
     * [ResourceModels](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceModel) or its configuration objects.
     */
    resources: ResourceModel[]|Partial<ResourceModelConfig>[]
    /**
     * The initial data, to fill the [resourceStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#property-resourceStore) with.
     * Should be an array of [ResourceModels](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceModel) or its configuration objects.
     */
    resourcesData: ResourceModel[]
    /**
     * Silences propagations caused by the project loading.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-silenceInitialCommit)
     */
    silenceInitialCommit: boolean
    /**
     * When `true` the project's manually scheduled tasks adjust their duration by excluding the non-working time from it,
     * according to the calendar. However, this may lead to inconsistencies, when moving an event which both starts
     * and ends on the non-working time. For such cases you can disable this option.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-skipNonWorkingTimeInDurationWhenSchedulingManually)
     */
    skipNonWorkingTimeInDurationWhenSchedulingManually: boolean
    /**
     * When `true` the project manually scheduled tasks will adjust their proposed start/end dates
     * to skip non working time.
     */
    skipNonWorkingTimeWhenSchedulingManually: boolean
    /**
     * When `true` treats parsed responses without `success` property as successful.
     * In this mode a parsed response is treated as invalid if it has explicitly set `success : false`.
     */
    skipSuccessProperty: boolean
    /**
     * Configuration options to provide to the STM manager
     */
    stm: Partial<StateTrackingManagerConfig>|CoreStateTrackingManager
    /**
     * Name of a store property to retrieve store identifiers from. Make sure you have an instance of a
     * store to use it by id. Store identifier is used as a container name holding corresponding store data
     * while transferring them to/from the server. By default, `storeId` property is used. And in case a
     * container identifier has to differ this config can be used:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-storeIdProperty)
     */
    storeIdProperty: string
    /**
     * When `true` the Crud Manager does not require all updated and removed records to be mentioned in the
     * *sync* response. In this case response should include only server side changes.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-supportShortSyncResponse)
     */
    supportShortSyncResponse: boolean
    /**
     * An array of store identifiers sets an alternative sync responses apply order.
     * By default, the order in which sync responses are applied to the stores is the same as they
     * registered in. But in case of some tricky dependencies between stores this order can be changed:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-syncApplySequence)
     */
    syncApplySequence: string[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-syncUrl)
     */
    syncUrl: string
    /**
     * An [EventStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * A [Store](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store) instance or a config object.
     */
    timeRangeStore: Store|Partial<StoreConfig>
    /**
     * The constructor to create a time range store instance with. Should be a class subclassing the
     * [TimeRangeStore](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/TimeRangeStore)
     */
    timeRangeStoreClass: typeof TimeRangeStore
    /**
     * Data use to fill the [timeRangeStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#property-timeRangeStore). Should be an array of
     * [TimeSpans](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/TimeSpan) or its configuration objects.
     */
    timeRanges: TimeSpan[]|Partial<TimeSpanConfig>[]
    /**
     * The initial data, to fill the [timeRangeStore](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/mixin/ProjectModelMixin#property-timeRangeStore) with.
     * Should be an array of [TimeSpan](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/TimeSpan) or its configuration objects.
     */
    timeRangesData: TimeSpan[]
    /**
     * Set to a IANA time zone (i.e. `Europe/Stockholm`) or a UTC offset in minutes (i.e. `-120`). This will
     * convert all events, tasks and time ranges to the specified time zone or offset. It will also affect the
     * displayed timeline's headers as well at the start and end date of it.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-timeZone)
     */
    timeZone: string|number
    /**
     * If `true`, project [changes](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#property-changes) API will also report project model changes: start/end date,
     * calendar, effort, duration, etc.
     */
    trackProjectModelChanges: boolean
    /**
     * When `true` forces the CRUD manager to process responses depending on their `type` attribute.
     * So `load` request may be responded with `sync` response for example.
     * Can be used for smart server logic allowing the server to decide when it's better to respond with a
     * complete data set (`load` response) or it's enough to return just a delta (`sync` response).
     */
    trackResponseType: boolean
    /**
     * Configuration of the AJAX requests used by *Crud Manager* to communicate with a server-side.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-transport)
     */
    transport: {
        load?: object
        sync?: object
    }
    /**
     * This config validates the response structure for requests made by the Crud Manager.
     * When `true`, the Crud Manager checks every parsed response structure for errors
     * and if the response format is invalid, a warning is logged to the browser console.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-validateResponse)
     */
    validateResponse: boolean
    /**
     * `true` to write all fields from the record to the server.
     * If set to `false` it will only send the fields that were modified.
     * Note that any fields that have [persist](https://bryntum.com/products/schedulerpro/docs/api/Core/data/field/DataField#config-persist) set to `false` will
     * still be ignored and fields having [alwaysWrite](https://bryntum.com/products/schedulerpro/docs/api/Core/data/field/DataField#config-alwaysWrite) set to `true`
     * will always be included.
     */
    writeAllFields: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before [load request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) is sent. Return `false` to cancel load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeLoad: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.options Options provided to the [load](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     */
    onBeforeLoadApply: ((event: { source: AbstractCrudManager, response: object, options: object }) => void)|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     */
    onBeforeResponseApply: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object }) => void)|string
    /**
     * Fires before a request is sent to the server.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#event-beforeSend)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.crudManager The CRUD manager.
     * @param {object} event.params HTTP request params to be passed in the request URL.
     * @param {'sync'|'load'} event.requestType CrudManager request type (`load`/`sync`)
     * @param {object} event.requestConfig Configuration object for Ajax request call
     */
    onBeforeSend: ((event: { crudManager: AbstractCrudManager, params: object, requestType: 'sync'|'load', requestConfig: object }) => Promise<void>)|string
    /**
     * Fires before [sync request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) is sent. Return `false` to cancel sync request.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#event-beforeSync)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeSync: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     */
    onBeforeSyncApply: ((event: { source: AbstractCrudManager, response: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when data in any of the projects stores changes.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#event-change)
     * @param {object} event Event object
     * @param {SchedulerProjectModel|any} event.source This project
     * @param {Store} event.store Affected store
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'updatemultiple'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: SchedulerProjectModel|any, store: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired when the Engine detects a computation cycle.
     * @param {object} event Event object
     * @param {object} event.schedulingIssue Scheduling error describing the case:
     * @param {Function} event.schedulingIssue.getDescription Returns the cycle description
     * @param {object} event.schedulingIssue.cycle Object providing the cycle info
     * @param {Function} event.schedulingIssue.getResolutions Returns possible resolutions
     * @param {Function} event.continueWithResolutionResult Function to call after a resolution is chosen to proceed with the Engine calculations: ```javascript project.on('cycle', ({ continueWithResolutionResult }) => {     // cancel changes in case of a cycle     continueWithResolutionResult(EffectResolutionResult.Cancel); }) ```
     */
    onCycle: ((event: { schedulingIssue: { getDescription: Function, cycle: object, getResolutions: Function }, continueWithResolutionResult: Function }) => void)|string
    /**
     * Fired when the engine has finished its calculations and the results has been written back to the records.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#event-dataReady)
     * @param {object} event Event object
     * @param {ProjectModel} event.source The project
     * @param {boolean} event.isInitialCommit Flag that shows if this commit is initial
     * @param {Set<any>} event.records Set of all [Model](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model)s that were modified in the completed transaction. Use the [modifications](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model#property-modifications) property of each Model to identify modified fields.
     */
    onDataReady: ((event: { source: ProjectModel, isInitialCommit: boolean, records: Set<any> }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the Engine detects a calendar misconfiguration when the calendar does
     * not provide any working periods of time which makes the calendar usage impossible.
     * @param {object} event Event object
     * @param {object} event.schedulingIssue Scheduling error describing the case:
     * @param {Function} event.schedulingIssue.getDescription Returns the error description
     * @param {Function} event.schedulingIssue.getCalendar Returns the calendar that must be fixed
     * @param {Function} event.schedulingIssue.getResolutions Returns possible resolutions
     * @param {Function} event.continueWithResolutionResult Function to call after a resolution is chosen to proceed with the Engine calculations: ```javascript project.on('emptyCalendar', ({ schedulingIssue, continueWithResolutionResult }) => {     // apply the first resolution and continue     schedulingIssue.getResolutions()[0].resolve();     continueWithResolutionResult(EffectResolutionResult.Resume); }) ```
     */
    onEmptyCalendar: ((event: { schedulingIssue: { getDescription: Function, getCalendar: Function, getResolutions: Function }, continueWithResolutionResult: Function }) => void)|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#event-hasChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onHasChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful [load request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) completion after data gets loaded to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onLoad: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fired after [load request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) was canceled by some [beforeLoad](#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad)
     * listener or due to incomplete prior load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onLoadCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires when a [load request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onLoadFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after [load](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) or [sync](#Scheduler/crud/AbstractCrudManagerMixin#function-sync) request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#event-noChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onNoChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fired during the Engine calculation if [enableProgressNotifications](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-enableProgressNotifications) config is `true`
     * @param {object} event Event object
     * @param {number} event.total The total number of operations
     * @param {number} event.remaining The number of remaining operations
     * @param {'storePopulation'|'propagating'} event.phase The phase of the calculation, either 'storePopulation' when data is getting loaded, or 'propagating' when data is getting calculated
     */
    onProgress: ((event: { total: number, remaining: number, phase: 'storePopulation'|'propagating' }) => void)|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onRequestDone: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseOptions: object }) => void)|string
    /**
     * Fires when a request fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onRequestFail: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fired when the Engine detects a scheduling conflict.
     * @param {object} event Event object
     * @param {object} event.schedulingIssue The conflict details:
     * @param {Function} event.schedulingIssue.getDescription Returns the conflict description
     * @param {object[]} event.schedulingIssue.intervals Array of conflicting intervals
     * @param {Function} event.schedulingIssue.getResolutions Function to get possible resolutions
     * @param {Function} event.continueWithResolutionResult Function to call after a resolution is chosen to proceed with the Engine calculations: ```javascript project.on('schedulingConflict', ({ schedulingIssue, continueWithResolutionResult }) => {     // apply the first resolution and continue     schedulingIssue.getResolutions()[0].resolve();     continueWithResolutionResult(EffectResolutionResult.Resume); }) ```
     */
    onSchedulingConflict: ((event: { schedulingIssue: { getDescription: Function, intervals: object[], getResolutions: Function }, continueWithResolutionResult: Function }) => void)|string
    /**
     * Fires on successful [sync request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) completion.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onSync: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) was canceled by some [beforeSync](#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync) listener.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onSyncCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) was delayed due to incomplete previous one.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.arguments The arguments of [sync](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    onSyncDelayed: ((event: { source: AbstractCrudManager, arguments: object }) => void)|string
    /**
     * Fires when a [sync request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onSyncFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
}

/**
 * Scheduler Pro Project model class - a central place for all data.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel)
 */
export class ProjectModel extends ProjectModelMixinClass {
    /**
     * If this flag is set to `true` (default) when a start/end date is set on the event, a corresponding
     * `start-no-earlier/later-than` constraint is added, automatically. This is done in order to
     * keep the event "attached" to this date, according to the user intention.
     */
    addConstraintOnDateSet: boolean
    /**
     * The [store](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore) holding the assignment information.
     */
    assignmentStore: AssignmentStore
    /**
     * Get/set [assignmentStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#property-assignmentStore) data.
     */
    assignments: AssignmentModel[]|Partial<AssignmentModelConfig>[]
    /**
     * The project calendar.
     */
    calendar: string|Partial<CalendarModelConfig>|CalendarModel
    /**
     * The [store](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/CalendarManagerStore) holding the calendar information.
     */
    calendarManagerStore: CalendarManagerStore
    /**
     * Get/set [calendarManagerStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#property-calendarManagerStore) data.
     */
    calendars: CalendarModel[]|Partial<CalendarModelConfig>[]
    /**
     * Returns current Project changes as an object consisting of added/modified/removed arrays of records for every
     * managed store. Returns `null` if no changes exist. Format:
     */
    readonly changes: object
    /**
     * The server revision stamp.
     * The *revision stamp* is a number which should be incremented after each server-side change.
     * This property reflects the current version of the data retrieved from the server and gets updated
     * after each [load](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) and [sync](#Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    readonly crudRevision: number
    /**
     * A list of registered stores whose server communication will be collected into a single batch.
     * Each store is represented by a *store descriptor*.
     */
    crudStores: CrudManagerStoreDescriptor[]
    /**
     * The number of days per month.
     */
    daysPerMonth: number
    /**
     * The number of days per week.
     */
    daysPerWeek: number
    /**
     * Get/set [dependencyStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#property-dependencyStore) data.
     */
    dependencies: DependencyModel[]|Partial<DependencyModelConfig>[]
    /**
     * The source of the calendar for dependencies (the calendar used for taking dependencies lag into account).
     * Possible values are:
     */
    dependenciesCalendar: 'ToEvent'|'FromEvent'|'Project'
    /**
     * The [store](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore) holding the dependency information.
     */
    dependencyStore: DependencyStore
    /**
     * Enables/disables the calculation progress notifications.
     */
    enableProgressNotifications: boolean
    /**
     * The [store](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) holding the event information.
     */
    eventStore: EventStore
    /**
     * Get/set [eventStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#property-eventStore) data.
     */
    events: EventModel[]|Partial<EventModelConfig>[]
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * The number of hours per day.
     */
    hoursPerDay: number
    /**
     * Returns `true` if changes tracking is suspended
     */
    readonly isChangeTrackingSuspended: boolean
    /**
     * Returns true if the crud manager is currently loading data
     */
    readonly isCrudManagerLoading: boolean
    /**
     * Returns true if the crud manager is currently syncing data
     */
    readonly isCrudManagerSyncing: boolean
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     */
    loadUrl: string
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: ProjectModel
    /**
     * The [store](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore) holding the resources that can be assigned to the
     * events in the event store.
     */
    resourceStore: ResourceStore
    /**
     * Get/set [resourceTimeRangeStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#property-resourceTimeRangeStore) data.
     */
    resourceTimeRanges: ResourceTimeRangeModel[]|Partial<ResourceTimeRangeModelConfig>[]
    /**
     * Get/set [resourceStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#property-resourceStore) data.
     */
    resources: ResourceModel[]|Partial<ResourceModelConfig>[]
    /**
     * When `true` the project's manually scheduled tasks adjust their duration by excluding the non-working time from it,
     * according to the calendar. However, this may lead to inconsistencies, when moving an event which both starts
     * and ends on the non-working time. For such cases you can disable this option.
     */
    skipNonWorkingTimeInDurationWhenSchedulingManually: boolean
    /**
     * When `true` the project manually scheduled tasks will adjust their proposed start/end dates
     * to skip non working time.
     */
    skipNonWorkingTimeWhenSchedulingManually: boolean
    /**
     * An array of stores presenting an alternative sync responses apply order.
     * Each store is represented by a *store descriptor*.
     */
    syncApplySequence: CrudManagerStoreDescriptor[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     */
    syncUrl: string
    /**
     * The [store](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) holding data on events.
     */
    readonly taskStore: EventStore
    /**
     * Get/set [timeRangeStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#property-timeRangeStore) data.
     */
    timeRanges: TimeSpan[]|Partial<TimeSpanConfig>[]
    /**
     * If `true`, project [changes](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#property-changes) API will also report project model changes: start/end date,
     * calendar, effort, duration, etc.
     */
    trackProjectModelChanges: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before [load request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) is sent. Return `false` to cancel load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeLoad: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.options Options provided to the [load](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     */
    onBeforeLoadApply: ((event: { source: AbstractCrudManager, response: object, options: object }) => void)|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     */
    onBeforeResponseApply: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object }) => void)|string
    /**
     * Fires before a request is sent to the server.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#event-beforeSend)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.crudManager The CRUD manager.
     * @param {object} event.params HTTP request params to be passed in the request URL.
     * @param {'sync'|'load'} event.requestType CrudManager request type (`load`/`sync`)
     * @param {object} event.requestConfig Configuration object for Ajax request call
     */
    onBeforeSend: ((event: { crudManager: AbstractCrudManager, params: object, requestType: 'sync'|'load', requestConfig: object }) => Promise<void>)|string
    /**
     * Fires before [sync request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) is sent. Return `false` to cancel sync request.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#event-beforeSync)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeSync: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     */
    onBeforeSyncApply: ((event: { source: AbstractCrudManager, response: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when data in any of the projects stores changes.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#event-change)
     * @param {object} event Event object
     * @param {SchedulerProjectModel|any} event.source This project
     * @param {Store} event.store Affected store
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'updatemultiple'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: SchedulerProjectModel|any, store: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired when the Engine detects a computation cycle.
     * @param {object} event Event object
     * @param {object} event.schedulingIssue Scheduling error describing the case:
     * @param {Function} event.schedulingIssue.getDescription Returns the cycle description
     * @param {object} event.schedulingIssue.cycle Object providing the cycle info
     * @param {Function} event.schedulingIssue.getResolutions Returns possible resolutions
     * @param {Function} event.continueWithResolutionResult Function to call after a resolution is chosen to proceed with the Engine calculations: ```javascript project.on('cycle', ({ continueWithResolutionResult }) => {     // cancel changes in case of a cycle     continueWithResolutionResult(EffectResolutionResult.Cancel); }) ```
     */
    onCycle: ((event: { schedulingIssue: { getDescription: Function, cycle: object, getResolutions: Function }, continueWithResolutionResult: Function }) => void)|string
    /**
     * Fired when the engine has finished its calculations and the results has been written back to the records.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#event-dataReady)
     * @param {object} event Event object
     * @param {ProjectModel} event.source The project
     * @param {boolean} event.isInitialCommit Flag that shows if this commit is initial
     * @param {Set<any>} event.records Set of all [Model](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model)s that were modified in the completed transaction. Use the [modifications](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model#property-modifications) property of each Model to identify modified fields.
     */
    onDataReady: ((event: { source: ProjectModel, isInitialCommit: boolean, records: Set<any> }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the Engine detects a calendar misconfiguration when the calendar does
     * not provide any working periods of time which makes the calendar usage impossible.
     * @param {object} event Event object
     * @param {object} event.schedulingIssue Scheduling error describing the case:
     * @param {Function} event.schedulingIssue.getDescription Returns the error description
     * @param {Function} event.schedulingIssue.getCalendar Returns the calendar that must be fixed
     * @param {Function} event.schedulingIssue.getResolutions Returns possible resolutions
     * @param {Function} event.continueWithResolutionResult Function to call after a resolution is chosen to proceed with the Engine calculations: ```javascript project.on('emptyCalendar', ({ schedulingIssue, continueWithResolutionResult }) => {     // apply the first resolution and continue     schedulingIssue.getResolutions()[0].resolve();     continueWithResolutionResult(EffectResolutionResult.Resume); }) ```
     */
    onEmptyCalendar: ((event: { schedulingIssue: { getDescription: Function, getCalendar: Function, getResolutions: Function }, continueWithResolutionResult: Function }) => void)|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#event-hasChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onHasChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful [load request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) completion after data gets loaded to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onLoad: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fired after [load request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) was canceled by some [beforeLoad](#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad)
     * listener or due to incomplete prior load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onLoadCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires when a [load request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onLoadFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after [load](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) or [sync](#Scheduler/crud/AbstractCrudManagerMixin#function-sync) request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#event-noChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onNoChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fired during the Engine calculation if [enableProgressNotifications](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-enableProgressNotifications) config is `true`
     * @param {object} event Event object
     * @param {number} event.total The total number of operations
     * @param {number} event.remaining The number of remaining operations
     * @param {'storePopulation'|'propagating'} event.phase The phase of the calculation, either 'storePopulation' when data is getting loaded, or 'propagating' when data is getting calculated
     */
    onProgress: ((event: { total: number, remaining: number, phase: 'storePopulation'|'propagating' }) => void)|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onRequestDone: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseOptions: object }) => void)|string
    /**
     * Fires when a request fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onRequestFail: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fired when the Engine detects a scheduling conflict.
     * @param {object} event Event object
     * @param {object} event.schedulingIssue The conflict details:
     * @param {Function} event.schedulingIssue.getDescription Returns the conflict description
     * @param {object[]} event.schedulingIssue.intervals Array of conflicting intervals
     * @param {Function} event.schedulingIssue.getResolutions Function to get possible resolutions
     * @param {Function} event.continueWithResolutionResult Function to call after a resolution is chosen to proceed with the Engine calculations: ```javascript project.on('schedulingConflict', ({ schedulingIssue, continueWithResolutionResult }) => {     // apply the first resolution and continue     schedulingIssue.getResolutions()[0].resolve();     continueWithResolutionResult(EffectResolutionResult.Resume); }) ```
     */
    onSchedulingConflict: ((event: { schedulingIssue: { getDescription: Function, intervals: object[], getResolutions: Function }, continueWithResolutionResult: Function }) => void)|string
    /**
     * Fires on successful [sync request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) completion.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onSync: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) was canceled by some [beforeSync](#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync) listener.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onSyncCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) was delayed due to incomplete previous one.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.arguments The arguments of [sync](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    onSyncDelayed: ((event: { source: AbstractCrudManager, arguments: object }) => void)|string
    /**
     * Fires when a [sync request](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onSyncFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ProjectModelConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<ProjectModelConfig>, store?: Store, meta?: object);
    /**
     * Accepts all changes in all stores, resets the modification tracking:
     */
    acceptChanges(): void;
    /**
     * Adds a store to the collection.
     * @param {Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[]} store A store or list of stores. Each store might be specified by its instance, `storeId` or *descriptor*.
     * @param {number} position The relative position of the store. If `fromStore` is specified the position will be taken relative to it. If not specified then store(s) will be appended to the end of collection. Otherwise, it will be just a position in stores collection. ```javascript // insert stores store4, store5 to the start of collection crudManager.addCrudStore([ store4, store5 ], 0); ```
     * @param {string|Store|CrudManagerStoreDescriptor} fromStore The store relative to which position should be calculated. Can be defined as a store identifier, instance or descriptor (the result of [getStoreDescriptor](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor) call). ```javascript // insert store6 just before a store having storeId equal to 'foo' crudManager.addCrudStore(store6, 0, 'foo');  // insert store7 just after store3 store crudManager.addCrudStore(store7, 1, store3); ```
     */
    addCrudStore(store: Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig|string} config An object containing listener definitions, or the event name to listen for
     * @param {object|Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    addListener(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Adds a store to the alternative sync responses apply sequence.
     * By default, the order in which sync responses are applied to the stores is the same as they registered in.
     * But this order can be changes either on construction step using [syncApplySequence](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-syncApplySequence) option
     * or by calling this method.
     * @param {Store|CrudManagerStoreDescriptor|Store[]|CrudManagerStoreDescriptor[]} store The store to add or its *descriptor* (or array of stores or descriptors).
     * @param {number} position The relative position of the store. If `fromStore` is specified the position will be taken relative to it. If not specified then store(s) will be appended to the end of collection. Otherwise, it will be just a position in stores collection. ```javascript // insert stores store4, store5 to the start of sequence crudManager.addStoreToApplySequence([ store4, store5 ], 0); ```
     * @param {string|Store|CrudManagerStoreDescriptor} fromStore The store relative to which position should be calculated. Can be defined as a store identifier, instance or its descriptor (the result of [getStoreDescriptor](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor) call). ```javascript // insert store6 just before a store having storeId equal to 'foo' crudManager.addStoreToApplySequence(store6, 0, 'foo');  // insert store7 just after store3 store crudManager.addStoreToApplySequence(store7, 1, store3); ```
     */
    addStoreToApplySequence(store: Store|CrudManagerStoreDescriptor|Store[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Applies a set of changes, as an object keyed by store id, to the affected stores. This function is intended
     * to use in apps that handle their own data syncing, it is not needed when using the CrudManager approach.
     * @param {object} changes Changeset to apply, an object keyed by store id where each value follows the format described in [applyChangeset](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#function-applyChangeset)
     * @param {Function} transformFn Optional function used to preprocess a changeset per store in a different format, should return an object with the format expected by [applyChangeset](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#function-applyChangeset)
     * @param {string} phantomIdField Field used by the backend when communicating a record being assigned a proper id instead of a phantom id
     */
    applyChangeset(changes: object, transformFn?: Function, phantomIdField?: string): void;
    /**
     * Allows to apply changes from one project to another. For method to produce correct results, projects should be
     * isomorphic - they should use same models and store configuration, also data in source and target projects
     * should be identical before changes to the source project are made and applied to the target project.
     * This method is meant to apply changes in real time - as source project is changed, changes should be applied to
     * the target project before it is changed.
     * When changes are applied all changes are committed and project is recalculated, which means target project
     * won't have any local changes after.
     * @param {object} changes Project [changes](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#property-changes) object
     */
    applyProjectChanges(changes: object): Promise<any>;
    /**
     * Cancels a sent request.
     * @param {Promise<any>} requestPromise The Promise object wrapping the Request to be cancelled. The *requestPromise* is the value returned from the corresponding [sendRequest](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/transport/AjaxTransport#function-sendRequest) call.
     */
    cancelRequest(requestPromise: Promise<any>): void;
    /**
     * Project changes (CRUD operations to records in its stores) are automatically committed on a buffer to the
     * underlying graph based calculation engine. The engine performs it calculations async.
     */
    commitAsync(): Promise<void>;
    /**
     * Returns `true` if any of registered stores (or some particular store) has non persisted changes.
     * @param {string|Store} storeId The store identifier or store instance to check changes for. If not specified then will check changes for all of the registered stores.
     */
    crudStoreHasChanges(storeId?: string|Store): boolean;
    /**
     * Decodes (parses) a *JSON* response string to an object. If parsing fails, it returns null.
     * Supposed to be overridden in case data provided by server has to be transformed into format requested by the *Crud Manager*.
     * @param {string} responseText The response text to decode.
     */
    decode(responseText: string): object;
    /**
     * Encodes a request object to *JSON* encoded string. If encoding fails (due to circular structure), it returns null.
     * Supposed to be overridden in case data provided by the *Crud Manager* has to be transformed into format requested by server.
     * @param {object} requestData The request to encode.
     */
    encode(requestData: object): string;
    /**
     * Returns a registered store.
     * @param {string} storeId Store identifier.
     */
    getCrudStore(storeId: string): Store;
    /**
     * Returns a registered store descriptor.
     * @param {string|Store} storeId The store identifier or registered store instance.
     */
    getStoreDescriptor(storeId: string|Store): CrudManagerStoreDescriptor;
    /**
     * Check if any listener is registered for the specified eventName
     * @param {string} eventName
     */
    hasListener(eventName: string): boolean;
    /**
     * Loads data to the stores registered in the crud manager. For example:
     * @param {object|string} options The request parameters or a URL.
     */
    load(options?: {
        request?: object
    }|string): Promise<any>;
    /**
     * Loads data to the Crud Manager
     * @param {object} response A simple object representing the data. The object structure matches the decoded `load` response structure: ```javascript // load static data into crudManager crudManager.loadCrudManagerData({     success   : true,     resources : {         rows : [             { id : 1, name : 'John' },             { id : 2, name : 'Abby' }         ]     } }); ```
     * @param {object} options Extra data loading options.
     */
    loadCrudManagerData(response: object, options?: object): void;
    /**
     * Alias for [addListener](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/Events#function-addListener). Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig|string} config An object containing listener definitions, or the event name to listen for
     * @param {object|Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    on(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name
     * before relaying, for example add -&gt; storeAdd
     * @param {EventsClass} through Object to relay the events through, needs to mix Events mixin in
     * @param {string} prefix Prefix to add to event name
     * @param {boolean} transformCase Specify false to prevent making first letter of event name uppercase
     */
    relayAll(through: EventsClass, prefix: string, transformCase?: boolean): void;
    /**
     * Removes all listeners registered to this object by the application.
     */
    removeAllListeners(): void;
    /**
     * Removes a store from collection. If the store was registered in alternative sync sequence list
     * it will be removed from there as well.
     * @param {CrudManagerStoreDescriptor|string|Store} store The store to remove. Either the store descriptor, store identifier or store itself.
     */
    removeCrudStore(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Removes an event listener. Same API signature as [addListener](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/Events#function-addListener)
     * @param {object|string} config A config object or the event name
     * @param {object|Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    removeListener(config: object|string, thisObj: object|Function, oldThisObj: object): void;
    /**
     * Removes a store from the alternative sync sequence.
     * @param {CrudManagerStoreDescriptor|string|Store} store The store to remove. Either the store descriptor, store identifier or store itself.
     */
    removeStoreFromApplySequence(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Resumes automatic sync upon store changes. Will schedule a sync if the internal counter is 0.
     * @param {boolean} doSync Pass `true` to schedule a sync after resuming (if there are pending changes) and `false` to not persist the changes.
     */
    resumeAutoSync(doSync?: boolean): void;
    /**
     * Resumes [hasChanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#event-hasChanges) and [noChanges](#Scheduler/crud/AbstractCrudManagerMixin#event-noChanges) events. By default, it will check for changes
     * and if there are any, `hasChanges` or `noChanges` event will be triggered.
     * @param {boolean} skipChangeCheck
     */
    resumeChangeTracking(skipChangeCheck?: boolean): void;
    /**
     * Resume event triggering after a call to [suspendEvents()](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/Events#function-suspendEvents). If any triggered events were queued they will be triggered.
     */
    resumeEvents(): boolean;
    /**
     * Reverts all changes in all stores and re-inserts any records that were removed locally. Any new uncommitted
     * records will be removed.
     */
    revertChanges(): void;
    /**
     * Sends a *Crud Manager* request to the server.
     * @param {object} request The request configuration object having following properties:
     */
    sendRequest(request: {
        type: 'load'|'sync'
        url: string
        data: string
        params: object
        success: Function
        failure: Function
        thisObj: object
    }): Promise<any>;
    /**
     * Suspends automatic sync upon store changes. Can be called multiple times (it uses an internal counter).
     */
    suspendAutoSync(): void;
    /**
     * Suspends [hasChanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#event-hasChanges) and [noChanges](#Scheduler/crud/AbstractCrudManagerMixin#event-noChanges) events.
     */
    suspendChangeTracking(): void;
    /**
     * Prevents events from being triggered until [resumeEvents()](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/Events#function-resumeEvents) is called. Optionally queues events that are triggered while
     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.
     * @param {boolean} queue Specify true to queue events triggered while suspended
     */
    suspendEvents(queue?: boolean): void;
    /**
     * Persists changes made on the registered stores to the server and/or receives changes made on the backend.
     * Usage:
     */
    sync(): Promise<any>;
    /**
     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener
     * makes function return false.
     * @param {string} eventName Event name for which to trigger listeners
     * @param {{bubbles?: boolean, [key: string]: any}} param Single parameter passed on to listeners, source property will be added to it (this)
     */
    trigger(eventName: string, param?: {bubbles?: boolean, [key: string]: any}): Promise<boolean|any>;
    /**
     * Shorthand for [removeListener](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/Events#function-removeListener)
     * @param {object|string} config A config object or the event name
     * @param {object|Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    un(config: object|string, thisObj?: object|Function, oldThisObj?: object): void;
}

/**
 * Type with configuration options for [ResourceModel](https://bryntum.com/products/grid/docs/api/SchedulerPro/model/ResourceModel) class.
 */
type ResourceModelConfig = {
    /**
     * Margin between stacked event bars for this resource, in px.
     */
    barMargin: number
    /**
     * The calendar, assigned to the entity. Allows you to set the time when entity can perform the work.
     */
    calendar: CalendarModel|string
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class (or several classes divided by space) to append to row elements
     */
    cls: string
    /**
     * Base width of this resource, in px. If not set, the `columnWidth` specified in
     * the Scheduler's configured [resourceColumns](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/Scheduler#config-resourceColumns) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceModel#config-columnWidth)
     */
    columnWidth: number
    /**
     * Controls the primary color used for events assigned to this resource. Can be overridden per event using
     * EventModels [eventColor config](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventColor). Also, see
     * Schedulers [eventColor config](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventColor).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceModel#config-eventColor)
     */
    eventColor: EventColor
    /**
     * Specify this to use a resource specific event layout in horizontal mode, see
     * [eventLayout](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventLayout) for options.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceModel#config-eventLayout)
     */
    eventLayout: 'stack'|'pack'|'mixed'|'none'
    /**
     * Controls the style used for events assigned to this resource. Can be overridden per event using
     * EventModels [eventStyle config](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventStyle). See Schedulers
     * [eventStyle config](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventStyle) for available
     * options.
     */
    eventStyle: string
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * A link to use for this record when rendered into a [TreeColumn](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/TreeColumn).
     */
    href: string
    /**
     * Icon for row (used automatically in tree, feel free to use it in renderer in other cases)
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceModel#config-id)
     */
    id: string|number
    /**
     * Image name relative to [resourceImagePath](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-resourceImagePath),
     * used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     * Set value to `false` to disable image display.
     */
    image: string|boolean
    /**
     * Fully qualified image URL, used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     */
    imageUrl: string
    /**
     * Get or set resource name
     */
    name: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * Control how much space to leave between the first event/last event and the resources edge (top/bottom
     * margin within the resource row in horizontal mode, left/right margin within the resource column in
     * vertical mode), in px.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceModel#config-resourceMargin)
     */
    resourceMargin: number|Partial<ResourceMarginConfig>
    /**
     * Used by the default implementation of [getRowHeight](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#config-getRowHeight) to determine row
     * height. Set it to use another height than the default for a the records row.
     */
    rowHeight: number
    /**
     * The target to use if this tree node provides a value for the [href](https://bryntum.com/products/schedulerpro/docs/api/Grid/data/GridRowModel#field-href) field.
     */
    target: '_self'|'_blank'|'_parent'|'_top'|null
}

/**
 * This class represent a single Resource in Scheduler Pro, usually added to a [ResourceStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore).
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceModel)
 */
export class ResourceModel extends GridRowModel {
    /**
     * Returns all assignments for the resource
     */
    assignments: AssignmentModel[]
    /**
     * Margin between stacked event bars for this resource, in px.
     */
    barMargin: number
    /**
     * The calendar, assigned to the entity. Allows you to set the time when entity can perform the work.
     */
    calendar: CalendarModel|string
    /**
     * Base width of this resource, in px. If not set, the `columnWidth` specified in
     * the Scheduler's configured [resourceColumns](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/Scheduler#config-resourceColumns) is used.
     */
    columnWidth: number
    /**
     * Controls the primary color used for events assigned to this resource. Can be overridden per event using
     * EventModels [eventColor config](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventColor). Also, see
     * Schedulers [eventColor config](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventColor).
     */
    eventColor: EventColor
    /**
     * Specify this to use a resource specific event layout in horizontal mode, see
     * [eventLayout](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventLayout) for options.
     */
    eventLayout: 'stack'|'pack'|'mixed'|'none'
    /**
     * Controls the style used for events assigned to this resource. Can be overridden per event using
     * EventModels [eventStyle config](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventStyle). See Schedulers
     * [eventStyle config](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventStyle) for available
     * options.
     */
    eventStyle: string
    /**
     * Get associated events
     */
    readonly events: EventModel[]
    /**
     * Unique identifier
     */
    id: string|number
    /**
     * Image name relative to [resourceImagePath](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-resourceImagePath),
     * used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     * Set value to `false` to disable image display.
     */
    image: string|boolean
    /**
     * Fully qualified image URL, used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     */
    imageUrl: string
    /**
     * Returns the initials (first letter of the first &amp; last space-separated word in the name) or an empty string
     * if this resource has no name. You can override this method in a ResourceModel subclass to provide your own implementation
     */
    readonly initials: string
    /**
     * Returns `true` if the resource can be persisted.
     * In a flat store, a resource is always considered persistable. In a tree store, a resource is considered
     * persistable if its parent node is persistable.
     */
    readonly isPersistable: boolean
    /**
     * Get or set resource name
     */
    name: string
    /**
     * Control how much space to leave between the first event/last event and the resources edge (top/bottom
     * margin within the resource row in horizontal mode, left/right margin within the resource column in
     * vertical mode), in px.
     */
    resourceMargin: number|Partial<ResourceMarginConfig>
    /**
     * Base height of this resource, in px. When unset, Schedulers configured rowHeight is used.
     */
    rowHeight: number
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ResourceModelConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<ResourceModelConfig>, store?: Store, meta?: object);
    /**
     * Returns the resource calendar.
     */
    getCalendar(): CalendarModel;
    /**
     * Returns an array of events, associated with this resource
     * @deprecated 5.3.6 Use the events property instead
     */
    getEvents(): SchedulerEventModel[];
    /**
     * Set value for the specified field(s), triggering engine calculations immediately. See
     * [Model#set()](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model#function-set) for arguments.
     * @param {string|object} field The field to set value for, or an object with multiple values to set in one call
     * @param {any} value Value to set
     * @param {boolean} silent Set to true to not trigger events automatically.
     */
    setAsync(field: string|object, value?: any, silent?: boolean): Promise<void>;
    /**
     * Sets the calendar of the task. Will cause the schedule to be updated - returns a `Promise`
     * @param {CalendarModel} calendar The new calendar. Provide `null` to use the project calendar.
     */
    setCalendar(calendar: CalendarModel): Promise<void>;
    /**
     * Unassigns this Resource from all its Events
     */
    unassignAll(): void;
}

/**
 * Type with configuration options for [ResourceUtilizationModel](https://bryntum.com/products/grid/docs/api/SchedulerPro/model/ResourceUtilizationModel) class.
 */
type ResourceUtilizationModelConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceUtilizationModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Icon for the corresponding row.
     * If the model represents an assignment the field value is
     * automatically set to the assigned event [iconCls](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#field-iconCls).
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceUtilizationModel#config-id)
     */
    id: string|number
    /**
     * Name of the represented resource or the assigned event.
     * If the model represents an assignment the field value is
     * automatically set to the assigned event [name](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#field-name).
     */
    name: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * A resource or an assignment wrapped by this model.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceUtilizationModel#config-origin)
     */
    origin: ResourceModel|AssignmentModel
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceUtilizationModel#config-readOnly)
     */
    readOnly: boolean
}

/**
 * A model representing a [ResourceUtilization](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization) view row.
 * The view rows are of two possible types <strong>resources</strong> and <strong>assignments</strong>.
 * The model wraps either a resource or an assignment model. And each wrapped resource keeps its corresponding
 * wrapped assignments as its <strong>children</strong>.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceUtilizationModel)
 */
export class ResourceUtilizationModel extends Model {
    /**
     * Icon for the corresponding row.
     * If the model represents an assignment the field value is
     * automatically set to the assigned event [iconCls](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#field-iconCls).
     */
    iconCls: string
    /**
     * Name of the represented resource or the assigned event.
     * If the model represents an assignment the field value is
     * automatically set to the assigned event [name](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#field-name).
     */
    name: string
    /**
     * A resource or an assignment wrapped by this model.
     */
    readonly origin: ResourceModel|AssignmentModel
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ResourceUtilizationModelConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<ResourceUtilizationModelConfig>, store?: Store, meta?: object);
}

/**
 * Type with configuration options for [VersionModel](https://bryntum.com/products/grid/docs/api/SchedulerPro/model/VersionModel) class.
 */
type VersionModelConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/VersionModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * A serializable object snapshot of the [ProjectModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel) at the point in time when the
     * version was created.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/VersionModel#config-content)
     */
    content: object
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/VersionModel#config-id)
     */
    id: string|number
    /**
     * Whether this version was auto-saved.
     */
    isAutosave: boolean
    /**
     * The name of the version. When an auto-saved version's `name` is `null`, the version description
     * will return a default text description instead.
     */
    name: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/VersionModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * The timestamp when the version was created.
     */
    savedAt: Date
}

/**
 * Represents a snapshot of a [ProjectModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel) at a point in time.
 * Each VersionModel has an associated set of [changes](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/changelog/ChangeLogTransactionModel) that describe the
 * user-initiated modifications to the project that happened since the previous version was captured.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/VersionModel)
 */
export class VersionModel extends Model {
    /**
     * A serializable object snapshot of the [ProjectModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel) at the point in time when the
     * version was created.
     */
    content: object
    /**
     * Whether this version was auto-saved.
     */
    isAutosave: boolean
    /**
     * The name of the version. When an auto-saved version's `name` is `null`, the version description
     * will return a default text description instead.
     */
    name: string
    /**
     * The timestamp when the version was created.
     */
    savedAt: Date
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<VersionModelConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<VersionModelConfig>, store?: Store, meta?: object);
}

/**
 * An immutable, serializable object that describes an action that affected a single entity.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/changelog/ChangeLogAction)
 */
export class ChangeLogAction {
    /**
     * The type of change.
     */
    readonly actionType: 'add'|'remove'|'update'
    /**
     * A descriptor for the entity (object) affected by this action.
     */
    readonly entity: ChangeLogEntity
}

/**
 * An immutable, serializable object that describes a resource assignment entity instance.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/changelog/ChangeLogAssignmentEntity)
 */
export class ChangeLogAssignmentEntity extends ChangeLogEntity {
    /**
     * The event to which the assignment was made.
     */
    readonly event: ChangeLogEntity
    /**
     * The resource that was assigned.
     */
    readonly resource: ChangeLogEntity
}

/**
 * An immutable, serializable object that describes a dependency entity instance.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/changelog/ChangeLogDependencyEntity)
 */
export class ChangeLogDependencyEntity extends ChangeLogEntity {
    /**
     * The 'from' task of the dependency.
     */
    readonly fromTask: ChangeLogEntity
    /**
     * The 'to' task of the dependency.
     */
    readonly toTask: ChangeLogEntity
}

/**
 * An immutable, serializable object that describes an entity instance (for example, a single task).
 * ChangeLogEntity instances appear in change log entries to indicate which entity was affected by
 * a [ChangeLogAction](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/changelog/ChangeLogAction).
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/changelog/ChangeLogEntity)
 */
export class ChangeLogEntity {
    /**
     * The unique id of the entity instance, e.g. 'TaskModel-1'.
     */
    readonly id: string
    /**
     * A user-friendly name for the entity instance, e.g. 'My important task'.
     */
    readonly name: string
    /**
     * The name of the Model type of the entity, e.g. 'TaskModel'.
     */
    readonly type: string
}

/**
 * An immutable, serializable object that describes an update to a single object property from one value to another.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/changelog/ChangeLogPropertyUpdate)
 */
export class ChangeLogPropertyUpdate {
    /**
     * The property's value after the action.
     */
    readonly after: string|number|object
    /**
     * The property's value before the action.
     */
    readonly before: string|number|object
    /**
     * A descriptor for the entity (object) affected by this action.
     */
    readonly property: string
}

/**
 * Type with configuration options for [ChangeLogTransactionModel](https://bryntum.com/products/grid/docs/api/SchedulerPro/model/changelog/ChangeLogTransactionModel) class.
 */
type ChangeLogTransactionModelConfig = {
    /**
     * The [ChangeLogAction](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/changelog/ChangeLogAction)s that this transaction comprises.
     */
    actions: ChangeLogAction[]
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/changelog/ChangeLogTransactionModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * An optional, custom text description of the transaction.
     */
    description: string
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/changelog/ChangeLogTransactionModel#config-id)
     */
    id: string|number
    /**
     * The date and time when the transaction started.
     */
    occurredAt: Date
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/changelog/ChangeLogTransactionModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * The ID of the version to which this transaction belongs, or null if the transaction
     * is not yet associated with any version.
     */
    versionId: string
}

/**
 * Represents a set of changes made as a result of a single user action. Changelog transactions may
 * optionally be associated with a single VersionModel.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/changelog/ChangeLogTransactionModel)
 */
export class ChangeLogTransactionModel extends Model {
    /**
     * The [ChangeLogAction](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/changelog/ChangeLogAction)s that this transaction comprises.
     */
    actions: ChangeLogAction[]
    /**
     * An optional, custom text description of the transaction.
     */
    description: string
    /**
     * The date and time when the transaction started.
     */
    occurredAt: Date
    /**
     * The ID of the version to which this transaction belongs, or null if the transaction
     * is not yet associated with any version.
     */
    versionId: string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ChangeLogTransactionModelConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<ChangeLogTransactionModelConfig>, store?: Store, meta?: object);
}

/**
 * Type with configuration options for [PercentDoneMixin](https://bryntum.com/products/grid/docs/api/SchedulerPro/model/mixin/PercentDoneMixin) class.
 */
type PercentDoneMixinClassConfig = {
    /**
     * The current status of a task, expressed as the percentage completed (integer from 0 to 100)
     */
    percentDone: number
}

export class PercentDoneMixinClass {
    /**
     * Indicates if the task is complete (its [percent completion](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone) is 100% (or greater)).
     */
    isCompleted: boolean
    /**
     * Indicates if the task is in progress (its [percent completion](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone) is greater than zero and less than 100%).
     */
    isInProgress: boolean
    /**
     * Indicates if the task is started (its [percent completion](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone) is greater than zero).
     */
    isStarted: boolean
    /**
     * The current status of a task, expressed as the percentage completed (integer from 0 to 100)
     */
    percentDone: number
    /**
     * Human-friendly rounding. When task is completed &lt; 99%, it rounds the value. It floors value between 99 and 100, to not
     * show task as completed when it is for example 99.51% done.
     */
    renderedPercentDone: number
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<PercentDoneMixinClassConfig>} config
     */
    constructor(config?: Partial<PercentDoneMixinClassConfig>);
}

export const PercentDoneMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & PercentDoneMixinClass>

export class ProjectChangeHandlerMixinClass {
    /**
     * Allows to apply changes from one project to another. For method to produce correct results, projects should be
     * isomorphic - they should use same models and store configuration, also data in source and target projects
     * should be identical before changes to the source project are made and applied to the target project.
     * This method is meant to apply changes in real time - as source project is changed, changes should be applied to
     * the target project before it is changed.
     * When changes are applied all changes are committed and project is recalculated, which means target project
     * won't have any local changes after.
     * @param {object} changes Project [changes](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/crud/AbstractCrudManagerMixin#property-changes) object
     */
    applyProjectChanges(changes: object): Promise<any>;
}

export const ProjectChangeHandlerMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & ProjectChangeHandlerMixinClass>

type ResourceHistogramFeaturesType = {
    cellCopyPaste: CellCopyPaste
    cellEdit: CellEdit
    cellMenu: CellMenu
    cellTooltip: CellTooltip
    columnAutoWidth: ColumnAutoWidth
    columnDragToolbar: ColumnDragToolbar
    columnLines: ColumnLines
    columnPicker: ColumnPicker
    columnRename: ColumnRename
    columnReorder: ColumnReorder
    columnResize: ColumnResize
    excelExporter: GridExcelExporter
    fileDrop: FileDrop
    fillHandle: FillHandle
    filter: Filter
    filterBar: FilterBar
    group: Group
    groupSummary: GroupSummary
    headerMenu: HeaderMenu
    headerZoom: HeaderZoom
    mergeCells: MergeCells
    nonWorkingTime: NonWorkingTime
    pan: Pan
    pdfExport: GridPdfExport
    print: GridPrint
    quickFind: QuickFind
    regionResize: RegionResize
    resourceMenu: ResourceMenu
    resourceNonWorkingTime: ResourceNonWorkingTime
    resourceTimeRanges: ResourceTimeRanges
    rowCopyPaste: RowCopyPaste
    rowExpander: RowExpander
    rowReorder: RowReorder
    rowResize: GridRowResize
    scheduleTooltip: ScheduleTooltip
    search: Search
    sort: Sort
    split: Split
    stickyCells: StickyCells
    stripe: Stripe
    summary: Summary
    timeAxisHeaderMenu: TimeAxisHeaderMenu
    timeRanges: TimeRanges
    timeSpanHighlight: TimeSpanHighlight
    tree: Tree
    treeGroup: TreeGroup
}

type ResourceHistogramFeaturesConfigType = {
    cellCopyPaste: string|boolean|Partial<CellCopyPasteConfig>
    cellEdit: string|boolean|Partial<CellEditConfig>
    cellMenu: string|boolean|Partial<CellMenuConfig>
    cellTooltip: string|boolean|Partial<CellTooltipConfig>
    columnAutoWidth: string|boolean|Partial<ColumnAutoWidthConfig>
    columnDragToolbar: string|boolean|Partial<ColumnDragToolbarConfig>
    columnLines: string|boolean|Partial<ColumnLinesConfig>
    columnPicker: string|boolean|Partial<ColumnPickerConfig>
    columnRename: string|boolean|Partial<ColumnRenameConfig>
    columnReorder: string|boolean|Partial<ColumnReorderConfig>
    columnResize: string|boolean|Partial<ColumnResizeConfig>
    excelExporter: string|boolean|Partial<GridExcelExporterConfig>
    fileDrop: string|boolean|Partial<FileDropConfig>
    fillHandle: string|boolean|Partial<FillHandleConfig>
    filter: string|boolean|Partial<FilterConfig>
    filterBar: string|boolean|Partial<FilterBarConfig>
    group: string|boolean|Partial<GroupConfig>
    groupSummary: string|boolean|Partial<GroupSummaryConfig>
    headerMenu: string|boolean|Partial<HeaderMenuConfig>
    headerZoom: string|boolean|Partial<HeaderZoomConfig>
    mergeCells: string|boolean|Partial<MergeCellsConfig>
    nonWorkingTime: string|boolean|Partial<NonWorkingTimeConfig>
    pan: string|boolean|Partial<PanConfig>
    pdfExport: string|boolean|Partial<GridPdfExportConfig>
    print: string|boolean|Partial<GridPrintConfig>
    quickFind: string|boolean|Partial<QuickFindConfig>
    regionResize: string|boolean|Partial<RegionResizeConfig>
    resourceMenu: string|boolean|Partial<ResourceMenuConfig>
    resourceNonWorkingTime: string|boolean|Partial<ResourceNonWorkingTimeConfig>
    resourceTimeRanges: string|boolean|Partial<ResourceTimeRangesConfig>
    rowCopyPaste: string|boolean|Partial<RowCopyPasteConfig>
    rowExpander: string|boolean|Partial<RowExpanderConfig>
    rowReorder: string|boolean|Partial<RowReorderConfig>
    rowResize: string|boolean|Partial<GridRowResizeConfig>
    scheduleTooltip: string|boolean|Partial<ScheduleTooltipConfig>
    search: string|boolean|Partial<SearchConfig>
    sort: string|boolean|Partial<SortConfig>
    split: string|boolean|Partial<SplitConfig>
    stickyCells: string|boolean|Partial<StickyCellsConfig>
    stripe: string|boolean|Partial<StripeConfig>
    summary: string|boolean|Partial<SummaryConfig>
    timeAxisHeaderMenu: string|boolean|Partial<TimeAxisHeaderMenuConfig>
    timeRanges: string|boolean|Partial<TimeRangesConfig>
    timeSpanHighlight: string|boolean|Partial<TimeSpanHighlightConfig>
    tree: string|boolean|Partial<TreeConfig>
    treeGroup: string|boolean|Partial<TreeGroupConfig>
}

/**
 * Type with configuration options for [ResourceHistogram](https://bryntum.com/products/grid/docs/api/SchedulerPro/view/ResourceHistogram) class.
 */
type ResourceHistogramConfig = ContainerItemConfig & {
    type: 'resourcehistogram'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * A function used for aggregating child records histogram data entries to their parent entry.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-aggregateDataEntry)
     * @param {object} aggregateDataEntry.aggregated Target parent data entry to aggregate the entry into.
     * @param {object} aggregateDataEntry.entry Current entry to aggregate into `aggregated`.
     * @param {number} aggregateDataEntry.arrayIndex Index of current array (index of the record among other records being aggregated).
     * @param {<Object>} aggregateDataEntry.entryIndex Index of `entry` in the current array.
     * @returns {object} Return value becomes the value of the `aggregated` parameter on the next invocation of this function.
     */
    aggregateDataEntry: ((aggregateDataEntry: { aggregated: object, entry: object, arrayIndex: number, entryIndex: object[] }) => object)|string
    /**
     * When `true` the component will automatically calculate data for group records
     * based on the groups members data by calling [getGroupRecordHistogramData](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineHistogramGrouping#function-getGroupRecordHistogramData) method.
     */
    aggregateHistogramDataForGroups: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * Keep the tooltip open if user moves the mouse over it.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-allowOver)
     */
    allowOver: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Set to true to anchor tooltip to the triggering target. If set to `false`, the tooltip
     * will align to the mouse position. When set to `false`, it will also set `anchor: false`
     * to hide anchor arrow.
     */
    anchorToTarget: boolean
    /**
     * Set to `false` to prevent remove row animation and remove the delay related to that.
     */
    animateRemovingRows: boolean
    /**
     * When the [Tree](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/Tree) feature is in use and the Store is a tree store, this
     * config may be set to `true` to visually animate branch node expand and collapse operations.
     * *This is not supported in Scheduler and Gantt*
     */
    animateTreeNodeToggle: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * You can set this option to `false` to make the timeline panel start and end on the exact provided
     * [startDate](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-startDate)/[endDate](#Scheduler/view/TimelineBase#config-endDate) w/o adjusting them.
     */
    autoAdjustTimeAxis: boolean
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#function-hide) when the user clicks or
     * taps outside its widget. Configure as `false` to make a Tooltip non-transient when user clicks outside it.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-autoClose)
     */
    autoClose: boolean
    /**
     * Automatically set grids height to fit all rows (no scrolling in the grid). In general you should avoid
     * using `autoHeight: true`, since it will bypass Grids virtual rendering and render all rows at once, which
     * in a larger grid is really bad for performance.
     */
    autoHeight: boolean
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#function-hide) when the mouse exits the target
     * element. Configure as `false` to make a Tooltip non-transient.
     */
    autoHide: boolean
    /**
     * Show immediately when created
     */
    autoShow: boolean
    /**
     * Update assigned [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * Controls how much space to leave between stacked event bars in px.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-barMargin)
     */
    barMargin: number
    /**
     * Default time unit used for displaying resources effort in bars.
     * Yet the effective time unit used might change dynamically when zooming in the histogram
     * so its ticks unit gets smaller than the default unit.
     * Please use [barTipEffortUnit](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-barTipEffortUnit) to customize default units for tooltips
     * (or [effortUnit](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-effortUnit) to customize both texts and tooltips default units).
     */
    barTextEffortUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * Default time unit used when displaying resources effort in tooltips.
     * Yet the effective time unit used might change dynamically when zooming in the histogram
     * so its ticks unit gets smaller than the default unit.
     * Please use [barTextEffortUnit](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-barTextEffortUnit) to customize default units for bar texts
     * (or [effortUnit](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-effortUnit) to customize both texts and tooltips default units).
     */
    barTipEffortUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * A Function which returns the tooltip text to display when hovering a bar.
     * The following parameters are passed:
     * @param {object} context The tooltip context info
     * @param {ResourceAllocationInterval} context.datum The histogram bar being hovered info
     * @param {Tooltip} context.tip The tooltip instance
     * @param {HTMLElement} context.element The Element for which the Tooltip is monitoring mouse movement
     * @param {HTMLElement} context.activeTarget The target element that triggered the show
     * @param {Event} context.event The raw DOM event
     * @param {ResourceModel} data.record The record which effort the hovered bar displays.
     * @returns {string} Tooltip HTML content
     */
    barTooltipTemplate: (context: { datum: ResourceAllocationInterval, tip: Tooltip, element: HTMLElement, activeTarget: HTMLElement, event: Event }, data: { record: ResourceModel }) => string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-bbar)
     */
    bbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-bodyCls)
     */
    bodyCls: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * This config defines the size of the start and end invisible parts of the timespan when [infiniteScroll](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineScroll#config-infiniteScroll) set to `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-bufferCoef)
     */
    bufferCoef: number
    /**
     * This config defines the scroll limit, which, when exceeded will cause a timespan shift.
     * The limit is calculated as the `panelWidth * [bufferCoef](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineScroll#config-bufferCoef) * bufferThreshold`. During scrolling, if the left or right side
     * has less than that of the rendered content - a shift is triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-bufferThreshold)
     */
    bufferThreshold: number
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Show a tool in the header to close this Popup, and allow `ESC` close it.
     * The tool is available in the [tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Toolable#property-tools) object
     * under the name `close`. It uses the CSS class `b-popup-close` to apply a
     * default close icon. This may be customized with your own CSS rules.
     */
    closable: boolean
    /**
     * The action to take when calling the [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) method.
     * By default, the popup is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-closeAction)
     */
    closeAction: 'hide'|'destroy'
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-cls)
     */
    cls: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-collapsible)
     */
    collapsible: boolean|Partial<PanelCollapserConfig>|Partial<PanelCollapserOverlayConfig>
    /**
     * Set to `false` to not show column lines. End result might be overruled by/differ between themes.
     */
    columnLines: boolean
    /**
     * Accepts column definitions for the grid during initialization. They will be used to create
     * [Column](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column) instances that are added to a [ColumnStore](#Grid/data/ColumnStore).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-columns)
     */
    columns: ColumnStore|Partial<GridColumnConfig>[]|Partial<ColumnStoreConfig>
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Event which is used to show context menus.
     * Available options are: 'contextmenu', 'click', 'dblclick'.
     */
    contextMenuTriggerEvent: 'contextmenu'|'click'|'dblclick'
    /**
     * Supply a [CrudManager](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/CrudManager) instance or a config object if you want to use
     * CrudManager for handling data.
     */
    crudManager: Partial<CrudManagerConfig>|CrudManager
    /**
     * Class that should be used to instantiate a CrudManager in case it's provided as a simple object to
     * [crudManager](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerStores#config-crudManager) config.
     */
    crudManagerClass: typeof CrudManager
    /**
     * Convenient shortcut to set data in grids store both during initialization and at runtime. Can also be
     * used to retrieve data at runtime, although we do recommend interacting with Grids store instead using
     * the [store](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#property-store) property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-data)
     */
    data: object[]|Model[]
    /**
     * Record field from which the histogram data will be collected.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-dataModelField)
     */
    dataModelField: string
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * Region to which columns are added when they have none specified
     */
    defaultRegion: string
    /**
     * Generic resource image, used when provided `imageUrl` or `image` fields or path calculated from resource
     * name are all invalid. If left blank, resource name initials will be shown when no image can be loaded.
     */
    defaultResourceImageName: string
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * true to destroy the store when the grid is destroyed
     */
    destroyStore: boolean
    /**
     * Configure as `true` to destroy the Project and stores when `this` is destroyed.
     */
    destroyStores: boolean
    /**
     * Set to `true` to not get a warning when using another base class than GridRowModel for your grid data. If
     * you do, and would like to use the full feature set of the grid then include the fields from GridRowModel
     * in your model definition.
     */
    disableGridRowModelWarning: boolean
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * The time (in milliseconds) that the Tooltip should stay visible for when it shows over its
     * target. If the tooltip is anchored to its target, then moving the mouse during this time
     * resets the timer so that the tooltip will remain visible.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-dismissDelay)
     */
    dismissDelay: number
    /**
     * Defines how dates will be formatted in tooltips etc. This config has priority over similar config on the
     * view preset. For allowed values see [format](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DateHelper#function-format-static).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-displayDateFormat)
     */
    displayDateFormat: string
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * Decimal precision used when displaying durations, used by tooltips and DurationColumn.
     * Specify `false` to use raw value
     */
    durationDisplayPrecision: number|boolean
    /**
     * Effort value format string.
     * Must be a template supported by [NumberFormat](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/util/NumberFormat) class.
     */
    effortFormat: string
    /**
     * Default time unit to display resources effort values.
     * The value is used as default when displaying effort in tooltips and bars text.
     * Yet the effective time unit used might change dynamically when zooming in the histogram
     * so its ticks unit gets smaller than the default unit.
     * Please use [barTipEffortUnit](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-barTipEffortUnit) to customize default units for tooltips only
     * and [barTextEffortUnit](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-barTextEffortUnit) to customize default units in bar texts.
     */
    effortUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * Text or HTML to display when there is no data to display in the grid
     */
    emptyText: string
    /**
     * Set to `false` if you don't want event bar DOM updates to animate.
     */
    enableEventAnimations: boolean
    /**
     * Enables showing occurrences of recurring events across the scheduler's time axis.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-enableRecurringEvents)
     */
    enableRecurringEvents: boolean
    /**
     * Configure this as `true` to allow elements within cells to be styled as `position: sticky`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-enableSticky)
     */
    enableSticky: boolean
    /**
     * Set to true to allow text selection in the grid cells. Note, this cannot be used simultaneously with the
     * `RowReorder` feature.
     */
    enableTextSelection: boolean
    /**
     * Set to true to listen for CTRL-Z (CMD-Z on Mac OS) keyboard event and trigger undo (redo when SHIFT is
     * pressed). Only applicable when using a [StateTrackingManager](https://bryntum.com/products/schedulerpro/docs/api/Core/data/stm/StateTrackingManager).
     */
    enableUndoRedoKeys: boolean
    /**
     * The end date of the timeline (if not configure with [infiniteScroll](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-infiniteScroll)).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-endDate)
     */
    endDate: Date|string
    /**
     * The name of the end date parameter that will be passed to in every `eventStore` load request.
     */
    endParamName: string
    /**
     * Event color used by default. Events and resources can specify their own color, with priority order being:
     * Event -&gt; Resource -&gt; Scheduler default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-eventColor)
     */
    eventColor: EventColor
    /**
     * Event style used by default. Events and resources can specify their own style, with priority order being:
     * Event -&gt; Resource -&gt; Scheduler default. Determines the appearance of the event by assigning a CSS class
     * to it. Available styles are:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-eventStyle)
     */
    eventStyle: 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null
    /**
     * An object containing Feature configuration objects (or `true` if no configuration is required)
     * keyed by the Feature class name in all lowercase.
     */
    features: Partial<ResourceHistogramFeaturesConfigType>
    /**
     * Set to `true` to stretch the last column in a grid with all fixed width columns
     * to fill extra available space if the grid's width is wider than the sum of all
     * configured column widths.
     */
    fillLastColumn: boolean
    /**
     * Specify `true` to force rendered events/tasks to fill entire ticks. This only affects rendering, start
     * and end dates retain their value on the data level.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-fillTicks)
     */
    fillTicks: boolean
    /**
     * Use fixed row height. Setting this to `true` will configure the underlying RowManager to use fixed row
     * height, which sacrifices the ability to use rows with variable height to gain a fraction better
     * performance.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-fixedRowHeight)
     */
    fixedRowHeight: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * By default a Popup is focused when it is shown.
     * Configure this as `false` to prevent automatic focus on show.
     */
    focusOnToFront: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-footer)
     */
    footer: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * DOM element to attach tooltip to. By default, the mouse entering this element will kick off a timer
     * (see [hoverDelay](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#config-hoverDelay)) to show itself.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-forElement)
     */
    forElement: HTMLElement
    /**
     * A CSS selector which targets child elements of the [forElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#config-forElement) that should produce a
     * tooltip when hovered over.
     */
    forSelector: string
    /**
     * Set to `true` to force the time columns to fit to the available space (horizontal or vertical depends on mode).
     * Note that setting [suppressFit](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-suppressFit) to `true`, will disable `forceFit` functionality. Zooming
     * cannot be used when `forceFit` is set.
     */
    forceFit: boolean
    /**
     * Refresh entire row when a record changes (`true`) or, if possible, only the cells affected (`false`).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-fullRowRefresh)
     */
    fullRowRefresh: boolean
    /**
     * A Function which returns the text to render inside a bar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-getBarText)
     * @param {ResourceAllocationInterval} datum The datum being rendered
     * @param {number} index The index of the datum being rendered
     * @returns {string} Text to render inside the bar
     */
    getBarText: (datum: ResourceAllocationInterval, index: number) => string
    /**
     * A Function which returns the tooltip text to display when hovering a bar.
     * The following parameters are passed:
     * @param {HistogramSeries} series The series being rendered
     * @param {DomConfig} rectConfig The rectangle configuration object
     * @param {object} datum The datum being rendered
     * @param {number} index The index of the datum being rendered
     * @deprecated Since 5.0.0. Please use [barTooltipTemplate](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineHistogramBase#config-barTooltipTemplate)
     */
    getBarTip: (series: HistogramSeries, rectConfig: DomConfig, datum: object, index: number) => void
    /**
     * Function that extracts a record histogram data entry for aggregating.
     * By default it returns the entry as is. Override the function if you need a more complex way
     * to retrieve the value for aggregating.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-getDataEntryForAggregating)
     * @param {object} getDataEntryForAggregating.entry Current data entry.
     * @returns {object} Entry to aggregate
     */
    getDataEntryForAggregating: ((getDataEntryForAggregating: { entry: object }) => object)|string
    /**
     * A method, or the *name* of a method called to update the tooltip's content when the
     * cursor is moved over a target. It receives one argument containing context about the
     * tooltip and show operation. The function should return a string, or a Promise yielding
     * a string.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-getHtml)
     * @param {object} context
     * @param {Tooltip} context.tip The tooltip instance
     * @param {HTMLElement} context.element The Element for which the Tooltip is monitoring mouse movement
     * @param {HTMLElement} context.activeTarget The target element that triggered the show
     * @param {Event} context.event The raw DOM event
     * @returns {string|Promise}
     */
    getHtml: ((context: { tip: Tooltip, element: HTMLElement, activeTarget: HTMLElement, event: Event }) => string|Promise<any>)|string
    /**
     * A Function which returns a CSS class name to add to a path element
     * built for an `outline` type series.
     * The following parameters are passed:
     * @param {HistogramSeries} series The series being rendered
     * @param {<Object>} data The series data
     * @param {HistogramRenderData} renderData Current render data giving access to the record, row and cell being rendered.
     * @returns {string} CSS class name of the path element
     */
    getOutlineClass: (series: HistogramSeries, data: object[], renderData: HistogramRenderData) => string
    /**
     * A function, or name of a function which builds histogram data for the provided record.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-getRecordData)
     * @param {Model} getRecordData.record Record to get histogram data for.
     * @param {object} aggregationContext Context object passed in case the data is being retrieved as a part of some parent record data collecting.
     * @returns {object} Histogram data.
     */
    getRecordData: ((getRecordData: { record: Model }, aggregationContext?: object) => object)|string
    /**
     * A Function which returns a CSS class name to add to a rectangle element.
     * The following parameters are passed:
     * @param {HistogramSeries} series The series being rendered
     * @param {DomConfig} rectConfig The rectangle configuration object
     * @param {object} datum The datum being rendered
     * @param {number} index The index of the datum being rendered
     * @param {HistogramRenderData} renderData Current render data giving access to the record, row and cell being rendered.
     * @returns {string} CSS classes of the rectangle element
     */
    getRectClass: (series: HistogramSeries, rectConfig: DomConfig, datum: object, index: number, renderData: HistogramRenderData) => string
    /**
     * A function called for each row to determine its height. It is passed a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) and
     * expected to return the desired height of that records row. If the function returns a falsy value, Grids
     * configured [rowHeight](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#config-rowHeight) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-getRowHeight)
     * @param {Model} getRowHeight.record Record to determine row height for
     * @returns {number} Desired row height
     */
    getRowHeight: (getRowHeight: { record: Model }) => number
    /**
     * When set to `true` (default) the component reacts on time axis changes
     * (zooming or changing the displayed time span), clears the histogram data cache of the records
     * and then refreshes the view.
     */
    hardRefreshOnTimeAxisReconfigure: boolean
    /**
     * A config [object](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-header)
     */
    header: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * The time (in milliseconds) for which the Tooltip remains visible when the mouse leaves the target.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-hideDelay)
     */
    hideDelay: number|boolean
    /**
     * Set to `true` to hide the footer elements
     */
    hideFooters: boolean
    /**
     * Set to `true` to hide the column header elements
     */
    hideHeaders: boolean
    /**
     * Set to `true` to hide the Grid's horizontal scrollbar(s)
     */
    hideHorizontalScrollbar: boolean
    /**
     * By default, when moving rapidly from target to target, if, when mouseovering
     * a new target, the tip is still visible, the tooltip does not hide, it remains
     * visible, but updates its content however it is configured to do so.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-hideOnDelegateChange)
     */
    hideOnDelegateChange: boolean
    /**
     * By default the row hover effect is not visible in the Scheduler part of the grid.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-hideRowHover)
     */
    hideRowHover: boolean
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * An instance or a configuration object of the underlying [Histogram](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/graph/Histogram)
     * component that is used under the hood to render actual charts.
     * In case a configuration object is provided the built class is defined with
     * [histogramWidgetClass](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineHistogramBase#config-histogramWidgetClass) config.
     */
    histogramWidget: Histogram|Partial<HistogramConfig>
    /**
     * The class used for building the [histogram widget](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineHistogramBase#property-histogramWidget)
     */
    histogramWidgetClass: Histogram
    /**
     * The amount of time to hover before showing
     */
    hoverDelay: number
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Set to `true` to ignore reacting to DOM events (mouseover/mouseout etc) while scrolling. Useful if you
     * want to maximize scroll performance.
     */
    ignoreDomEventsWhileScrolling: boolean
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set to `true` to include inactive tasks allocation and `false` to not take such tasks into account.
     */
    includeInactiveEvents: boolean
    /**
     * Configure as `true` to automatically adjust the panel timespan during scrolling in the time dimension,
     * when the scroller comes close to the start/end edges.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-infiniteScroll)
     */
    infiniteScroll: boolean
    /**
     * A function that initializes a target group record entry.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-initAggregatedDataEntry)
     * @returns {object} Target aggregated entry
     */
    initAggregatedDataEntry: (() => object)|string
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * See [Keyboard shortcuts](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/Grid#keyboard-shortcuts) for details
     */
    keyMap: Record<string, string>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-listeners)
     */
    listeners: object
    /**
     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object, or a message to be shown when a store is performing a remote
     * operation, or Crud Manager is loading data from the sever. Set to `null` to disable default load mask.
     */
    loadMask: string|Partial<MaskConfig>|null
    /**
     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when data is loading. The message and optional configuration from the
     * [loadMask](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/LoadMaskable#config-loadMask) config take priority over these options, just as they do
     * for `maskDefaults`, respectively.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-loadMaskDefaults)
     */
    loadMaskDefaults: Partial<MaskConfig>
    /**
     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when an error occurs loading data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-loadMaskError)
     */
    loadMaskError: Partial<MaskConfig>|Mask|boolean
    /**
     * The message to show while an async tooltip is fetching its content.
     */
    loadingMsg: string
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Time in ms until a longpress is triggered
     */
    longPressTime: number
    /**
     * When `true`, events are sized and positioned based on rowHeight, resourceMargin and barMargin settings.
     * Set this to `false` if you want to control height and vertical position using CSS instead.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-managedEventSizing)
     */
    managedEventSizing: boolean
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * Grids change the `maskDefaults` to cover only their `body` element.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The maximum time axis unit to display non-working ranges for ('hour' or 'day' etc).
     * When zooming to a view with a larger unit, no non-working time elements will be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-maxTimeAxisUnit)
     */
    maxTimeAxisUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * The maximum zoom level to which [zoomIn](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomIn) will work. Defaults to the number of
     * [ViewPresets](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/ViewPreset) available, see [presets](#Scheduler/view/mixin/TimelineViewPresets#property-presets)
     * for information. Unless you have modified the collection of available presets, the max zoom level is
     * milliseconds.
     */
    maxZoomLevel: number
    /**
     * Show a tool in the header to maximize this popup
     */
    maximizable: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized: boolean
    /**
     * Grid's `min-height`. Defaults to `10em` to be sure that the Grid always has a height wherever it is
     * inserted.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-minHeight)
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * The minimum zoom level to which [zoomOut](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomOut) will work. Defaults to 0 (year ticks)
     */
    minZoomLevel: number
    /**
     * Optionally show an opaque mask below this Popup when shown.
     * Configure this as `true` to show the mask.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-modal)
     */
    modal: boolean|{
        closeOnMaskTap?: boolean
        transparent?: boolean
    }
    /**
     * Grid monitors window resize by default.
     */
    monitorResize: boolean
    /**
     * Horizontal offset from mouse when [anchorToTarget](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-mouseOffsetX)
     */
    mouseOffsetX: number
    /**
     * Vertical offset from mouse when [anchorToTarget](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`
     */
    mouseOffsetY: number
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-owner)
     */
    owner: Widget
    /**
     * Partners this Timeline panel with another Timeline in order to sync their region sizes (sub-grids like locked, normal will get the same width),
     * start and end dates, view preset, zoom level and scrolling position. All these values will be synced with the timeline defined as the `partner`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-partner)
     */
    partner: TimelineBase
    /**
     * Set to true to include `startDate` and `endDate` params indicating the currently viewed date range.
     * Dates are formatted using the same format as the `startDate` field on the EventModel
     * (e.g. 2023-03-08T00:00:00+01:00).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-passStartEndParameters)
     */
    passStartEndParameters: boolean
    /**
     * Specify plugins (an array of classes) in config
     */
    plugins: Function[]
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-positioned)
     */
    positioned: boolean
    /**
     * True to preserve focused cell after loading new data
     */
    preserveFocusOnDatasetChange: boolean
    /**
     * Preserve the grid's vertical scroll position when changesets are applied, as in the case of remote
     * changes, or when stores are configured with [syncDataOnLoad](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-syncDataOnLoad).
     */
    preserveScroll: PreserveScrollOptions|boolean
    /**
     * Specify `true` to preserve vertical scroll position after store actions that trigger a `refresh` event,
     * such as loading new data and filtering.
     */
    preserveScrollOnDatasetChange: boolean
    /**
     * An array of [ViewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/ViewPreset) config objects
     * which describes the available timeline layouts for this scheduler.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-presets)
     */
    presets: Partial<ViewPresetConfig>[]
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * A [ProjectModel](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/ProjectModel) instance or a config object. The project holds all Scheduler data.
     * Can be omitted in favor of individual store configs or [crudManager](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerStores#config-crudManager) config.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-project)
     */
    project: Partial<ProjectModel|ProjectModelConfig>
    /**
     * Set to `true` to make the grid read-only, by disabling any UIs for modifying data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-ref)
     */
    ref: string
    /**
     * Set to `false` to only measure cell contents when double clicking the edge between column headers.
     */
    resizeToFitIncludesHeader: boolean
    /**
     * A config object used to configure the resource columns in vertical mode.
     * See [ResourceHeader](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/ResourceHeader) for more details on available properties.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-resourceColumns)
     */
    resourceColumns: Partial<ResourceHeaderConfig>
    /**
     * Resource image extension, used when creating image path from resource name.
     */
    resourceImageExtension: string
    /**
     * Path to load resource images from. Used by the resource header in vertical mode and the
     * [ResourceInfoColumn](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/column/ResourceInfoColumn) in horizontal mode. Set this to display miniature
     * images for each resource using their `image` or `imageUrl` fields.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-resourceImagePath)
     */
    resourceImagePath: string
    /**
     * Control how much space to leave between the first event/last event and the resources edge (top/bottom
     * margin within the resource row in horizontal mode, left/right margin within the resource column in
     * vertical mode), in px. Defaults to the value of [barMargin](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/Scheduler#config-barMargin).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-resourceMargin)
     */
    resourceMargin: number|Partial<ResourceMarginConfig>
    /**
     * Resource time ranges store instance or config object for [ResourceTimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ResourceTimeRanges) feature.
     */
    resourceTimeRangeStore: ResourceTimeRangeStore|Partial<ResourceTimeRangeStoreConfig>
    /**
     * Inline resource time ranges, will be loaded into an internally created store if
     * [ResourceTimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ResourceTimeRanges) is enabled.
     */
    resourceTimeRanges: ResourceTimeRangeModel[]|Partial<ResourceTimeRangeModelConfig>[]
    /**
     * "Break points" for which responsive config to use for columns and css.
     */
    responsiveLevels: Record<string, number|string>
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Row height in pixels. This allows the default height for rows to be controlled. Note that it may be
     * overriden by specifying a [rowHeight](https://bryntum.com/products/schedulerpro/docs/api/Grid/data/GridRowModel#field-rowHeight) on a per record basis, or from
     * a column [renderer](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column#config-renderer).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-rowHeight)
     */
    rowHeight: number
    /**
     * Set to `false` to not show row lines. End result might be overruled by/differ between themes.
     */
    rowLines: boolean
    /**
     * An object with configuration for the [ScaleColumn](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/column/ScaleColumn).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-scaleColumn)
     */
    scaleColumn: object
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Configuration values for the [ScrollManager](https://bryntum.com/products/schedulerpro/docs/api/Core/util/ScrollManager) class on initialization. Returns the
     * [ScrollManager](https://bryntum.com/products/schedulerpro/docs/api/Core/util/ScrollManager) at runtime.
     */
    scrollManager: Partial<ScrollManagerConfig>|ScrollManager
    /**
     * Configures whether the grid is scrollable in the `Y` axis. This is used to configure a [GridScroller](https://bryntum.com/products/schedulerpro/docs/api/Grid/util/GridScroller).
     * See the [scrollerClass](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#config-scrollerClass) config option.
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * The class to instantiate to use as the [scrollable](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#config-scrollable). Defaults to [GridScroller](#Grid/util/GridScroller).
     */
    scrollerClass: typeof Scroller
    /**
     * The selection settings, where you can set these boolean flags to control what is selected. Options below:
     * @param {boolean} selectionMode.cell Set to `true` to enable cell selection. This takes precedence over row selection, but rows can still be selected programmatically or with checkbox or RowNumber selection. Required for `column` selection
     * @param {boolean} selectionMode.multiSelect Allow multiple selection with ctrl and shift+click or with `checkbox` selection. Required for `dragSelect` and `column` selection
     * @param {boolean|CheckColumnConfig} selectionMode.checkbox Set to `true` to add a checkbox selection column to the grid, or pass a config object for the [CheckColumn](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/CheckColumn)
     * @param {number|string} selectionMode.checkboxIndex Positions the checkbox column at the provided index or to the right of a provided column id. Defaults to 0 or to the right of an included `RowNumberColumn`
     * @param {boolean} selectionMode.checkboxOnly Select rows only when clicking in the checkbox column. Requires cell selection config to be `false` and checkbox to be set to `true`. This setting was previously named `rowCheckboxSelection`
     * @param {boolean} selectionMode.showCheckAll Set to `true` to add a checkbox to the selection column header to select/deselect all rows. Requires checkbox to also be set to `true`
     * @param {boolean} selectionMode.deselectFilteredOutRecords Set to `true` to deselect records when they are filtered out
     * @param {boolean|string} selectionMode.includeChildren Set to `true` to also select/deselect child nodes when a parent node is selected by toggling the checkbox. Set to `always` to always select/deselect child nodes.
     * @param {boolean|'all'|'some'} selectionMode.includeParents Set to `all` or `true` to auto select parent if all its children gets selected. If one gets deselected, the parent will also be deselected. Set to 'some' to select parent if one of its children gets selected. The parent will be deselected if all children gets deselected.
     * @param {boolean} selectionMode.preserveSelectionOnPageChange In `row` selection mode, this flag controls whether the Grid should preserve its selection when loading a new page of a paged data store. Defaults to `false`
     * @param {boolean} selectionMode.preserveSelectionOnDatasetChange In `row` selection mode, this flag controls whether the Grid should preserve its selection of cells / rows when loading a new dataset (assuming the selected records are included in the newly loaded dataset)
     * @param {boolean} selectionMode.deselectOnClick Toggles whether the Grid should deselect a selected row or cell when clicking it
     * @param {boolean} selectionMode.dragSelect Set to `true` to enable multiple selection by dragging. Requires `multiSelect` to also be set to `true`. Also requires the [RowReorder](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/RowReorder) feature to be set to [gripOnly](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/RowReorder#config-gripOnly).
     * @param {boolean} selectionMode.selectOnKeyboardNavigation Set to `false` to disable auto-selection by keyboard navigation. This will activate the `select` keyboard shortcut.
     * @param {boolean} selectionMode.column Set to `true` to be able to select whole columns of cells by clicking the header. Requires cell to be set to `true`
     * @param {boolean|RowNumberColumnConfig} selectionMode.rowNumber Set to `true` or a config object to add a RowNumberColumn which, when clicked, selects the row.
     * @param {boolean} selectionMode.selectRecordOnCell Set to `false` not to include the record in the `selectedRecords` array when one of the record row's cells is selected.
     */
    selectionMode: object
    /**
     * Object enumerating data series for the histogram.
     * The object keys are treated as the series identifiers and values are objects that
     * must contain two properties:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-series)
     */
    series: Record<string, HistogramSeries>
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to `true` if you want to display resources effort values in bars
     * (for example: `24h`, `7d`, `60min` etc.).
     * The text contents can be changed by providing [getBarText](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-getBarText) function.
     */
    showBarText: boolean
    /**
     * Set to `true` if you want to display a tooltip when hovering an allocation bar. You can also pass a
     * [Tooltip#configs](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#configs) config object.
     * Please use [barTooltipTemplate](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineHistogramBase#config-barTooltipTemplate) function to customize the tooltip contents.
     */
    showBarTip: boolean|Partial<TooltipConfig>
    /**
     * Configure as `true` to have the grid show a red "changed" tag in cells who's
     * field value has changed and not yet been committed.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-showDirty)
     */
    showDirty: boolean|{
        duringEdit?: boolean
    }
    /**
     * Specifies whether effort values should display units or not.
     */
    showEffortUnit: boolean
    /**
     * Set to `true` if you want to display the maximum resource allocation line.
     */
    showMaxEffort: boolean
    /**
     * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover
     */
    showOnClick: boolean
    /**
     * Show on hover
     */
    showOnHover: boolean
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Set to `true` to snap to the current time resolution increment while interacting with scheduled events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-snap)
     */
    snap: boolean
    /**
     * Affects drag drop and resizing of events when [snap](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineDateMapper#config-snap)
     * is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-snapRelativeToEventStartDate)
     */
    snapRelativeToEventStartDate: boolean
    /**
     * The start date of the timeline (if not configure with [infiniteScroll](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-infiniteScroll)).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-startDate)
     */
    startDate: Date|string
    /**
     * The name of the start date parameter that will be passed to in every `eventStore` load request.
     */
    startParamName: string
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-stateId)
     */
    stateId: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/schedulerpro/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-stateProvider)
     */
    stateProvider: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-stateful)
     */
    stateful: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-statefulEvents)
     */
    statefulEvents: object|string[]
    /**
     * When set, the text in the major time axis header sticks in the scrolling viewport as long as possible.
     */
    stickyHeaders: boolean
    /**
     * Store that holds records to display in the grid, or a store config object. If the configuration contains
     * a `readUrl`, an `AjaxStore` will be created.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-store)
     */
    store: Partial<Store|StoreConfig|AjaxStore|AjaxStoreConfig>
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar). If the value assigned to a strip is an array, it is converted to
     * the toolbar's [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-strips)
     */
    strips: Record<string, Partial<ContainerItemConfig>>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * An object containing sub grid configuration objects keyed by a `region` property.
     * By default, grid has a 'locked' region (if configured with locked columns) and a 'normal' region.
     * The 'normal' region defaults to use `flex: 1`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-subGridConfigs)
     */
    subGridConfigs: Record<string, Partial<SubGridConfig>>
    /**
     * Set to `true` to prevent auto calculating of a minimal [tickSize](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineEventRendering#property-tickSize)
     * to always fit the content to the screen size. Setting this property on `true` will disable [forceFit](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-forceFit) behaviour.
     */
    suppressFit: boolean
    /**
     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object, or a message to be shown when Crud Manager
     * is persisting changes on the server. Set to `null` to disable default sync mask.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-syncMask)
     */
    syncMask: string|Partial<MaskConfig>|null
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-tbar)
     */
    tbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-textContent)
     */
    textContent: boolean
    /**
     * The width/height (depending on vertical / horizontal mode) of all the time columns.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-tickSize)
     */
    tickSize: number
    /**
     * A [TimeAxis](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/TimeAxis) config object or instance, used to create a backing data store of
     * 'ticks' providing the input date data for the time axis of timeline panel. Created automatically if none
     * supplied.
     */
    timeAxis: Partial<TimeAxisConfig>|TimeAxis
    /**
     * The time ranges store instance for [TimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeRanges) feature.
     */
    timeRangeStore: Store|Partial<StoreConfig>
    /**
     * Inline time ranges, will be loaded into an internally created store if [TimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeRanges)
     * is enabled.
     */
    timeRanges: TimeSpan[]|Partial<TimeSpanConfig>[]
    /**
     * Set to a time zone or a UTC offset. This will set the projects
     * [timeZone](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/ProjectModel#config-timeZone) config accordingly. As this config is only a referer,
     * please se project's config [documentation](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/ProjectModel#config-timeZone) for more
     * information.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-timeZone)
     */
    timeZone: string|number
    /**
     * A title to display in the header. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-title)
     */
    title: string
    /**
     * The [tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-tools)
     */
    tools: Record<string, Partial<ToolConfig>>
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * By default, once a tooltip is shown aligned as requested, it stays put.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-trackMouse)
     */
    trackMouse: boolean
    /**
     * Animation transition duration in milliseconds.
     */
    transitionDuration: number
    /**
     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
     * forwards or backwards.
     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
     */
    trapFocus: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-ui)
     */
    ui: string|object
    /**
     * A string key used to lookup a predefined [ViewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/ViewPreset) (e.g. 'weekAndDay', 'hourAndDay'),
     * managed by [PresetManager](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/PresetManager). See [PresetManager](#Scheduler/preset/PresetManager) for more information.
     * Or a config object for a viewPreset.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-viewPreset)
     */
    viewPreset: string|Partial<ViewPresetConfig>
    /**
     * A date to bring into view initially on the scrollable timeline.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-visibleDate)
     */
    visibleDate: Date|VisibleDate
    /**
     * Integer number indicating the size of timespan during zooming. When zooming, the timespan is adjusted to make
     * the scrolling area `visibleZoomFactor` times wider than the timeline area itself. Used in
     * [zoomToSpan](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomToSpan) and [zoomToLevel](#Scheduler/view/mixin/TimelineZoomable#function-zoomToLevel) functions.
     */
    visibleZoomFactor: number
    /**
     * A valid JS day index between 0-6 (0: Sunday, 1: Monday etc.) to be considered the start day of the week.
     * When omitted, the week start day is retrieved from the active locale class.
     */
    weekStartDay: number
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * An object with format `{ fromDay, toDay, fromHour, toHour }` that describes the working days and hours.
     * This object will be used to populate TimeAxis [include](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/TimeAxis#config-include) property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-workingTime)
     */
    workingTime: object
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-y)
     */
    y: number
    /**
     * Whether the originally rendered timespan should be preserved while zooming. By default, it is set to `false`,
     * meaning the timeline panel will adjust the currently rendered timespan to limit the amount of HTML content to
     * render. When setting this option to `true`, be careful not to allow to zoom a big timespan in seconds
     * resolution for example. That will cause <strong>a lot</strong> of HTML content to be rendered and affect performance. You
     * can use [minZoomLevel](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineZoomable#config-minZoomLevel) and [maxZoomLevel](#Scheduler/view/mixin/TimelineZoomable#config-maxZoomLevel) config options for that.
     */
    zoomKeepsOriginalTimespan: boolean
    /**
     * If true, you can zoom in and out on the time axis using CTRL-key + mouse wheel.
     */
    zoomOnMouseWheel: boolean
    /**
     * True to zoom to time span when double-clicking a time axis cell.
     */
    zoomOnTimeAxisDoubleClick: boolean
    /**
     * Fires before an assignment is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or
     * by the event editor. Can for example be used to display a custom dialog to confirm deletion, in which
     * case records should be "manually" removed after confirmation:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#event-beforeAssignmentDelete)
     * @param {object} event Event object
     * @param {Scheduler} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeAssignmentDelete: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => boolean|void)|string
    /**
     * Fires on the owning Grid before the cell editing is canceled, return `false` to prevent cancellation.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     */
    onBeforeCancelCellEdit: ((event: { source: Grid, editorContext: Location }) => boolean|void)|string
    /**
     * Fires on the owning Grid before deleting a range of selected cell values by pressing `Backspace` or `Del`
     * buttons while [autoEdit](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellEdit#config-autoEdit) is set to `true`. Return `false` to prevent editing.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {(Location|Model)[]} event.gridSelection An array of cell selectors or records that will have their values deleted (the records themself will not get deleted, only visible column values).
     */
    onBeforeCellDelete: ((event: { source: Grid, gridSelection: (Location|Model)[] }) => boolean|void)|string
    /**
     * Fires on the owning Grid before editing starts, return `false` to prevent editing
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {Field} event.editorContext.editor The input field that the column is configured with (see [field](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column#config-field)). This property mey be replaced to be a different [field](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field) in the handler, to take effect just for the impending edit.
     * @param {Function} event.editorContext.finalize An async function may be injected into this property which performs asynchronous finalization tasks such as complex validation of confirmation. The value `true` or `false` must be returned.
     * @param {object} event.editorContext.finalize.context An object describing the editing context upon requested completion of the edit.
     * @param {any} event.editorContext.value Cell value
     */
    onBeforeCellEditStart: ((event: { source: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Field, finalize: { context?: object }, value: any } }) => boolean|void)|string
    /**
     * Fired when the [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Popup} event.source This Popup
     */
    onBeforeClose: ((event: { source: Popup }) => void)|string
    /**
     * This event is fired prior to starting a column drag gesture. The drag is canceled if a listener returns `false`.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    onBeforeColumnDragStart: ((event: { source: Grid, column: Column, event: Event }) => boolean|void)|string
    /**
     * This event is fired when a column is dropped, and you can return false from a listener to abort the operation.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Column} event.newParent The new parent column.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    onBeforeColumnDropFinalize: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, event: Event, region: string }) => boolean|void)|string
    /**
     * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location[]} event.cells The cells about to be copied or cut
     * @param {string} event.data The string data about to be copied or cut
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other beforeCopy events
     */
    onBeforeCopy: ((event: { source: Grid, cells: Location[], data: string, isCut: boolean, entityName: string }) => Promise<boolean|void>)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before an event is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or by the
     * event editor. Return `false` to immediately veto the removal (or a `Promise` yielding `true` or `false`
     * for async vetoing).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#event-beforeEventDelete)
     * @param {object} event Event object
     * @param {Scheduler|any} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeEventDelete: ((event: { source: Scheduler|any, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Grid before the cell editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * @param {object} event Event object
     * @param {Grid} event.grid Target grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onBeforeFinishCellEdit: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fires before the component stores a record's histogram data into the cache.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#event-beforeHistogramDataCacheSet)
     * @param {object} event Event object
     * @param {TimelineHistogram} event.source The component instance
     * @param {Model} event.record Record the histogram data of which is ready.
     * @param {object} event.data The record histogram data.
     */
    onBeforeHistogramDataCacheSet: ((event: { source: TimelineHistogram, record: Model, data: object }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before pan starts. Return `false` to prevent the operation.
     * @param {object} event Event object
     * @param {Event} event.event The native browser DOM event
     */
    onBeforePan: ((event: { event: Event }) => boolean|void)|string
    /**
     * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData about to be pasted
     * @param {Location} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other beforePaste events
     */
    onBeforePaste: ((event: { source: Grid, clipboardData: string, targetCell: Location, entityName: string }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Grid before export started. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {object} event.config Export config
     */
    onBeforePdfExport: ((event: { config: object }) => boolean|void)|string
    /**
     * Fired before the [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) is changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onBeforePresetChange: ((event: { source: Scheduler, startDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Fires before the component renders a row.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#event-beforeRenderHistogramRow)
     * @param {object} event Event object
     * @param {TimelineHistogram} event.source The component instance
     * @param {Model} event.record Record the histogram data of which is ready.
     * @param {Partial<HistogramConfig>} event.histogramConfig Configuration object that will be applied to `histogramWidget`.
     * @param {Histogram} event.histogramWidget The underlying widget that is used to render a chart.
     */
    onBeforeRenderHistogramRow: ((event: { source: TimelineHistogram, record: Model, histogramConfig: Partial<HistogramConfig>, histogramWidget: Histogram }) => void)|string
    /**
     * Fires before the component renders a histogram in a cell.
     * @param {object} event Event object
     * @param {TimelineHistogram} event.source The component instance
     * @param {Model} event.record Record the histogram data of which is ready.
     * @param {Partial<HistogramConfig>} event.histogramConfig Configuration object that will be applied to `histogramWidget`.
     * @param {Histogram} event.histogramWidget The underlying widget that is used to render a chart.
     */
    onBeforeRenderRecordHistogram: ((event: { source: TimelineHistogram, record: Model, histogramConfig: Partial<HistogramConfig>, histogramWidget: Histogram }) => void)|string
    /**
     * Fires before a row is rendered.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Row} event.row The row about to be rendered.
     * @param {Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    onBeforeRenderRow: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows are about to be rendered
     * @param {object} event Event object
     * @param {Grid} event.source This grid.
     */
    onBeforeRenderRows: ((event: { source: Grid }) => void)|string
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records to be deselected in this operation.
     * @param {Model[]} event.selected The records to be selected in this operation.
     * @param {Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Location[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Location[]} event.selectedCells The cells to be selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    onBeforeSelectionChange: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fired when a group is going to be expanded or collapsed using the UI.
     * Returning `false` from a listener prevents the operation
     * @param {object} event Event object
     * @param {Model} event.groupRecord Group record
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     * @param {Event} event.domEvent The user interaction event (eg a `click` event) if the toggle request was instigated by user interaction.
     */
    onBeforeToggleGroup: ((event: { groupRecord: Model, collapse: boolean, domEvent: Event }) => boolean|void)|string
    /**
     * Fired before a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    onBeforeToggleNode: ((event: { source: Grid, record: Model, collapse: boolean }) => void)|string
    /**
     * Fires on the owning Grid when editing is cancelled
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Event} event.event Included if the cancellation was triggered by a DOM event
     */
    onCancelCellEdit: ((event: { source: Grid, editorContext: Location, event: Event }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellContextMenu: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellDblClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * This event fires on the owning grid before the context menu is shown for a cell.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#event-cellMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuBeforeShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column, record: Model }) => boolean|void)|string
    /**
     * This event fires on the owning grid when an item is selected in the cell context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid after the context menu is shown for a cell.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid when a check item is toggled in the cell context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     * @param {boolean} event.checked Checked or not
     */
    onCellMenuToggleItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model, checked: boolean }) => void)|string
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOut: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOver: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onCollapse: ((event: { source: Panel }) => void)|string
    /**
     * Fired before a parent node record is collapsed.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record which has been collapsed.
     */
    onCollapseNode: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * This event is fired when a column is being dragged, and you can set the `valid` flag on t
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Event} event.event The browser event.
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     */
    onColumnDrag: ((event: { source: Grid, column: Column, insertBefore: Column, event: Event, context: { valid: boolean } }) => void)|string
    /**
     * This event is fired when a column drag gesture has started.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    onColumnDragStart: ((event: { source: Grid, column: Column, event: Event }) => void)|string
    /**
     * This event is always fired after a column is dropped. The `valid` param is true if the operation was not
     * vetoed and the column was moved in the column store.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Column} event.newParent The new parent column.
     * @param {boolean} event.valid true if the operation was not vetoed.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    onColumnDrop: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, valid: boolean, event: Event, region: string }) => boolean|void)|string
    /**
     * This event fires on the owning widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Widget} event.source The owning widget
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     */
    onContextMenuItem: ((event: { source: Widget, menu: Menu, item: MenuItem }) => void)|string
    /**
     * This event fires on the owning widget when a check item is toggled in the context menu.
     * @param {object} event Event object
     * @param {Widget} event.source The owning widget
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {boolean} event.checked Checked or not
     */
    onContextMenuToggleItem: ((event: { source: Widget, menu: Menu, item: MenuItem, checked: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a copy action is performed.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location[]} event.cells The cells about to be copied or cut
     * @param {string} event.copiedDataString The concatenated data string that was copied or cut
     * @param {boolean} event.isCut `true` if this was a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other copy events
     */
    onCopy: ((event: { source: Grid, cells: Location[], copiedDataString: string, isCut: boolean, entityName: string }) => void)|string
    /**
     * Fired when data in the store changes.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#event-dataChange)
     * @param {object} event Event object
     * @param {Grid} event.source Owning grid
     * @param {Store} event.store The originating store
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'updatemultiple'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onDataChange: ((event: { source: Grid, store: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired when the range of dates encapsulated by the UI changes. This will be when
     * moving a view in time by reconfiguring its [timeAxis](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-timeAxis). This will happen
     * when zooming, or changing [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-viewPreset).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#event-dateRangeChange)
     * @param {object} event Event object
     * @param {TimelineBase} event.source This Scheduler/Gantt instance.
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onDateRangeChange: ((event: { source: TimelineBase, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid} event.source
     * @param {Model[]|object} event.selectedCells The cells that is currently being dragged over
     */
    onDragSelecting: ((event: { source: Grid, selectedCells: Model[]|object|Partial<ModelConfig> }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onExpand: ((event: { source: Panel }) => void)|string
    /**
     * Fired after a parent node record is expanded.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record which has been expanded.
     */
    onExpandNode: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * Fired when a file is dropped on the widget element
     * @param {object} event Event object
     * @param {Grid} event.source The owning Grid instance
     * @param {DataTransferItem} event.file The dropped file descriptor
     * @param {DragEvent} event.domEvent The native DragEvent
     */
    onFileDrop: ((event: { source: Grid, file: DataTransferItem, domEvent: DragEvent }) => void)|string
    /**
     * Fires on the owning Grid when cell editing is finished
     * @param {object} event Event object
     * @param {Grid} event.grid Target grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onFinishCellEdit: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fires when the component generates points for the [scale column](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#property-scaleColumn).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#event-generateScalePoints)
     * @param {object} event Event object
     * @param {ResourceHistogram} event.source The component instance
     * @param {ScalePoint[]} event.scalePoints Array of objects representing scale points. Each entry can have properties:  * `value` - point value * `unit` - point value unit * `text` - label text (if not provided the point will not have a label displayed)
     */
    onGenerateScalePoints: ((event: { source: ResourceHistogram, scalePoints: ScalePoint[] }) => void)|string
    /**
     * Fired when a row drag operation is aborted
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {MouseEvent} event.event
     */
    onGridRowAbort: ((event: { source: DragHelper, context: object, event: MouseEvent }) => void)|string
    /**
     * Fired before dragging starts, return false to prevent the drag operation.
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent|TouchEvent} event.event
     */
    onGridRowBeforeDragStart: ((event: { source: DragHelper, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => boolean|void)|string
    /**
     * Fired before the row drop operation is finalized. You can return false to abort the drop operation, or a
     * Promise yielding `true` / `false` which allows for asynchronous abort (e.g. first show user a confirmation dialog).
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the `record`, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    onGridRowBeforeDropFinalize: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => Promise<boolean|void>)|string
    /**
     * Fired while the row is being dragged, in the listener function you have access to `context.insertBefore` a grid /
     * tree record, and additionally `context.parent` (a TreeNode) for trees. You can signal that the drop position is
     * valid or invalid by setting `context.valid = false;`
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent} event.event
     */
    onGridRowDrag: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[] }, event: MouseEvent }) => void)|string
    /**
     * Fired when dragging starts.
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent|TouchEvent} event.event
     */
    onGridRowDragStart: ((event: { source: DragHelper, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => void)|string
    /**
     * Fired after the row drop operation has completed, regardless of validity
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid true or false depending on whether the drop position was valid
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model} event.context.record [DEPRECATED] The dragged row record
     * @param {Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the record, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    onGridRowDrop: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, record: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => void)|string
    /**
     * This event fires on the owning Grid before the context menu is shown for a header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/HeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#event-headerMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     */
    onHeaderMenuBeforeShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => boolean|void)|string
    /**
     * This event fires on the owning Grid when an item is selected in the header context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     */
    onHeaderMenuItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid after the context menu is shown for a header
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     */
    onHeaderMenuShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid when a check item is toggled in the header context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {boolean} event.checked Checked or not
     */
    onHeaderMenuToggleItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, checked: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Fires after the component retrieves a record's histogram data and stores
     * it into the cache.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#event-histogramDataCacheSet)
     * @param {object} event Event object
     * @param {TimelineHistogram} event.source The component instance
     * @param {Model} event.record Record the histogram data of which is ready.
     * @param {object} event.data The record histogram data.
     */
    onHistogramDataCacheSet: ((event: { source: TimelineHistogram, record: Model, data: object }) => void)|string
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOut: ((event: { event: MouseEvent }) => void)|string
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOver: ((event: { event: MouseEvent }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a paste action is performed.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData that was pasted
     * @param {Model[]} event.modifiedRecords The records which have been modified due to the paste action
     * @param {Location} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other paste events
     */
    onPaste: ((event: { source: Grid, clipboardData: string, modifiedRecords: Model[], targetCell: Location, entityName: string }) => void)|string
    /**
     * Fires on the owning Grid when export has finished
     * @param {object} event Event object
     * @param {Response} event.response Optional response, if received
     * @param {Error} event.error Optional error, if exception occurred
     */
    onPdfExport: ((event: { response?: Response, error?: Error }) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => void)|string
    /**
     * Fired after the [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) has changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.centerDate The new center date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onPresetChange: ((event: { source: Scheduler, startDate: Date, centerDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fires after a row is rendered.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Row} event.row The row that has been rendered.
     * @param {Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    onRenderRow: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows have been rendered
     * @param {object} event Event object
     * @param {Grid} event.source This grid.
     */
    onRenderRows: ((event: { source: Grid }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * This event fires on the owning scheduler before the context menu is shown for a resource.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ResourceMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#event-resourceMenuBeforeShow)
     * @param {object} event Event object
     * @param {Scheduler} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     * @param {SchedulerResourceModel} event.resourceRecord Record
     */
    onResourceMenuBeforeShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column, resourceRecord: SchedulerResourceModel }) => boolean|void)|string
    /**
     * This event fires on the owning scheduler when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {SchedulerResourceModel} event.record Record
     */
    onResourceMenuItem: ((event: { source: Scheduler, menu: Menu, item: MenuItem, record: SchedulerResourceModel }) => void)|string
    /**
     * This event fires on the owning scheduler after the context menu is shown for a resource.
     * @param {object} event Event object
     * @param {Scheduler} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {SchedulerResourceModel} event.record Record
     */
    onResourceMenuShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, record: SchedulerResourceModel }) => void)|string
    /**
     * This event fires on the owning grid when a check item is toggled in the context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {SchedulerResourceModel} event.resourceRecord Record
     * @param {boolean} event.checked Checked or not
     */
    onResourceMenuToggleItem: ((event: { source: Scheduler, menu: Menu, item: MenuItem, resourceRecord: SchedulerResourceModel, checked: boolean }) => void)|string
    /**
     * Triggered for click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured with
     * `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeClick: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for right-click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeContextMenu: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for double-click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeDblClick: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse down ona resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeMouseDown: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse out of a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeMouseOut: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse over on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeMouseOver: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse up ona resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeMouseUp: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for click on a resource time range. Only triggered if the ResourceTimeRange feature is configured with
     * `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeClick: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for right-click on a resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeContextMenu: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for double-click on a resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeDblClick: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse down ona resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeMouseDown: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse out of a resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeMouseOut: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse over on a resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeMouseOver: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse up ona resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeMouseUp: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    onResponsive: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string
    /**
     * Grid has scrolled vertically
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {number} event.scrollTop The vertical scroll position.
     */
    onScroll: ((event: { source: Grid, scrollTop: number }) => void)|string
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select'|'deselect'} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records deselected in this operation.
     * @param {Model[]} event.selected The records selected in this operation.
     * @param {Model[]} event.selection The records in the new selection.
     * @param {Location[]} event.deselectedCells The cells deselected in this operation.
     * @param {Location[]} event.selectedCells The cells selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the new selection.
     */
    onSelectionChange: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => void)|string
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    onSelectionModeChange: ((event: { selectionMode: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * Fires when splitting the Grid.
     * @param {object} event Event object
     * @param {GridBase[]} event.subViews The sub views created by the split
     * @param {object} event.options The options passed to the split call
     * @param {'horizontal'|'vertical'|'both'} event.options.direction The direction of the split
     * @param {Column} event.options.atColumn The column to split at
     * @param {Model} event.options.atRecord The record to split at
     */
    onSplit: ((event: { subViews: GridBase[], options: { direction: 'horizontal'|'vertical'|'both', atColumn: Column, atRecord: Model } }) => void)|string
    /**
     * Fired by the Grid when the collapse icon is clicked. Return `false` to prevent the default collapse action,
     * if you want to implement your own behavior.
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterCollapseClick: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => boolean|void)|string
    /**
     * Fired by the Grid after a sub-grid has been resized using the splitter
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The resized subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterDragEnd: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fired by the Grid when a sub-grid resize gesture starts
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The subgrid about to be resized
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterDragStart: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fires on the owning Grid when editing starts
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onStartCellEdit: ((event: { source: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fires after a sub grid is collapsed.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance
     * @param {SubGrid} event.subGrid The sub grid instance
     */
    onSubGridCollapse: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Fires after a sub grid is expanded.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance
     * @param {SubGrid} event.subGrid The sub grid instance
     */
    onSubGridExpand: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Fired when the timeaxis has changed, for example by zooming or configuring a new time span.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {object} event.config Config object used to reconfigure the time axis.
     * @param {Date} event.config.startDate New start date (if supplied)
     * @param {Date} event.config.endDate New end date (if supplied)
     */
    onTimeAxisChange: ((event: { source: Scheduler, config: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fires after a click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderClick: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a right click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderContextMenu: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a double click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderDblClick: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget before the context menu is shown for the time axis header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeAxisHeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#event-timeAxisHeaderMenuBeforeShow)
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Time axis column
     */
    onTimeAxisHeaderMenuBeforeShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => boolean|void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget when an item is selected in the header context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Time axis column
     */
    onTimeAxisHeaderMenuItem: ((event: { source: Scheduler, menu: Menu, item: MenuItem, column: Column }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget after the context menu is shown for a header
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Time axis column
     */
    onTimeAxisHeaderMenuShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.event DEPRECATED 5.3.0 Use `domEvent` instead
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTimeRangeHeaderClick: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, event: MouseEvent, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a right click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.event DEPRECATED 5.3.0 Use `domEvent` instead
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTimeRangeHeaderContextMenu: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, event: MouseEvent, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a double click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.event DEPRECATED 5.3.0 Use `domEvent` instead
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTimeRangeHeaderDblClick: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, event: MouseEvent, domEvent: MouseEvent }) => void)|string
    /**
     * Fired when the pointer-activated [timelineContext](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineDomEvents#property-timelineContext) has changed.
     * @param {object} event Event object
     * @param {TimelineContext} event.oldContext The tick/resource context being deactivated.
     * @param {TimelineContext} event.context The tick/resource context being activated.
     */
    onTimelineContextChange: ((event: { oldContext: TimelineContext, context: TimelineContext }) => void)|string
    /**
     * Fired when the *scheduler* viewport (not the overall Scheduler element) changes size.
     * This happens when the grid changes height, or when the subgrid which encapsulates the
     * scheduler column changes width.
     * @param {object} event Event object
     * @param {Widget} event.source This Scheduler
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onTimelineViewportResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Group expanded or collapsed
     * @param {object} event Event object
     * @param {Model} event.groupRecord Group record
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     */
    onToggleGroup: ((event: { groupRecord: Model, collapse: boolean }) => void)|string
    /**
     * Fired after a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    onToggleNode: ((event: { record: Model, collapse: boolean }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Tool} event.source This Panel.
     * @param {Tool} event.tool The tool which is being clicked.
     */
    onToolClick: ((event: { source: Tool, tool: Tool }) => void)|string
    /**
     * Fires when un-splitting the Grid.
     */
    onUnsplit: (() => void)|string
    /**
     * Fired when the range of dates visible within the viewport changes. This will be when
     * scrolling along a time axis.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#event-visibleDateRangeChange)
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onVisibleDateRangeChange: ((event: { source: Scheduler, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
}

/**
 * This view displays a read-only timeline report of the workload for the resources in a
 * [project](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel). The resource allocation is visualized as bars along the time axis
 * with an optional line indicating the maximum available time for each resource. A [ScaleColumn](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/column/ScaleColumn)
 * is also added automatically.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram)
 */
export class ResourceHistogram extends TimelineHistogram {
    /**
     * Get/set the CrudManager instance
     */
    crudManager: CrudManager
    /**
     * Returns `true` if engine is in a stable calculated state, `false` otherwise.
     */
    isEngineReady: boolean
    /**
     * Get the global LocaleHelper
     */
    readonly localeHelper: typeof LocaleHelper
    /**
     * Get the global LocaleManager
     */
    readonly localeManager: typeof LocaleManager
    /**
     * A [ProjectModel](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/ProjectModel) instance or a config object. The project holds all Scheduler data.
     * Can be omitted in favor of individual store configs or [crudManager](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerStores#config-crudManager) config.
     */
    project: Partial<ProjectModel|ProjectModelConfig>
    /**
     * Get resource column width. Only applies to vertical mode. To set it, assign to
     * `scheduler.resourceColumns.columnWidth`.
     */
    readonly resourceColumnWidth: number
    /**
     * Use it to manipulate resource column properties at runtime.
     */
    readonly resourceColumns: ResourceHeader
    /**
     * Control how much space to leave between the first event/last event and the resources edge (top/bottom
     * margin within the resource row in horizontal mode, left/right margin within the resource column in
     * vertical mode), in px. Defaults to the value of [barMargin](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/Scheduler#config-barMargin).
     */
    resourceMargin: number|Partial<ResourceMarginConfig>
    /**
     * Get/set the resource time ranges store instance for [ResourceTimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ResourceTimeRanges) feature.
     */
    resourceTimeRangeStore: ResourceTimeRangeStore|Partial<ResourceTimeRangeStoreConfig>
    /**
     * Inline resource time ranges, will be loaded into an internally created store if
     * [ResourceTimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ResourceTimeRanges) is enabled.
     */
    resourceTimeRanges: ResourceTimeRangeModel[]|Partial<ResourceTimeRangeModelConfig>[]
    /**
     * Get/set the time ranges store instance or config object for [TimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeRanges) feature.
     */
    timeRangeStore: Store|Partial<StoreConfig>
    /**
     * Get/set time ranges, applies to the backing project's TimeRangeStore.
     */
    timeRanges: TimeSpan[]|Partial<TimeSpanConfig>[]
    /**
     * An object containing Features
     */
    features: ResourceHistogramFeaturesType
    /**
     * Fires before an assignment is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or
     * by the event editor. Can for example be used to display a custom dialog to confirm deletion, in which
     * case records should be "manually" removed after confirmation:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#event-beforeAssignmentDelete)
     * @param {object} event Event object
     * @param {Scheduler} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeAssignmentDelete: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before an event is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or by the
     * event editor. Return `false` to immediately veto the removal (or a `Promise` yielding `true` or `false`
     * for async vetoing).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#event-beforeEventDelete)
     * @param {object} event Event object
     * @param {Scheduler|any} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeEventDelete: ((event: { source: Scheduler|any, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean|void>)|string
    /**
     * Fired before the [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) is changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onBeforePresetChange: ((event: { source: Scheduler, startDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records to be deselected in this operation.
     * @param {Model[]} event.selected The records to be selected in this operation.
     * @param {Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Location[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Location[]} event.selectedCells The cells to be selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    onBeforeSelectionChange: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellContextMenu: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellDblClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOut: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOver: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid} event.source
     * @param {Model[]|object} event.selectedCells The cells that is currently being dragged over
     */
    onDragSelecting: ((event: { source: Grid, selectedCells: Model[]|object|Partial<ModelConfig> }) => void)|string
    /**
     * Fires when the component generates points for the [scale column](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#property-scaleColumn).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#event-generateScalePoints)
     * @param {object} event Event object
     * @param {ResourceHistogram} event.source The component instance
     * @param {ScalePoint[]} event.scalePoints Array of objects representing scale points. Each entry can have properties:  * `value` - point value * `unit` - point value unit * `text` - label text (if not provided the point will not have a label displayed)
     */
    onGenerateScalePoints: ((event: { source: ResourceHistogram, scalePoints: ScalePoint[] }) => void)|string
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOut: ((event: { event: MouseEvent }) => void)|string
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOver: ((event: { event: MouseEvent }) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => void)|string
    /**
     * Fired after the [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) has changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.centerDate The new center date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onPresetChange: ((event: { source: Scheduler, startDate: Date, centerDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Triggered for click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured with
     * `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeClick: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for right-click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeContextMenu: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for double-click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeDblClick: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse down ona resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeMouseDown: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse out of a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeMouseOut: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse over on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeMouseOver: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse up ona resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeMouseUp: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    onResponsive: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select'|'deselect'} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records deselected in this operation.
     * @param {Model[]} event.selected The records selected in this operation.
     * @param {Model[]} event.selection The records in the new selection.
     * @param {Location[]} event.deselectedCells The cells deselected in this operation.
     * @param {Location[]} event.selectedCells The cells selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the new selection.
     */
    onSelectionChange: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => void)|string
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    onSelectionModeChange: ((event: { selectionMode: object }) => void)|string
    /**
     * Fires after a click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderClick: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a right click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderContextMenu: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a double click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderDblClick: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fired when the pointer-activated [timelineContext](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineDomEvents#property-timelineContext) has changed.
     * @param {object} event Event object
     * @param {TimelineContext} event.oldContext The tick/resource context being deactivated.
     * @param {TimelineContext} event.context The tick/resource context being activated.
     */
    onTimelineContextChange: ((event: { oldContext: TimelineContext, context: TimelineContext }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/schedulerpro/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
    /**
     * Get localized string, returns value of `text` if no localized string found.
     * @param {string} text String key
     * @param {object} templateData Data to supply to template if localized string is a function
     */
    static L(text: string, templateData?: object): string;
    /**
     * Convenience function to get an optional translation. The difference compared to `L()` is that it won't throw
     * an error when the translation is missing even if configured with `throwOnMissingLocale`
     * @param {string} text String key
     * @param {object} templateData Data to supply to template if localized string is a function
     */
    static optionalL(text: string, templateData?: object): string;
    /**
     * Convenience function that can be called directly on the class that mixes Localizable in
     * @param {string} text String key
     * @param {object} templateData Data to supply to template if localized string is a function
     */
    L(text: string, templateData?: object): string;
    /**
     * Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig|string} config An object containing listener definitions, or the event name to listen for
     * @param {object|Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    addListener(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * The default function used for aggregating a child record histogram data values to its parent entry.
     * The function sums up `effort` and `maxEffort` series values. It also propagates
     * [isOverallocated](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceModel#typedef-ResourceAllocationInterval) and
     * [isUnderallocated](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceModel#typedef-ResourceAllocationInterval) values so if there
     * is a child having the corresponding value as `true` it will be `true` on the parent level as well.
     * @param {ResourceAllocationInterval} aggregated Target parent data entry to aggregate the entry into.
     * @param {ResourceAllocationInterval} entry Current entry to aggregate into `aggregated`.
     * @param {number} arrayIndex Index of the current record (among other records being aggregated).
     * @param {number} colIndex `entry` index in the current array
     */
    aggregateAllocationEntry(aggregated: ResourceAllocationInterval, entry: ResourceAllocationInterval, arrayIndex: number, colIndex: number): ResourceAllocationInterval;
    /**
     * Cancel editing, destroys the editor
     * This function is exposed on Grid and can thus be called as `grid.cancelEditing(...)`
     * @param {boolean} silent Pass true to prevent method from firing event
     */
    cancelEditing(silent?: boolean): void;
    /**
     * Finish editing, update the underlying record and destroy the editor
     * This function is exposed on Grid and can thus be called as `grid.finishEditing(...)`
     */
    finishEditing(): Promise<any>;
    /**
     * Generates points for the [scale column](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#property-scaleColumn).
     * @param {number} scaleMax Maximum value for the scale. Uses current timeaxis increment if not provided.
     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} unit Time unit `scaleMax` argument is expressed in. Uses current timeaxis unit if not provided.
     */
    generateScalePoints(scaleMax?: number, unit?: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'): ScalePoint[];
    /**
     * The default method that returns the text to render inside a bar if no
     * [getBarText](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-getBarText) function was provided.
     * @param {ResourceAllocationInterval} datum The data of the bar being rendered
     * @param {number} index The index of the datum being rendered
     * @param {string} series Identifier of the series (provided only if the histogram widget [singleTextForAllBars](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/graph/Histogram#config-singleTextForAllBars) is `false`)
     * @param {HistogramRenderData} renderData Current render data giving access to the record, row and cell being rendered.
     */
    getBarTextDefault(datum: ResourceAllocationInterval, index: number, series: string, renderData: HistogramRenderData): string;
    /**
     * Returns unit to display effort values in when rendering the histogram bars.
     * The method by default returns [barTextEffortUnit](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-barTextEffortUnit) value if provided
     * and if not falls back to [effortUnit](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-effortUnit) value.
     * But it also takes zooming into account and when
     * the timeaxis ticks unit gets smaller than the default value the ticks unit is returned.
     */
    getBarTextEffortUnit(): 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year';
    /**
     * Formats effort value to display in the component bars and tooltips.
     * @param {number} effort Effort value
     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} unit Effort value unit
     * @param {boolean} showEffortUnit Provide `true` to include effort unit. If not provided uses [showEffortUnit](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-showEffortUnit) value.
     */
    getEffortText(effort: number, unit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year', showEffortUnit?: boolean): string;
    /**
     * Returns the provided record's allocation data.
     * The process of allocation collecting is asynchronous so the method returns a `Promise`
     * that provides the data once resolved.
     * @param {ResourceModel} record Resource record to collect allocation for.
     */
    getRecordAllocationData(record: ResourceModel): Promise<any>;
    /**
     * Check if any listener is registered for the specified eventName
     * @param {string} eventName
     */
    hasListener(eventName: string): boolean;
    /**
     * Highlights the region representing the passed time span and optionally for a single certain resource.
     * @param {HighlightTimeSpan} options A single options object describing the time span to highlight.
     */
    highlightTimeSpan(options: HighlightTimeSpan): void;
    /**
     * Highlights the regions representing the passed time spans.
     * @param {HighlightTimeSpan[]} timeSpans An array of objects with start/end dates describing the rectangle to highlight.
     * @param {object} options A single options object
     */
    highlightTimeSpans(timeSpans: HighlightTimeSpan[], options?: {
        clearExisting?: boolean
    }): void;
    /**
     * The default function that initializes a target group record entry.
     */
    initAggregatedAllocationEntry(): ResourceAllocationInterval;
    /**
     * Alias for [addListener](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/Events#function-addListener). Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig|string} config An object containing listener definitions, or the event name to listen for
     * @param {object|Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    on(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name
     * before relaying, for example add -&gt; storeAdd
     * @param {EventsClass} through Object to relay the events through, needs to mix Events mixin in
     * @param {string} prefix Prefix to add to event name
     * @param {boolean} transformCase Specify false to prevent making first letter of event name uppercase
     */
    relayAll(through: EventsClass, prefix: string, transformCase?: boolean): void;
    /**
     * Removes all listeners registered to this object by the application.
     */
    removeAllListeners(): void;
    /**
     * Removes an event listener. Same API signature as [addListener](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/Events#function-addListener)
     * @param {object|string} config A config object or the event name
     * @param {object|Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    removeListener(config: object|string, thisObj: object|Function, oldThisObj: object): void;
    /**
     * Resume event triggering after a call to [suspendEvents()](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/Events#function-suspendEvents). If any triggered events were queued they will be triggered.
     */
    resumeEvents(): boolean;
    /**
     * Start editing specified cell. If no cellContext is given it starts with the first cell in the first row.
     * This function is exposed on Grid and can thus be called as `grid.startEditing(...)`
     * @param {object} cellContext Cell specified in format { id: 'x', columnId/column/field: 'xxx' }. See [getCell](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/Grid#function-getCell) for details.
     */
    startEditing(cellContext: object): Promise<any>;
    /**
     * Prevents events from being triggered until [resumeEvents()](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/Events#function-resumeEvents) is called. Optionally queues events that are triggered while
     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.
     * @param {boolean} queue Specify true to queue events triggered while suspended
     */
    suspendEvents(queue?: boolean): void;
    /**
     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener
     * makes function return false.
     * @param {string} eventName Event name for which to trigger listeners
     * @param {{bubbles?: boolean, [key: string]: any}} param Single parameter passed on to listeners, source property will be added to it (this)
     */
    trigger(eventName: string, param?: {bubbles?: boolean, [key: string]: any}): Promise<boolean|any>;
    /**
     * Shorthand for [removeListener](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/Events#function-removeListener)
     * @param {object|string} config A config object or the event name
     * @param {object|Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    un(config: object|string, thisObj?: object|Function, oldThisObj?: object): void;
    /**
     * Removes any highlighting elements.
     * @param {boolean} fadeOut `true` to fade out the highlight elements before removing
     */
    unhighlightTimeSpans(fadeOut?: boolean): Promise<void>;
    /**
     * Method that is triggered when applying a locale to the instance
     * (happens on the instance construction steps and when switching to another locale).
     */
    updateLocalization(): void;
    /**
     * Implement in subclass to take action when project is replaced.
     * @param {SchedulerProjectModel} project
     */
    updateProject(project: SchedulerProjectModel): void;
    /**
     * Accepts a callback that will be called when the underlying project is ready (no commit pending and current commit
     * finalized)
     * @param {Function} callback
     */
    whenProjectReady(callback: Function): void;
}

type ResourceUtilizationFeaturesType = {
    cellCopyPaste: CellCopyPaste
    cellEdit: CellEdit
    cellMenu: CellMenu
    cellTooltip: CellTooltip
    columnAutoWidth: ColumnAutoWidth
    columnDragToolbar: ColumnDragToolbar
    columnLines: ColumnLines
    columnPicker: ColumnPicker
    columnRename: ColumnRename
    columnReorder: ColumnReorder
    columnResize: ColumnResize
    excelExporter: GridExcelExporter
    fileDrop: FileDrop
    fillHandle: FillHandle
    filter: Filter
    filterBar: FilterBar
    group: Group
    groupSummary: GroupSummary
    headerMenu: HeaderMenu
    headerZoom: HeaderZoom
    mergeCells: MergeCells
    nonWorkingTime: NonWorkingTime
    pan: Pan
    pdfExport: GridPdfExport
    print: GridPrint
    quickFind: QuickFind
    regionResize: RegionResize
    resourceMenu: ResourceMenu
    resourceNonWorkingTime: ResourceNonWorkingTime
    resourceTimeRanges: ResourceTimeRanges
    rowCopyPaste: RowCopyPaste
    rowExpander: RowExpander
    rowReorder: RowReorder
    rowResize: GridRowResize
    scheduleTooltip: ScheduleTooltip
    search: Search
    sort: Sort
    split: Split
    stickyCells: StickyCells
    stripe: Stripe
    summary: Summary
    timeAxisHeaderMenu: TimeAxisHeaderMenu
    timeRanges: TimeRanges
    timeSpanHighlight: TimeSpanHighlight
    tree: Tree
    treeGroup: TreeGroup
}

type ResourceUtilizationFeaturesConfigType = {
    cellCopyPaste: string|boolean|Partial<CellCopyPasteConfig>
    cellEdit: string|boolean|Partial<CellEditConfig>
    cellMenu: string|boolean|Partial<CellMenuConfig>
    cellTooltip: string|boolean|Partial<CellTooltipConfig>
    columnAutoWidth: string|boolean|Partial<ColumnAutoWidthConfig>
    columnDragToolbar: string|boolean|Partial<ColumnDragToolbarConfig>
    columnLines: string|boolean|Partial<ColumnLinesConfig>
    columnPicker: string|boolean|Partial<ColumnPickerConfig>
    columnRename: string|boolean|Partial<ColumnRenameConfig>
    columnReorder: string|boolean|Partial<ColumnReorderConfig>
    columnResize: string|boolean|Partial<ColumnResizeConfig>
    excelExporter: string|boolean|Partial<GridExcelExporterConfig>
    fileDrop: string|boolean|Partial<FileDropConfig>
    fillHandle: string|boolean|Partial<FillHandleConfig>
    filter: string|boolean|Partial<FilterConfig>
    filterBar: string|boolean|Partial<FilterBarConfig>
    group: string|boolean|Partial<GroupConfig>
    groupSummary: string|boolean|Partial<GroupSummaryConfig>
    headerMenu: string|boolean|Partial<HeaderMenuConfig>
    headerZoom: string|boolean|Partial<HeaderZoomConfig>
    mergeCells: string|boolean|Partial<MergeCellsConfig>
    nonWorkingTime: string|boolean|Partial<NonWorkingTimeConfig>
    pan: string|boolean|Partial<PanConfig>
    pdfExport: string|boolean|Partial<GridPdfExportConfig>
    print: string|boolean|Partial<GridPrintConfig>
    quickFind: string|boolean|Partial<QuickFindConfig>
    regionResize: string|boolean|Partial<RegionResizeConfig>
    resourceMenu: string|boolean|Partial<ResourceMenuConfig>
    resourceNonWorkingTime: string|boolean|Partial<ResourceNonWorkingTimeConfig>
    resourceTimeRanges: string|boolean|Partial<ResourceTimeRangesConfig>
    rowCopyPaste: string|boolean|Partial<RowCopyPasteConfig>
    rowExpander: string|boolean|Partial<RowExpanderConfig>
    rowReorder: string|boolean|Partial<RowReorderConfig>
    rowResize: string|boolean|Partial<GridRowResizeConfig>
    scheduleTooltip: string|boolean|Partial<ScheduleTooltipConfig>
    search: string|boolean|Partial<SearchConfig>
    sort: string|boolean|Partial<SortConfig>
    split: string|boolean|Partial<SplitConfig>
    stickyCells: string|boolean|Partial<StickyCellsConfig>
    stripe: string|boolean|Partial<StripeConfig>
    summary: string|boolean|Partial<SummaryConfig>
    timeAxisHeaderMenu: string|boolean|Partial<TimeAxisHeaderMenuConfig>
    timeRanges: string|boolean|Partial<TimeRangesConfig>
    timeSpanHighlight: string|boolean|Partial<TimeSpanHighlightConfig>
    tree: string|boolean|Partial<TreeConfig>
    treeGroup: string|boolean|Partial<TreeGroupConfig>
}

/**
 * Type with configuration options for [ResourceUtilization](https://bryntum.com/products/grid/docs/api/SchedulerPro/view/ResourceUtilization) class.
 */
type ResourceUtilizationConfig = ContainerItemConfig & {
    type: 'resourceutilization'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * A function used for aggregating child records histogram data entries to their parent entry.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-aggregateDataEntry)
     * @param {object} aggregateDataEntry.aggregated Target parent data entry to aggregate the entry into.
     * @param {object} aggregateDataEntry.entry Current entry to aggregate into `aggregated`.
     * @param {number} aggregateDataEntry.arrayIndex Index of current array (index of the record among other records being aggregated).
     * @param {<Object>} aggregateDataEntry.entryIndex Index of `entry` in the current array.
     * @returns {object} Return value becomes the value of the `aggregated` parameter on the next invocation of this function.
     */
    aggregateDataEntry: ((aggregateDataEntry: { aggregated: object, entry: object, arrayIndex: number, entryIndex: object[] }) => object)|string
    /**
     * When `true` the component will automatically calculate data for group records
     * based on the groups members data by calling [getGroupRecordHistogramData](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineHistogramGrouping#function-getGroupRecordHistogramData) method.
     */
    aggregateHistogramDataForGroups: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * Keep the tooltip open if user moves the mouse over it.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-allowOver)
     */
    allowOver: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Set to true to anchor tooltip to the triggering target. If set to `false`, the tooltip
     * will align to the mouse position. When set to `false`, it will also set `anchor: false`
     * to hide anchor arrow.
     */
    anchorToTarget: boolean
    /**
     * Set to `false` to prevent remove row animation and remove the delay related to that.
     */
    animateRemovingRows: boolean
    /**
     * When the [Tree](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/Tree) feature is in use and the Store is a tree store, this
     * config may be set to `true` to visually animate branch node expand and collapse operations.
     * *This is not supported in Scheduler and Gantt*
     */
    animateTreeNodeToggle: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * You can set this option to `false` to make the timeline panel start and end on the exact provided
     * [startDate](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-startDate)/[endDate](#Scheduler/view/TimelineBase#config-endDate) w/o adjusting them.
     */
    autoAdjustTimeAxis: boolean
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#function-hide) when the user clicks or
     * taps outside its widget. Configure as `false` to make a Tooltip non-transient when user clicks outside it.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-autoClose)
     */
    autoClose: boolean
    /**
     * Automatically set grids height to fit all rows (no scrolling in the grid). In general you should avoid
     * using `autoHeight: true`, since it will bypass Grids virtual rendering and render all rows at once, which
     * in a larger grid is really bad for performance.
     */
    autoHeight: boolean
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#function-hide) when the mouse exits the target
     * element. Configure as `false` to make a Tooltip non-transient.
     */
    autoHide: boolean
    /**
     * Show immediately when created
     */
    autoShow: boolean
    /**
     * Update assigned [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * Controls how much space to leave between stacked event bars in px.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-barMargin)
     */
    barMargin: number
    /**
     * Default time unit used for displaying resources effort in bars.
     * Yet the effective time unit used might change dynamically when zooming in the histogram
     * so its ticks unit gets smaller than the default unit.
     * Please use [barTipEffortUnit](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-barTipEffortUnit) to customize default units for tooltips
     * (or [effortUnit](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-effortUnit) to customize both texts and tooltips default units).
     */
    barTextEffortUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * Default time unit used when displaying resources effort in tooltips.
     * Yet the effective time unit used might change dynamically when zooming in the histogram
     * so its ticks unit gets smaller than the default unit.
     * Please use [barTextEffortUnit](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-barTextEffortUnit) to customize default units for bar texts
     * (or [effortUnit](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-effortUnit) to customize both texts and tooltips default units).
     */
    barTipEffortUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * A Function which returns the tooltip text to display when hovering a bar.
     * The following parameters are passed:
     * @param {object} data The backing data of the histogram rectangle
     * @param {object} data.rectConfig The rectangle configuration object
     * @param {object} data.datum The hovered bar data
     * @param {number} data.index The index of the hovered bar data
     * @param {ResourceUtilizationModel} data.record The record which effort the hovered bar displays.
     * @returns {string} Tooltip HTML content
     */
    barTooltipTemplate: (data: { rectConfig: object, datum: object, index: number, record: ResourceUtilizationModel }) => string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-bbar)
     */
    bbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-bodyCls)
     */
    bodyCls: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * This config defines the size of the start and end invisible parts of the timespan when [infiniteScroll](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineScroll#config-infiniteScroll) set to `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-bufferCoef)
     */
    bufferCoef: number
    /**
     * This config defines the scroll limit, which, when exceeded will cause a timespan shift.
     * The limit is calculated as the `panelWidth * [bufferCoef](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineScroll#config-bufferCoef) * bufferThreshold`. During scrolling, if the left or right side
     * has less than that of the rendered content - a shift is triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-bufferThreshold)
     */
    bufferThreshold: number
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Show a tool in the header to close this Popup, and allow `ESC` close it.
     * The tool is available in the [tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Toolable#property-tools) object
     * under the name `close`. It uses the CSS class `b-popup-close` to apply a
     * default close icon. This may be customized with your own CSS rules.
     */
    closable: boolean
    /**
     * The action to take when calling the [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) method.
     * By default, the popup is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-closeAction)
     */
    closeAction: 'hide'|'destroy'
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-cls)
     */
    cls: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-collapsible)
     */
    collapsible: boolean|Partial<PanelCollapserConfig>|Partial<PanelCollapserOverlayConfig>
    /**
     * Set to `false` to not show column lines. End result might be overruled by/differ between themes.
     */
    columnLines: boolean
    /**
     * Accepts column definitions for the grid during initialization. They will be used to create
     * [Column](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column) instances that are added to a [ColumnStore](#Grid/data/ColumnStore).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-columns)
     */
    columns: ColumnStore|Partial<GridColumnConfig>[]|Partial<ColumnStoreConfig>
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Event which is used to show context menus.
     * Available options are: 'contextmenu', 'click', 'dblclick'.
     */
    contextMenuTriggerEvent: 'contextmenu'|'click'|'dblclick'
    /**
     * Supply a [CrudManager](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/CrudManager) instance or a config object if you want to use
     * CrudManager for handling data.
     */
    crudManager: Partial<CrudManagerConfig>|CrudManager
    /**
     * Class that should be used to instantiate a CrudManager in case it's provided as a simple object to
     * [crudManager](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerStores#config-crudManager) config.
     */
    crudManagerClass: typeof CrudManager
    /**
     * Convenient shortcut to set data in grids store both during initialization and at runtime. Can also be
     * used to retrieve data at runtime, although we do recommend interacting with Grids store instead using
     * the [store](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#property-store) property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-data)
     */
    data: object[]|Model[]
    /**
     * Record field from which the histogram data will be collected.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-dataModelField)
     */
    dataModelField: string
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * Region to which columns are added when they have none specified
     */
    defaultRegion: string
    /**
     * Generic resource image, used when provided `imageUrl` or `image` fields or path calculated from resource
     * name are all invalid. If left blank, resource name initials will be shown when no image can be loaded.
     */
    defaultResourceImageName: string
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * true to destroy the store when the grid is destroyed
     */
    destroyStore: boolean
    /**
     * Configure as `true` to destroy the Project and stores when `this` is destroyed.
     */
    destroyStores: boolean
    /**
     * Set to `true` to not get a warning when using another base class than GridRowModel for your grid data. If
     * you do, and would like to use the full feature set of the grid then include the fields from GridRowModel
     * in your model definition.
     */
    disableGridRowModelWarning: boolean
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * The time (in milliseconds) that the Tooltip should stay visible for when it shows over its
     * target. If the tooltip is anchored to its target, then moving the mouse during this time
     * resets the timer so that the tooltip will remain visible.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-dismissDelay)
     */
    dismissDelay: number
    /**
     * Defines how dates will be formatted in tooltips etc. This config has priority over similar config on the
     * view preset. For allowed values see [format](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DateHelper#function-format-static).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-displayDateFormat)
     */
    displayDateFormat: string
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * Decimal precision used when displaying durations, used by tooltips and DurationColumn.
     * Specify `false` to use raw value
     */
    durationDisplayPrecision: number|boolean
    /**
     * Effort value format string.
     * Must be a template supported by [NumberFormat](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/util/NumberFormat) class.
     */
    effortFormat: string
    /**
     * Default time unit to display resources effort values.
     * The value is used as default when displaying effort in tooltips and bars text.
     * Yet the effective time unit used might change dynamically when zooming in the histogram
     * so its ticks unit gets smaller than the default unit.
     * Please use [barTipEffortUnit](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-barTipEffortUnit) to customize default units for tooltips only
     * and [barTextEffortUnit](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#config-barTextEffortUnit) to customize default units in bar texts.
     */
    effortUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * Text or HTML to display when there is no data to display in the grid
     */
    emptyText: string
    /**
     * Set to `false` if you don't want event bar DOM updates to animate.
     */
    enableEventAnimations: boolean
    /**
     * Enables showing occurrences of recurring events across the scheduler's time axis.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-enableRecurringEvents)
     */
    enableRecurringEvents: boolean
    /**
     * Configure this as `true` to allow elements within cells to be styled as `position: sticky`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-enableSticky)
     */
    enableSticky: boolean
    /**
     * Set to true to allow text selection in the grid cells. Note, this cannot be used simultaneously with the
     * `RowReorder` feature.
     */
    enableTextSelection: boolean
    /**
     * Set to true to listen for CTRL-Z (CMD-Z on Mac OS) keyboard event and trigger undo (redo when SHIFT is
     * pressed). Only applicable when using a [StateTrackingManager](https://bryntum.com/products/schedulerpro/docs/api/Core/data/stm/StateTrackingManager).
     */
    enableUndoRedoKeys: boolean
    /**
     * The end date of the timeline (if not configure with [infiniteScroll](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-infiniteScroll)).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-endDate)
     */
    endDate: Date|string
    /**
     * The name of the end date parameter that will be passed to in every `eventStore` load request.
     */
    endParamName: string
    /**
     * Event color used by default. Events and resources can specify their own color, with priority order being:
     * Event -&gt; Resource -&gt; Scheduler default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-eventColor)
     */
    eventColor: EventColor
    /**
     * Event style used by default. Events and resources can specify their own style, with priority order being:
     * Event -&gt; Resource -&gt; Scheduler default. Determines the appearance of the event by assigning a CSS class
     * to it. Available styles are:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-eventStyle)
     */
    eventStyle: 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null
    /**
     * An object containing Feature configuration objects (or `true` if no configuration is required)
     * keyed by the Feature class name in all lowercase.
     */
    features: Partial<ResourceUtilizationFeaturesConfigType>
    /**
     * Set to `true` to stretch the last column in a grid with all fixed width columns
     * to fill extra available space if the grid's width is wider than the sum of all
     * configured column widths.
     */
    fillLastColumn: boolean
    /**
     * Specify `true` to force rendered events/tasks to fill entire ticks. This only affects rendering, start
     * and end dates retain their value on the data level.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-fillTicks)
     */
    fillTicks: boolean
    /**
     * Use fixed row height. Setting this to `true` will configure the underlying RowManager to use fixed row
     * height, which sacrifices the ability to use rows with variable height to gain a fraction better
     * performance.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-fixedRowHeight)
     */
    fixedRowHeight: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * By default a Popup is focused when it is shown.
     * Configure this as `false` to prevent automatic focus on show.
     */
    focusOnToFront: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-footer)
     */
    footer: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * DOM element to attach tooltip to. By default, the mouse entering this element will kick off a timer
     * (see [hoverDelay](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#config-hoverDelay)) to show itself.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-forElement)
     */
    forElement: HTMLElement
    /**
     * A CSS selector which targets child elements of the [forElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#config-forElement) that should produce a
     * tooltip when hovered over.
     */
    forSelector: string
    /**
     * Set to `true` to force the time columns to fit to the available space (horizontal or vertical depends on mode).
     * Note that setting [suppressFit](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-suppressFit) to `true`, will disable `forceFit` functionality. Zooming
     * cannot be used when `forceFit` is set.
     */
    forceFit: boolean
    /**
     * Refresh entire row when a record changes (`true`) or, if possible, only the cells affected (`false`).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-fullRowRefresh)
     */
    fullRowRefresh: boolean
    /**
     * A Function which returns the text to render inside a bar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-getBarText)
     * @param {ResourceAllocationInterval|AssignmentAllocationInterval} datum The datum being rendered. Either [ResourceAllocationInterval](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceModel#typedef-ResourceAllocationInterval) object for resource records (root level records) or [AssignmentAllocationInterval](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ResourceModel#typedef-AssignmentAllocationInterval) object for assignment records
     * @param {number} index The index of the datum being rendered
     * @returns {string} Text to render inside the bar
     */
    getBarText: (datum: ResourceAllocationInterval|AssignmentAllocationInterval, index: number) => string
    /**
     * A Function which returns the tooltip text to display when hovering a bar.
     * The following parameters are passed:
     * @param {HistogramSeries} series The series being rendered
     * @param {DomConfig} rectConfig The rectangle configuration object
     * @param {object} datum The datum being rendered
     * @param {number} index The index of the datum being rendered
     * @deprecated Since 5.0.0. Please use [barTooltipTemplate](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineHistogramBase#config-barTooltipTemplate)
     */
    getBarTip: (series: HistogramSeries, rectConfig: DomConfig, datum: object, index: number) => void
    /**
     * Function that extracts a record histogram data entry for aggregating.
     * By default it returns the entry as is. Override the function if you need a more complex way
     * to retrieve the value for aggregating.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-getDataEntryForAggregating)
     * @param {object} getDataEntryForAggregating.entry Current data entry.
     * @returns {object} Entry to aggregate
     */
    getDataEntryForAggregating: ((getDataEntryForAggregating: { entry: object }) => object)|string
    /**
     * A method, or the *name* of a method called to update the tooltip's content when the
     * cursor is moved over a target. It receives one argument containing context about the
     * tooltip and show operation. The function should return a string, or a Promise yielding
     * a string.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-getHtml)
     * @param {object} context
     * @param {Tooltip} context.tip The tooltip instance
     * @param {HTMLElement} context.element The Element for which the Tooltip is monitoring mouse movement
     * @param {HTMLElement} context.activeTarget The target element that triggered the show
     * @param {Event} context.event The raw DOM event
     * @returns {string|Promise}
     */
    getHtml: ((context: { tip: Tooltip, element: HTMLElement, activeTarget: HTMLElement, event: Event }) => string|Promise<any>)|string
    /**
     * A Function which returns a CSS class name to add to a path element
     * built for an `outline` type series.
     * The following parameters are passed:
     * @param {HistogramSeries} series The series being rendered
     * @param {<Object>} data The series data
     * @param {HistogramRenderData} renderData Current render data giving access to the record, row and cell being rendered.
     * @returns {string} CSS class name of the path element
     */
    getOutlineClass: (series: HistogramSeries, data: object[], renderData: HistogramRenderData) => string
    /**
     * A function, or name of a function which builds histogram data for the provided record.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-getRecordData)
     * @param {Model} getRecordData.record Record to get histogram data for.
     * @param {object} aggregationContext Context object passed in case the data is being retrieved as a part of some parent record data collecting.
     * @returns {object} Histogram data.
     */
    getRecordData: ((getRecordData: { record: Model }, aggregationContext?: object) => object)|string
    /**
     * A Function which returns a CSS class name to add to a rectangle element.
     * The following parameters are passed:
     * @param {HistogramSeries} series The series being rendered
     * @param {DomConfig} rectConfig The rectangle configuration object
     * @param {object} datum The datum being rendered
     * @param {number} index The index of the datum being rendered
     * @param {HistogramRenderData} renderData Current render data giving access to the record, row and cell being rendered.
     * @returns {string} CSS classes of the rectangle element
     */
    getRectClass: (series: HistogramSeries, rectConfig: DomConfig, datum: object, index: number, renderData: HistogramRenderData) => string
    /**
     * A function called for each row to determine its height. It is passed a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) and
     * expected to return the desired height of that records row. If the function returns a falsy value, Grids
     * configured [rowHeight](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#config-rowHeight) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-getRowHeight)
     * @param {Model} getRowHeight.record Record to determine row height for
     * @returns {number} Desired row height
     */
    getRowHeight: (getRowHeight: { record: Model }) => number
    /**
     * When set to `true` (default) the component reacts on time axis changes
     * (zooming or changing the displayed time span), clears the histogram data cache of the records
     * and then refreshes the view.
     */
    hardRefreshOnTimeAxisReconfigure: boolean
    /**
     * A config [object](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-header)
     */
    header: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * The time (in milliseconds) for which the Tooltip remains visible when the mouse leaves the target.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-hideDelay)
     */
    hideDelay: number|boolean
    /**
     * Set to `true` to hide the footer elements
     */
    hideFooters: boolean
    /**
     * Set to `true` to hide the column header elements
     */
    hideHeaders: boolean
    /**
     * Set to `true` to hide the Grid's horizontal scrollbar(s)
     */
    hideHorizontalScrollbar: boolean
    /**
     * By default, when moving rapidly from target to target, if, when mouseovering
     * a new target, the tip is still visible, the tooltip does not hide, it remains
     * visible, but updates its content however it is configured to do so.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-hideOnDelegateChange)
     */
    hideOnDelegateChange: boolean
    /**
     * By default the row hover effect is not visible in the Scheduler part of the grid.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-hideRowHover)
     */
    hideRowHover: boolean
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * An instance or a configuration object of the underlying [Histogram](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/graph/Histogram)
     * component that is used under the hood to render actual charts.
     * In case a configuration object is provided the built class is defined with
     * [histogramWidgetClass](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineHistogramBase#config-histogramWidgetClass) config.
     */
    histogramWidget: Histogram|Partial<HistogramConfig>
    /**
     * The class used for building the [histogram widget](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineHistogramBase#property-histogramWidget)
     */
    histogramWidgetClass: Histogram
    /**
     * The amount of time to hover before showing
     */
    hoverDelay: number
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Set to `true` to ignore reacting to DOM events (mouseover/mouseout etc) while scrolling. Useful if you
     * want to maximize scroll performance.
     */
    ignoreDomEventsWhileScrolling: boolean
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set to `true` to include inactive tasks allocation and `false` to not take such tasks into account.
     */
    includeInactiveEvents: boolean
    /**
     * Configure as `true` to automatically adjust the panel timespan during scrolling in the time dimension,
     * when the scroller comes close to the start/end edges.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-infiniteScroll)
     */
    infiniteScroll: boolean
    /**
     * A function that initializes a target group record entry.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-initAggregatedDataEntry)
     * @returns {object} Target aggregated entry
     */
    initAggregatedDataEntry: (() => object)|string
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * See [Keyboard shortcuts](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/Grid#keyboard-shortcuts) for details
     */
    keyMap: Record<string, string>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-listeners)
     */
    listeners: object
    /**
     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object, or a message to be shown when a store is performing a remote
     * operation, or Crud Manager is loading data from the sever. Set to `null` to disable default load mask.
     */
    loadMask: string|Partial<MaskConfig>|null
    /**
     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when data is loading. The message and optional configuration from the
     * [loadMask](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/LoadMaskable#config-loadMask) config take priority over these options, just as they do
     * for `maskDefaults`, respectively.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-loadMaskDefaults)
     */
    loadMaskDefaults: Partial<MaskConfig>
    /**
     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when an error occurs loading data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-loadMaskError)
     */
    loadMaskError: Partial<MaskConfig>|Mask|boolean
    /**
     * The message to show while an async tooltip is fetching its content.
     */
    loadingMsg: string
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Time in ms until a longpress is triggered
     */
    longPressTime: number
    /**
     * When `true`, events are sized and positioned based on rowHeight, resourceMargin and barMargin settings.
     * Set this to `false` if you want to control height and vertical position using CSS instead.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-managedEventSizing)
     */
    managedEventSizing: boolean
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * Grids change the `maskDefaults` to cover only their `body` element.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The maximum time axis unit to display non-working ranges for ('hour' or 'day' etc).
     * When zooming to a view with a larger unit, no non-working time elements will be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-maxTimeAxisUnit)
     */
    maxTimeAxisUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * The maximum zoom level to which [zoomIn](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomIn) will work. Defaults to the number of
     * [ViewPresets](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/ViewPreset) available, see [presets](#Scheduler/view/mixin/TimelineViewPresets#property-presets)
     * for information. Unless you have modified the collection of available presets, the max zoom level is
     * milliseconds.
     */
    maxZoomLevel: number
    /**
     * Show a tool in the header to maximize this popup
     */
    maximizable: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized: boolean
    /**
     * Grid's `min-height`. Defaults to `10em` to be sure that the Grid always has a height wherever it is
     * inserted.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-minHeight)
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * The minimum zoom level to which [zoomOut](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomOut) will work. Defaults to 0 (year ticks)
     */
    minZoomLevel: number
    /**
     * Optionally show an opaque mask below this Popup when shown.
     * Configure this as `true` to show the mask.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-modal)
     */
    modal: boolean|{
        closeOnMaskTap?: boolean
        transparent?: boolean
    }
    /**
     * Grid monitors window resize by default.
     */
    monitorResize: boolean
    /**
     * Horizontal offset from mouse when [anchorToTarget](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-mouseOffsetX)
     */
    mouseOffsetX: number
    /**
     * Vertical offset from mouse when [anchorToTarget](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`
     */
    mouseOffsetY: number
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-owner)
     */
    owner: Widget
    /**
     * Partners this Timeline panel with another Timeline in order to sync their region sizes (sub-grids like locked, normal will get the same width),
     * start and end dates, view preset, zoom level and scrolling position. All these values will be synced with the timeline defined as the `partner`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-partner)
     */
    partner: TimelineBase
    /**
     * Set to true to include `startDate` and `endDate` params indicating the currently viewed date range.
     * Dates are formatted using the same format as the `startDate` field on the EventModel
     * (e.g. 2023-03-08T00:00:00+01:00).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-passStartEndParameters)
     */
    passStartEndParameters: boolean
    /**
     * Specify plugins (an array of classes) in config
     */
    plugins: Function[]
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-positioned)
     */
    positioned: boolean
    /**
     * True to preserve focused cell after loading new data
     */
    preserveFocusOnDatasetChange: boolean
    /**
     * Preserve the grid's vertical scroll position when changesets are applied, as in the case of remote
     * changes, or when stores are configured with [syncDataOnLoad](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-syncDataOnLoad).
     */
    preserveScroll: PreserveScrollOptions|boolean
    /**
     * Specify `true` to preserve vertical scroll position after store actions that trigger a `refresh` event,
     * such as loading new data and filtering.
     */
    preserveScrollOnDatasetChange: boolean
    /**
     * An array of [ViewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/ViewPreset) config objects
     * which describes the available timeline layouts for this scheduler.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-presets)
     */
    presets: Partial<ViewPresetConfig>[]
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * A ProjectModel instance (or a config object) to display resource allocation of.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-project)
     */
    project: Partial<ProjectModelConfig>|ProjectModel
    /**
     * Set to `true` to make the grid read-only, by disabling any UIs for modifying data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-ref)
     */
    ref: string
    /**
     * Set to `false` to only measure cell contents when double clicking the edge between column headers.
     */
    resizeToFitIncludesHeader: boolean
    /**
     * A config object used to configure the resource columns in vertical mode.
     * See [ResourceHeader](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/ResourceHeader) for more details on available properties.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-resourceColumns)
     */
    resourceColumns: Partial<ResourceHeaderConfig>
    /**
     * Resource image extension, used when creating image path from resource name.
     */
    resourceImageExtension: string
    /**
     * Path to load resource images from. Used by the resource header in vertical mode and the
     * [ResourceInfoColumn](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/column/ResourceInfoColumn) in horizontal mode. Set this to display miniature
     * images for each resource using their `image` or `imageUrl` fields.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-resourceImagePath)
     */
    resourceImagePath: string
    /**
     * Control how much space to leave between the first event/last event and the resources edge (top/bottom
     * margin within the resource row in horizontal mode, left/right margin within the resource column in
     * vertical mode), in px. Defaults to the value of [barMargin](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/Scheduler#config-barMargin).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-resourceMargin)
     */
    resourceMargin: number|Partial<ResourceMarginConfig>
    /**
     * Resource time ranges store instance or config object for [ResourceTimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ResourceTimeRanges) feature.
     */
    resourceTimeRangeStore: ResourceTimeRangeStore|Partial<ResourceTimeRangeStoreConfig>
    /**
     * Inline resource time ranges, will be loaded into an internally created store if
     * [ResourceTimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ResourceTimeRanges) is enabled.
     */
    resourceTimeRanges: ResourceTimeRangeModel[]|Partial<ResourceTimeRangeModelConfig>[]
    /**
     * "Break points" for which responsive config to use for columns and css.
     */
    responsiveLevels: Record<string, number|string>
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Row height in pixels. This allows the default height for rows to be controlled. Note that it may be
     * overriden by specifying a [rowHeight](https://bryntum.com/products/schedulerpro/docs/api/Grid/data/GridRowModel#field-rowHeight) on a per record basis, or from
     * a column [renderer](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column#config-renderer).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-rowHeight)
     */
    rowHeight: number
    /**
     * Set to `false` to not show row lines. End result might be overruled by/differ between themes.
     */
    rowLines: boolean
    /**
     * An object with configuration for the [ScaleColumn](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/column/ScaleColumn).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-scaleColumn)
     */
    scaleColumn: object
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Configuration values for the [ScrollManager](https://bryntum.com/products/schedulerpro/docs/api/Core/util/ScrollManager) class on initialization. Returns the
     * [ScrollManager](https://bryntum.com/products/schedulerpro/docs/api/Core/util/ScrollManager) at runtime.
     */
    scrollManager: Partial<ScrollManagerConfig>|ScrollManager
    /**
     * Configures whether the grid is scrollable in the `Y` axis. This is used to configure a [GridScroller](https://bryntum.com/products/schedulerpro/docs/api/Grid/util/GridScroller).
     * See the [scrollerClass](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#config-scrollerClass) config option.
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * The class to instantiate to use as the [scrollable](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#config-scrollable). Defaults to [GridScroller](#Grid/util/GridScroller).
     */
    scrollerClass: typeof Scroller
    /**
     * The selection settings, where you can set these boolean flags to control what is selected. Options below:
     * @param {boolean} selectionMode.cell Set to `true` to enable cell selection. This takes precedence over row selection, but rows can still be selected programmatically or with checkbox or RowNumber selection. Required for `column` selection
     * @param {boolean} selectionMode.multiSelect Allow multiple selection with ctrl and shift+click or with `checkbox` selection. Required for `dragSelect` and `column` selection
     * @param {boolean|CheckColumnConfig} selectionMode.checkbox Set to `true` to add a checkbox selection column to the grid, or pass a config object for the [CheckColumn](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/CheckColumn)
     * @param {number|string} selectionMode.checkboxIndex Positions the checkbox column at the provided index or to the right of a provided column id. Defaults to 0 or to the right of an included `RowNumberColumn`
     * @param {boolean} selectionMode.checkboxOnly Select rows only when clicking in the checkbox column. Requires cell selection config to be `false` and checkbox to be set to `true`. This setting was previously named `rowCheckboxSelection`
     * @param {boolean} selectionMode.showCheckAll Set to `true` to add a checkbox to the selection column header to select/deselect all rows. Requires checkbox to also be set to `true`
     * @param {boolean} selectionMode.deselectFilteredOutRecords Set to `true` to deselect records when they are filtered out
     * @param {boolean|string} selectionMode.includeChildren Set to `true` to also select/deselect child nodes when a parent node is selected by toggling the checkbox. Set to `always` to always select/deselect child nodes.
     * @param {boolean|'all'|'some'} selectionMode.includeParents Set to `all` or `true` to auto select parent if all its children gets selected. If one gets deselected, the parent will also be deselected. Set to 'some' to select parent if one of its children gets selected. The parent will be deselected if all children gets deselected.
     * @param {boolean} selectionMode.preserveSelectionOnPageChange In `row` selection mode, this flag controls whether the Grid should preserve its selection when loading a new page of a paged data store. Defaults to `false`
     * @param {boolean} selectionMode.preserveSelectionOnDatasetChange In `row` selection mode, this flag controls whether the Grid should preserve its selection of cells / rows when loading a new dataset (assuming the selected records are included in the newly loaded dataset)
     * @param {boolean} selectionMode.deselectOnClick Toggles whether the Grid should deselect a selected row or cell when clicking it
     * @param {boolean} selectionMode.dragSelect Set to `true` to enable multiple selection by dragging. Requires `multiSelect` to also be set to `true`. Also requires the [RowReorder](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/RowReorder) feature to be set to [gripOnly](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/RowReorder#config-gripOnly).
     * @param {boolean} selectionMode.selectOnKeyboardNavigation Set to `false` to disable auto-selection by keyboard navigation. This will activate the `select` keyboard shortcut.
     * @param {boolean} selectionMode.column Set to `true` to be able to select whole columns of cells by clicking the header. Requires cell to be set to `true`
     * @param {boolean|RowNumberColumnConfig} selectionMode.rowNumber Set to `true` or a config object to add a RowNumberColumn which, when clicked, selects the row.
     * @param {boolean} selectionMode.selectRecordOnCell Set to `false` not to include the record in the `selectedRecords` array when one of the record row's cells is selected.
     */
    selectionMode: object
    /**
     * Object enumerating data series for the histogram.
     * The object keys are treated as the series identifiers and values are objects that
     * must contain two properties:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-series)
     */
    series: Record<string, HistogramSeries>
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to `true` if you want to display resources effort values in bars
     * (for example: `24h`, `7d`, `60min` etc.).
     * The text contents can be changed by providing [getBarText](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-getBarText) function.
     */
    showBarText: boolean
    /**
     * Set to `true` if you want to display a tooltip when hovering an allocation bar. You can also pass a
     * [Tooltip#configs](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#configs) config object.
     * Please use [barTooltipTemplate](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineHistogramBase#config-barTooltipTemplate) function to customize the tooltip contents.
     */
    showBarTip: boolean|Partial<TooltipConfig>
    /**
     * Configure as `true` to have the grid show a red "changed" tag in cells who's
     * field value has changed and not yet been committed.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-showDirty)
     */
    showDirty: boolean|{
        duringEdit?: boolean
    }
    /**
     * Specifies whether effort values should display units or not.
     */
    showEffortUnit: boolean
    /**
     * Set to `true` if you want to display the maximum resource allocation line.
     */
    showMaxEffort: boolean
    /**
     * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover
     */
    showOnClick: boolean
    /**
     * Show on hover
     */
    showOnHover: boolean
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Set to `true` to snap to the current time resolution increment while interacting with scheduled events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-snap)
     */
    snap: boolean
    /**
     * Affects drag drop and resizing of events when [snap](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineDateMapper#config-snap)
     * is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-snapRelativeToEventStartDate)
     */
    snapRelativeToEventStartDate: boolean
    /**
     * The start date of the timeline (if not configure with [infiniteScroll](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-infiniteScroll)).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-startDate)
     */
    startDate: Date|string
    /**
     * The name of the start date parameter that will be passed to in every `eventStore` load request.
     */
    startParamName: string
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-stateId)
     */
    stateId: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/schedulerpro/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-stateProvider)
     */
    stateProvider: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-stateful)
     */
    stateful: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-statefulEvents)
     */
    statefulEvents: object|string[]
    /**
     * When set, the text in the major time axis header sticks in the scrolling viewport as long as possible.
     */
    stickyHeaders: boolean
    /**
     * Store that holds records to display in the grid, or a store config object. If the configuration contains
     * a `readUrl`, an `AjaxStore` will be created.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-store)
     */
    store: Partial<Store|StoreConfig|AjaxStore|AjaxStoreConfig>
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar). If the value assigned to a strip is an array, it is converted to
     * the toolbar's [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-strips)
     */
    strips: Record<string, Partial<ContainerItemConfig>>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * An object containing sub grid configuration objects keyed by a `region` property.
     * By default, grid has a 'locked' region (if configured with locked columns) and a 'normal' region.
     * The 'normal' region defaults to use `flex: 1`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-subGridConfigs)
     */
    subGridConfigs: Record<string, Partial<SubGridConfig>>
    /**
     * Set to `true` to prevent auto calculating of a minimal [tickSize](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineEventRendering#property-tickSize)
     * to always fit the content to the screen size. Setting this property on `true` will disable [forceFit](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-forceFit) behaviour.
     */
    suppressFit: boolean
    /**
     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object, or a message to be shown when Crud Manager
     * is persisting changes on the server. Set to `null` to disable default sync mask.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-syncMask)
     */
    syncMask: string|Partial<MaskConfig>|null
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-tbar)
     */
    tbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-textContent)
     */
    textContent: boolean
    /**
     * The width/height (depending on vertical / horizontal mode) of all the time columns.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-tickSize)
     */
    tickSize: number
    /**
     * A [TimeAxis](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/TimeAxis) config object or instance, used to create a backing data store of
     * 'ticks' providing the input date data for the time axis of timeline panel. Created automatically if none
     * supplied.
     */
    timeAxis: Partial<TimeAxisConfig>|TimeAxis
    /**
     * The time ranges store instance for [TimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeRanges) feature.
     */
    timeRangeStore: Store|Partial<StoreConfig>
    /**
     * Inline time ranges, will be loaded into an internally created store if [TimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeRanges)
     * is enabled.
     */
    timeRanges: TimeSpan[]|Partial<TimeSpanConfig>[]
    /**
     * Set to a time zone or a UTC offset. This will set the projects
     * [timeZone](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/ProjectModel#config-timeZone) config accordingly. As this config is only a referer,
     * please se project's config [documentation](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/ProjectModel#config-timeZone) for more
     * information.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-timeZone)
     */
    timeZone: string|number
    /**
     * A title to display in the header. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-title)
     */
    title: string
    /**
     * The [tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-tools)
     */
    tools: Record<string, Partial<ToolConfig>>
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * By default, once a tooltip is shown aligned as requested, it stays put.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-trackMouse)
     */
    trackMouse: boolean
    /**
     * Animation transition duration in milliseconds.
     */
    transitionDuration: number
    /**
     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
     * forwards or backwards.
     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
     */
    trapFocus: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-ui)
     */
    ui: string|object
    /**
     * A string key used to lookup a predefined [ViewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/ViewPreset) (e.g. 'weekAndDay', 'hourAndDay'),
     * managed by [PresetManager](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/PresetManager). See [PresetManager](#Scheduler/preset/PresetManager) for more information.
     * Or a config object for a viewPreset.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-viewPreset)
     */
    viewPreset: string|Partial<ViewPresetConfig>
    /**
     * A date to bring into view initially on the scrollable timeline.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-visibleDate)
     */
    visibleDate: Date|VisibleDate
    /**
     * Integer number indicating the size of timespan during zooming. When zooming, the timespan is adjusted to make
     * the scrolling area `visibleZoomFactor` times wider than the timeline area itself. Used in
     * [zoomToSpan](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomToSpan) and [zoomToLevel](#Scheduler/view/mixin/TimelineZoomable#function-zoomToLevel) functions.
     */
    visibleZoomFactor: number
    /**
     * A valid JS day index between 0-6 (0: Sunday, 1: Monday etc.) to be considered the start day of the week.
     * When omitted, the week start day is retrieved from the active locale class.
     */
    weekStartDay: number
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * An object with format `{ fromDay, toDay, fromHour, toHour }` that describes the working days and hours.
     * This object will be used to populate TimeAxis [include](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/TimeAxis#config-include) property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-workingTime)
     */
    workingTime: object
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#config-y)
     */
    y: number
    /**
     * Whether the originally rendered timespan should be preserved while zooming. By default, it is set to `false`,
     * meaning the timeline panel will adjust the currently rendered timespan to limit the amount of HTML content to
     * render. When setting this option to `true`, be careful not to allow to zoom a big timespan in seconds
     * resolution for example. That will cause <strong>a lot</strong> of HTML content to be rendered and affect performance. You
     * can use [minZoomLevel](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineZoomable#config-minZoomLevel) and [maxZoomLevel](#Scheduler/view/mixin/TimelineZoomable#config-maxZoomLevel) config options for that.
     */
    zoomKeepsOriginalTimespan: boolean
    /**
     * If true, you can zoom in and out on the time axis using CTRL-key + mouse wheel.
     */
    zoomOnMouseWheel: boolean
    /**
     * True to zoom to time span when double-clicking a time axis cell.
     */
    zoomOnTimeAxisDoubleClick: boolean
    /**
     * Fires before an assignment is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or
     * by the event editor. Can for example be used to display a custom dialog to confirm deletion, in which
     * case records should be "manually" removed after confirmation:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#event-beforeAssignmentDelete)
     * @param {object} event Event object
     * @param {Scheduler} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeAssignmentDelete: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => boolean|void)|string
    /**
     * Fires on the owning Grid before the cell editing is canceled, return `false` to prevent cancellation.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     */
    onBeforeCancelCellEdit: ((event: { source: Grid, editorContext: Location }) => boolean|void)|string
    /**
     * Fires on the owning Grid before deleting a range of selected cell values by pressing `Backspace` or `Del`
     * buttons while [autoEdit](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellEdit#config-autoEdit) is set to `true`. Return `false` to prevent editing.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {(Location|Model)[]} event.gridSelection An array of cell selectors or records that will have their values deleted (the records themself will not get deleted, only visible column values).
     */
    onBeforeCellDelete: ((event: { source: Grid, gridSelection: (Location|Model)[] }) => boolean|void)|string
    /**
     * Fires on the owning Grid before editing starts, return `false` to prevent editing
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {Field} event.editorContext.editor The input field that the column is configured with (see [field](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column#config-field)). This property mey be replaced to be a different [field](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field) in the handler, to take effect just for the impending edit.
     * @param {Function} event.editorContext.finalize An async function may be injected into this property which performs asynchronous finalization tasks such as complex validation of confirmation. The value `true` or `false` must be returned.
     * @param {object} event.editorContext.finalize.context An object describing the editing context upon requested completion of the edit.
     * @param {any} event.editorContext.value Cell value
     */
    onBeforeCellEditStart: ((event: { source: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Field, finalize: { context?: object }, value: any } }) => boolean|void)|string
    /**
     * Fired when the [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Popup} event.source This Popup
     */
    onBeforeClose: ((event: { source: Popup }) => void)|string
    /**
     * This event is fired prior to starting a column drag gesture. The drag is canceled if a listener returns `false`.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    onBeforeColumnDragStart: ((event: { source: Grid, column: Column, event: Event }) => boolean|void)|string
    /**
     * This event is fired when a column is dropped, and you can return false from a listener to abort the operation.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Column} event.newParent The new parent column.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    onBeforeColumnDropFinalize: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, event: Event, region: string }) => boolean|void)|string
    /**
     * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location[]} event.cells The cells about to be copied or cut
     * @param {string} event.data The string data about to be copied or cut
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other beforeCopy events
     */
    onBeforeCopy: ((event: { source: Grid, cells: Location[], data: string, isCut: boolean, entityName: string }) => Promise<boolean|void>)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before an event is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or by the
     * event editor. Return `false` to immediately veto the removal (or a `Promise` yielding `true` or `false`
     * for async vetoing).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#event-beforeEventDelete)
     * @param {object} event Event object
     * @param {Scheduler|any} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeEventDelete: ((event: { source: Scheduler|any, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Grid before the cell editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * @param {object} event Event object
     * @param {Grid} event.grid Target grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onBeforeFinishCellEdit: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fires before the component stores a record's histogram data into the cache.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#event-beforeHistogramDataCacheSet)
     * @param {object} event Event object
     * @param {TimelineHistogram} event.source The component instance
     * @param {Model} event.record Record the histogram data of which is ready.
     * @param {object} event.data The record histogram data.
     */
    onBeforeHistogramDataCacheSet: ((event: { source: TimelineHistogram, record: Model, data: object }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before pan starts. Return `false` to prevent the operation.
     * @param {object} event Event object
     * @param {Event} event.event The native browser DOM event
     */
    onBeforePan: ((event: { event: Event }) => boolean|void)|string
    /**
     * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData about to be pasted
     * @param {Location} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other beforePaste events
     */
    onBeforePaste: ((event: { source: Grid, clipboardData: string, targetCell: Location, entityName: string }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Grid before export started. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {object} event.config Export config
     */
    onBeforePdfExport: ((event: { config: object }) => boolean|void)|string
    /**
     * Fired before the [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) is changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onBeforePresetChange: ((event: { source: Scheduler, startDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Fires before the component renders a row.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#event-beforeRenderHistogramRow)
     * @param {object} event Event object
     * @param {TimelineHistogram} event.source The component instance
     * @param {Model} event.record Record the histogram data of which is ready.
     * @param {Partial<HistogramConfig>} event.histogramConfig Configuration object that will be applied to `histogramWidget`.
     * @param {Histogram} event.histogramWidget The underlying widget that is used to render a chart.
     */
    onBeforeRenderHistogramRow: ((event: { source: TimelineHistogram, record: Model, histogramConfig: Partial<HistogramConfig>, histogramWidget: Histogram }) => void)|string
    /**
     * Fires before the component renders a histogram in a cell.
     * @param {object} event Event object
     * @param {TimelineHistogram} event.source The component instance
     * @param {Model} event.record Record the histogram data of which is ready.
     * @param {Partial<HistogramConfig>} event.histogramConfig Configuration object that will be applied to `histogramWidget`.
     * @param {Histogram} event.histogramWidget The underlying widget that is used to render a chart.
     */
    onBeforeRenderRecordHistogram: ((event: { source: TimelineHistogram, record: Model, histogramConfig: Partial<HistogramConfig>, histogramWidget: Histogram }) => void)|string
    /**
     * Fires before a row is rendered.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Row} event.row The row about to be rendered.
     * @param {Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    onBeforeRenderRow: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows are about to be rendered
     * @param {object} event Event object
     * @param {Grid} event.source This grid.
     */
    onBeforeRenderRows: ((event: { source: Grid }) => void)|string
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records to be deselected in this operation.
     * @param {Model[]} event.selected The records to be selected in this operation.
     * @param {Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Location[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Location[]} event.selectedCells The cells to be selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    onBeforeSelectionChange: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fired when a group is going to be expanded or collapsed using the UI.
     * Returning `false` from a listener prevents the operation
     * @param {object} event Event object
     * @param {Model} event.groupRecord Group record
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     * @param {Event} event.domEvent The user interaction event (eg a `click` event) if the toggle request was instigated by user interaction.
     */
    onBeforeToggleGroup: ((event: { groupRecord: Model, collapse: boolean, domEvent: Event }) => boolean|void)|string
    /**
     * Fired before a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    onBeforeToggleNode: ((event: { source: Grid, record: Model, collapse: boolean }) => void)|string
    /**
     * Fires on the owning Grid when editing is cancelled
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Event} event.event Included if the cancellation was triggered by a DOM event
     */
    onCancelCellEdit: ((event: { source: Grid, editorContext: Location, event: Event }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellContextMenu: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellDblClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * This event fires on the owning grid before the context menu is shown for a cell.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#event-cellMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuBeforeShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column, record: Model }) => boolean|void)|string
    /**
     * This event fires on the owning grid when an item is selected in the cell context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid after the context menu is shown for a cell.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid when a check item is toggled in the cell context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     * @param {boolean} event.checked Checked or not
     */
    onCellMenuToggleItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model, checked: boolean }) => void)|string
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOut: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOver: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onCollapse: ((event: { source: Panel }) => void)|string
    /**
     * Fired before a parent node record is collapsed.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record which has been collapsed.
     */
    onCollapseNode: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * This event is fired when a column is being dragged, and you can set the `valid` flag on t
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Event} event.event The browser event.
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     */
    onColumnDrag: ((event: { source: Grid, column: Column, insertBefore: Column, event: Event, context: { valid: boolean } }) => void)|string
    /**
     * This event is fired when a column drag gesture has started.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    onColumnDragStart: ((event: { source: Grid, column: Column, event: Event }) => void)|string
    /**
     * This event is always fired after a column is dropped. The `valid` param is true if the operation was not
     * vetoed and the column was moved in the column store.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Column} event.newParent The new parent column.
     * @param {boolean} event.valid true if the operation was not vetoed.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    onColumnDrop: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, valid: boolean, event: Event, region: string }) => boolean|void)|string
    /**
     * This event fires on the owning widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Widget} event.source The owning widget
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     */
    onContextMenuItem: ((event: { source: Widget, menu: Menu, item: MenuItem }) => void)|string
    /**
     * This event fires on the owning widget when a check item is toggled in the context menu.
     * @param {object} event Event object
     * @param {Widget} event.source The owning widget
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {boolean} event.checked Checked or not
     */
    onContextMenuToggleItem: ((event: { source: Widget, menu: Menu, item: MenuItem, checked: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a copy action is performed.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location[]} event.cells The cells about to be copied or cut
     * @param {string} event.copiedDataString The concatenated data string that was copied or cut
     * @param {boolean} event.isCut `true` if this was a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other copy events
     */
    onCopy: ((event: { source: Grid, cells: Location[], copiedDataString: string, isCut: boolean, entityName: string }) => void)|string
    /**
     * Fired when data in the store changes.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#event-dataChange)
     * @param {object} event Event object
     * @param {Grid} event.source Owning grid
     * @param {Store} event.store The originating store
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'updatemultiple'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onDataChange: ((event: { source: Grid, store: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired when the range of dates encapsulated by the UI changes. This will be when
     * moving a view in time by reconfiguring its [timeAxis](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-timeAxis). This will happen
     * when zooming, or changing [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-viewPreset).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#event-dateRangeChange)
     * @param {object} event Event object
     * @param {TimelineBase} event.source This Scheduler/Gantt instance.
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onDateRangeChange: ((event: { source: TimelineBase, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid} event.source
     * @param {Model[]|object} event.selectedCells The cells that is currently being dragged over
     */
    onDragSelecting: ((event: { source: Grid, selectedCells: Model[]|object|Partial<ModelConfig> }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onExpand: ((event: { source: Panel }) => void)|string
    /**
     * Fired after a parent node record is expanded.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record which has been expanded.
     */
    onExpandNode: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * Fired when a file is dropped on the widget element
     * @param {object} event Event object
     * @param {Grid} event.source The owning Grid instance
     * @param {DataTransferItem} event.file The dropped file descriptor
     * @param {DragEvent} event.domEvent The native DragEvent
     */
    onFileDrop: ((event: { source: Grid, file: DataTransferItem, domEvent: DragEvent }) => void)|string
    /**
     * Fires on the owning Grid when cell editing is finished
     * @param {object} event Event object
     * @param {Grid} event.grid Target grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onFinishCellEdit: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fires when the component generates points for the [scale column](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceHistogram#property-scaleColumn).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#event-generateScalePoints)
     * @param {object} event Event object
     * @param {ResourceHistogram} event.source The component instance
     * @param {ScalePoint[]} event.scalePoints Array of objects representing scale points. Each entry can have properties:  * `value` - point value * `unit` - point value unit * `text` - label text (if not provided the point will not have a label displayed)
     */
    onGenerateScalePoints: ((event: { source: ResourceHistogram, scalePoints: ScalePoint[] }) => void)|string
    /**
     * Fired when a row drag operation is aborted
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {MouseEvent} event.event
     */
    onGridRowAbort: ((event: { source: DragHelper, context: object, event: MouseEvent }) => void)|string
    /**
     * Fired before dragging starts, return false to prevent the drag operation.
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent|TouchEvent} event.event
     */
    onGridRowBeforeDragStart: ((event: { source: DragHelper, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => boolean|void)|string
    /**
     * Fired before the row drop operation is finalized. You can return false to abort the drop operation, or a
     * Promise yielding `true` / `false` which allows for asynchronous abort (e.g. first show user a confirmation dialog).
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the `record`, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    onGridRowBeforeDropFinalize: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => Promise<boolean|void>)|string
    /**
     * Fired while the row is being dragged, in the listener function you have access to `context.insertBefore` a grid /
     * tree record, and additionally `context.parent` (a TreeNode) for trees. You can signal that the drop position is
     * valid or invalid by setting `context.valid = false;`
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent} event.event
     */
    onGridRowDrag: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[] }, event: MouseEvent }) => void)|string
    /**
     * Fired when dragging starts.
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent|TouchEvent} event.event
     */
    onGridRowDragStart: ((event: { source: DragHelper, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => void)|string
    /**
     * Fired after the row drop operation has completed, regardless of validity
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid true or false depending on whether the drop position was valid
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model} event.context.record [DEPRECATED] The dragged row record
     * @param {Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the record, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    onGridRowDrop: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, record: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => void)|string
    /**
     * This event fires on the owning Grid before the context menu is shown for a header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/HeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#event-headerMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     */
    onHeaderMenuBeforeShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => boolean|void)|string
    /**
     * This event fires on the owning Grid when an item is selected in the header context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     */
    onHeaderMenuItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid after the context menu is shown for a header
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     */
    onHeaderMenuShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid when a check item is toggled in the header context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {boolean} event.checked Checked or not
     */
    onHeaderMenuToggleItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, checked: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Fires after the component retrieves a record's histogram data and stores
     * it into the cache.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#event-histogramDataCacheSet)
     * @param {object} event Event object
     * @param {TimelineHistogram} event.source The component instance
     * @param {Model} event.record Record the histogram data of which is ready.
     * @param {object} event.data The record histogram data.
     */
    onHistogramDataCacheSet: ((event: { source: TimelineHistogram, record: Model, data: object }) => void)|string
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOut: ((event: { event: MouseEvent }) => void)|string
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOver: ((event: { event: MouseEvent }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a paste action is performed.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData that was pasted
     * @param {Model[]} event.modifiedRecords The records which have been modified due to the paste action
     * @param {Location} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other paste events
     */
    onPaste: ((event: { source: Grid, clipboardData: string, modifiedRecords: Model[], targetCell: Location, entityName: string }) => void)|string
    /**
     * Fires on the owning Grid when export has finished
     * @param {object} event Event object
     * @param {Response} event.response Optional response, if received
     * @param {Error} event.error Optional error, if exception occurred
     */
    onPdfExport: ((event: { response?: Response, error?: Error }) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => void)|string
    /**
     * Fired after the [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) has changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.centerDate The new center date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onPresetChange: ((event: { source: Scheduler, startDate: Date, centerDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fires after a row is rendered.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Row} event.row The row that has been rendered.
     * @param {Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    onRenderRow: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows have been rendered
     * @param {object} event Event object
     * @param {Grid} event.source This grid.
     */
    onRenderRows: ((event: { source: Grid }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * This event fires on the owning scheduler before the context menu is shown for a resource.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ResourceMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#event-resourceMenuBeforeShow)
     * @param {object} event Event object
     * @param {Scheduler} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     * @param {SchedulerResourceModel} event.resourceRecord Record
     */
    onResourceMenuBeforeShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column, resourceRecord: SchedulerResourceModel }) => boolean|void)|string
    /**
     * This event fires on the owning scheduler when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {SchedulerResourceModel} event.record Record
     */
    onResourceMenuItem: ((event: { source: Scheduler, menu: Menu, item: MenuItem, record: SchedulerResourceModel }) => void)|string
    /**
     * This event fires on the owning scheduler after the context menu is shown for a resource.
     * @param {object} event Event object
     * @param {Scheduler} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {SchedulerResourceModel} event.record Record
     */
    onResourceMenuShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, record: SchedulerResourceModel }) => void)|string
    /**
     * This event fires on the owning grid when a check item is toggled in the context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {SchedulerResourceModel} event.resourceRecord Record
     * @param {boolean} event.checked Checked or not
     */
    onResourceMenuToggleItem: ((event: { source: Scheduler, menu: Menu, item: MenuItem, resourceRecord: SchedulerResourceModel, checked: boolean }) => void)|string
    /**
     * Triggered for click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured with
     * `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeClick: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for right-click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeContextMenu: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for double-click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeDblClick: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse down ona resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeMouseDown: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse out of a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeMouseOut: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse over on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeMouseOver: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse up ona resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeMouseUp: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for click on a resource time range. Only triggered if the ResourceTimeRange feature is configured with
     * `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeClick: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for right-click on a resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeContextMenu: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for double-click on a resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeDblClick: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse down ona resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeMouseDown: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse out of a resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeMouseOut: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse over on a resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeMouseOver: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse up ona resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeMouseUp: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    onResponsive: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string
    /**
     * Grid has scrolled vertically
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {number} event.scrollTop The vertical scroll position.
     */
    onScroll: ((event: { source: Grid, scrollTop: number }) => void)|string
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select'|'deselect'} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records deselected in this operation.
     * @param {Model[]} event.selected The records selected in this operation.
     * @param {Model[]} event.selection The records in the new selection.
     * @param {Location[]} event.deselectedCells The cells deselected in this operation.
     * @param {Location[]} event.selectedCells The cells selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the new selection.
     */
    onSelectionChange: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => void)|string
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    onSelectionModeChange: ((event: { selectionMode: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * Fires when splitting the Grid.
     * @param {object} event Event object
     * @param {GridBase[]} event.subViews The sub views created by the split
     * @param {object} event.options The options passed to the split call
     * @param {'horizontal'|'vertical'|'both'} event.options.direction The direction of the split
     * @param {Column} event.options.atColumn The column to split at
     * @param {Model} event.options.atRecord The record to split at
     */
    onSplit: ((event: { subViews: GridBase[], options: { direction: 'horizontal'|'vertical'|'both', atColumn: Column, atRecord: Model } }) => void)|string
    /**
     * Fired by the Grid when the collapse icon is clicked. Return `false` to prevent the default collapse action,
     * if you want to implement your own behavior.
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterCollapseClick: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => boolean|void)|string
    /**
     * Fired by the Grid after a sub-grid has been resized using the splitter
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The resized subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterDragEnd: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fired by the Grid when a sub-grid resize gesture starts
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The subgrid about to be resized
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterDragStart: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fires on the owning Grid when editing starts
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onStartCellEdit: ((event: { source: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fires after a sub grid is collapsed.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance
     * @param {SubGrid} event.subGrid The sub grid instance
     */
    onSubGridCollapse: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Fires after a sub grid is expanded.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance
     * @param {SubGrid} event.subGrid The sub grid instance
     */
    onSubGridExpand: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Fired when the timeaxis has changed, for example by zooming or configuring a new time span.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {object} event.config Config object used to reconfigure the time axis.
     * @param {Date} event.config.startDate New start date (if supplied)
     * @param {Date} event.config.endDate New end date (if supplied)
     */
    onTimeAxisChange: ((event: { source: Scheduler, config: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fires after a click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderClick: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a right click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderContextMenu: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a double click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderDblClick: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget before the context menu is shown for the time axis header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeAxisHeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#event-timeAxisHeaderMenuBeforeShow)
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Time axis column
     */
    onTimeAxisHeaderMenuBeforeShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => boolean|void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget when an item is selected in the header context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Time axis column
     */
    onTimeAxisHeaderMenuItem: ((event: { source: Scheduler, menu: Menu, item: MenuItem, column: Column }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget after the context menu is shown for a header
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Time axis column
     */
    onTimeAxisHeaderMenuShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.event DEPRECATED 5.3.0 Use `domEvent` instead
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTimeRangeHeaderClick: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, event: MouseEvent, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a right click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.event DEPRECATED 5.3.0 Use `domEvent` instead
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTimeRangeHeaderContextMenu: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, event: MouseEvent, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a double click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.event DEPRECATED 5.3.0 Use `domEvent` instead
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTimeRangeHeaderDblClick: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, event: MouseEvent, domEvent: MouseEvent }) => void)|string
    /**
     * Fired when the pointer-activated [timelineContext](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineDomEvents#property-timelineContext) has changed.
     * @param {object} event Event object
     * @param {TimelineContext} event.oldContext The tick/resource context being deactivated.
     * @param {TimelineContext} event.context The tick/resource context being activated.
     */
    onTimelineContextChange: ((event: { oldContext: TimelineContext, context: TimelineContext }) => void)|string
    /**
     * Fired when the *scheduler* viewport (not the overall Scheduler element) changes size.
     * This happens when the grid changes height, or when the subgrid which encapsulates the
     * scheduler column changes width.
     * @param {object} event Event object
     * @param {Widget} event.source This Scheduler
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onTimelineViewportResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Group expanded or collapsed
     * @param {object} event Event object
     * @param {Model} event.groupRecord Group record
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     */
    onToggleGroup: ((event: { groupRecord: Model, collapse: boolean }) => void)|string
    /**
     * Fired after a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    onToggleNode: ((event: { record: Model, collapse: boolean }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Tool} event.source This Panel.
     * @param {Tool} event.tool The tool which is being clicked.
     */
    onToolClick: ((event: { source: Tool, tool: Tool }) => void)|string
    /**
     * Fires when un-splitting the Grid.
     */
    onUnsplit: (() => void)|string
    /**
     * Fired when the range of dates visible within the viewport changes. This will be when
     * scrolling along a time axis.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#event-visibleDateRangeChange)
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onVisibleDateRangeChange: ((event: { source: Scheduler, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
}

/**
 * View showing the utilization levels of the project resources.
 * The resources are displayed in a summary list where each row can
 * be expanded to show the events assigned for the resource.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization)
 */
export class ResourceUtilization extends ResourceHistogram {
    /**
     * An object containing Features
     */
    features: ResourceUtilizationFeaturesType
    /**
     * Fires before an assignment is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or
     * by the event editor. Can for example be used to display a custom dialog to confirm deletion, in which
     * case records should be "manually" removed after confirmation:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#event-beforeAssignmentDelete)
     * @param {object} event Event object
     * @param {Scheduler} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeAssignmentDelete: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before an event is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or by the
     * event editor. Return `false` to immediately veto the removal (or a `Promise` yielding `true` or `false`
     * for async vetoing).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#event-beforeEventDelete)
     * @param {object} event Event object
     * @param {Scheduler|any} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeEventDelete: ((event: { source: Scheduler|any, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean|void>)|string
    /**
     * Fired before the [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) is changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onBeforePresetChange: ((event: { source: Scheduler, startDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records to be deselected in this operation.
     * @param {Model[]} event.selected The records to be selected in this operation.
     * @param {Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Location[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Location[]} event.selectedCells The cells to be selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    onBeforeSelectionChange: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/ResourceUtilization#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellContextMenu: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellDblClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOut: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOver: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid} event.source
     * @param {Model[]|object} event.selectedCells The cells that is currently being dragged over
     */
    onDragSelecting: ((event: { source: Grid, selectedCells: Model[]|object|Partial<ModelConfig> }) => void)|string
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOut: ((event: { event: MouseEvent }) => void)|string
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOver: ((event: { event: MouseEvent }) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => void)|string
    /**
     * Fired after the [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) has changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.centerDate The new center date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onPresetChange: ((event: { source: Scheduler, startDate: Date, centerDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    onResponsive: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select'|'deselect'} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records deselected in this operation.
     * @param {Model[]} event.selected The records selected in this operation.
     * @param {Model[]} event.selection The records in the new selection.
     * @param {Location[]} event.deselectedCells The cells deselected in this operation.
     * @param {Location[]} event.selectedCells The cells selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the new selection.
     */
    onSelectionChange: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => void)|string
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    onSelectionModeChange: ((event: { selectionMode: object }) => void)|string
    /**
     * Fires after a click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderClick: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a right click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderContextMenu: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a double click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderDblClick: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fired when the pointer-activated [timelineContext](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineDomEvents#property-timelineContext) has changed.
     * @param {object} event Event object
     * @param {TimelineContext} event.oldContext The tick/resource context being deactivated.
     * @param {TimelineContext} event.context The tick/resource context being activated.
     */
    onTimelineContextChange: ((event: { oldContext: TimelineContext, context: TimelineContext }) => void)|string
    /**
     * Base constructor, passes arguments to [construct](https://bryntum.com/products/schedulerpro/docs/api/Core/Base#function-construct).
     * @param {object} args Usually called with a config object, but accepts any params
     */
    constructor(...args: object[]);
    /**
     * The view store records wrap "real" resources and assignments.
     * This method resolves a record to its original record resource or assignment.
     * If the record does not wrap any record (happens for example for parent records when
     * using [TreeGroup](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/TreeGroup) feature) then the method returns the record itself.
     * @param {ResourceUtilizationModel} record The view store record
     */
    resolveRecordToOrigin(record: ResourceUtilizationModel): ResourceModel|AssignmentModel|ResourceUtilizationModel;
}

type SchedulerProFeaturesType = {
    calendarHighlight: CalendarHighlight
    cellCopyPaste: CellCopyPaste
    cellEdit: CellEdit
    cellMenu: CellMenu
    cellTooltip: CellTooltip
    columnAutoWidth: ColumnAutoWidth
    columnDragToolbar: ColumnDragToolbar
    columnLines: ColumnLines
    columnPicker: ColumnPicker
    columnRename: ColumnRename
    columnReorder: ColumnReorder
    columnResize: ColumnResize
    dependencies: Dependencies
    dependencyEdit: DependencyEdit
    eventBuffer: EventBuffer
    eventCopyPaste: EventCopyPaste
    eventDrag: EventDrag
    eventDragCreate: EventDragCreate
    eventDragSelect: EventDragSelect
    eventEdit: EventEdit
    eventFilter: EventFilter
    eventMenu: EventMenu
    eventNonWorkingTime: EventNonWorkingTime
    eventResize: EventResize
    eventSegmentDrag: EventSegmentDrag
    eventSegmentResize: EventSegmentResize
    eventSegments: EventSegments
    eventTooltip: EventTooltip
    excelExporter: ExcelExporter
    fileDrop: FileDrop
    fillHandle: FillHandle
    filter: Filter
    filterBar: FilterBar
    group: Group
    groupSummary: GroupSummary
    headerMenu: HeaderMenu
    headerZoom: HeaderZoom
    labels: Labels
    mergeCells: MergeCells
    nestedEvents: NestedEvents
    nonWorkingTime: NonWorkingTime
    pan: Pan
    pdfExport: PdfExport
    percentBar: PercentBar
    print: Print
    quickFind: QuickFind
    regionResize: RegionResize
    resourceMenu: ResourceMenu
    resourceNonWorkingTime: ResourceNonWorkingTime
    resourceTimeRanges: ResourceTimeRanges
    rowCopyPaste: RowCopyPaste
    rowExpander: RowExpander
    rowReorder: RowReorder
    rowResize: RowResize
    scheduleContext: ScheduleContext
    scheduleMenu: ScheduleMenu
    scheduleTooltip: ScheduleTooltip
    search: Search
    simpleEventEdit: SimpleEventEdit
    sort: Sort
    split: Split
    stickyCells: StickyCells
    stickyEvents: StickyEvents
    stripe: Stripe
    summary: Summary
    taskEdit: TaskEdit
    timeAxisHeaderMenu: TimeAxisHeaderMenu
    timeRanges: TimeRanges
    timeSelection: TimeSelection
    timeSpanHighlight: TimeSpanHighlight
    tree: Tree
    treeGroup: TreeGroup
    versions: Versions
}

type SchedulerProFeaturesConfigType = {
    calendarHighlight: string|boolean|Partial<CalendarHighlightConfig>
    cellCopyPaste: string|boolean|Partial<CellCopyPasteConfig>
    cellEdit: string|boolean|Partial<CellEditConfig>
    cellMenu: string|boolean|Partial<CellMenuConfig>
    cellTooltip: string|boolean|Partial<CellTooltipConfig>
    columnAutoWidth: string|boolean|Partial<ColumnAutoWidthConfig>
    columnDragToolbar: string|boolean|Partial<ColumnDragToolbarConfig>
    columnLines: string|boolean|Partial<ColumnLinesConfig>
    columnPicker: string|boolean|Partial<ColumnPickerConfig>
    columnRename: string|boolean|Partial<ColumnRenameConfig>
    columnReorder: string|boolean|Partial<ColumnReorderConfig>
    columnResize: string|boolean|Partial<ColumnResizeConfig>
    dependencies: string|boolean|Partial<DependenciesConfig>
    dependencyEdit: string|boolean|Partial<DependencyEditConfig>
    eventBuffer: string|boolean|Partial<EventBufferConfig>
    eventCopyPaste: string|boolean|Partial<EventCopyPasteConfig>
    eventDrag: string|boolean|Partial<EventDragConfig>
    eventDragCreate: string|boolean|Partial<EventDragCreateConfig>
    eventDragSelect: string|boolean|Partial<EventDragSelectConfig>
    eventEdit: string|boolean|Partial<EventEditConfig>
    eventFilter: string|boolean|Partial<EventFilterConfig>
    eventMenu: string|boolean|Partial<EventMenuConfig>
    eventNonWorkingTime: string|boolean|Partial<EventNonWorkingTimeConfig>
    eventResize: string|boolean|Partial<EventResizeConfig>
    eventSegmentDrag: string|boolean|Partial<EventSegmentDragConfig>
    eventSegmentResize: string|boolean|Partial<EventSegmentResizeConfig>
    eventSegments: string|boolean|Partial<EventSegmentsConfig>
    eventTooltip: string|boolean|Partial<EventTooltipConfig>
    excelExporter: string|boolean|Partial<ExcelExporterConfig>
    fileDrop: string|boolean|Partial<FileDropConfig>
    fillHandle: string|boolean|Partial<FillHandleConfig>
    filter: string|boolean|Partial<FilterConfig>
    filterBar: string|boolean|Partial<FilterBarConfig>
    group: string|boolean|Partial<GroupConfig>
    groupSummary: string|boolean|Partial<GroupSummaryConfig>
    headerMenu: string|boolean|Partial<HeaderMenuConfig>
    headerZoom: string|boolean|Partial<HeaderZoomConfig>
    labels: string|boolean|Partial<LabelsConfig>
    mergeCells: string|boolean|Partial<MergeCellsConfig>
    nestedEvents: string|boolean|Partial<NestedEventsConfig>
    nonWorkingTime: string|boolean|Partial<NonWorkingTimeConfig>
    pan: string|boolean|Partial<PanConfig>
    pdfExport: string|boolean|Partial<PdfExportConfig>
    percentBar: string|boolean|Partial<PercentBarConfig>
    print: string|boolean|Partial<PrintConfig>
    quickFind: string|boolean|Partial<QuickFindConfig>
    regionResize: string|boolean|Partial<RegionResizeConfig>
    resourceMenu: string|boolean|Partial<ResourceMenuConfig>
    resourceNonWorkingTime: string|boolean|Partial<ResourceNonWorkingTimeConfig>
    resourceTimeRanges: string|boolean|Partial<ResourceTimeRangesConfig>
    rowCopyPaste: string|boolean|Partial<RowCopyPasteConfig>
    rowExpander: string|boolean|Partial<RowExpanderConfig>
    rowReorder: string|boolean|Partial<RowReorderConfig>
    rowResize: string|boolean|Partial<RowResizeConfig>
    scheduleContext: string|boolean|Partial<ScheduleContextConfig>
    scheduleMenu: string|boolean|Partial<ScheduleMenuConfig>
    scheduleTooltip: string|boolean|Partial<ScheduleTooltipConfig>
    search: string|boolean|Partial<SearchConfig>
    simpleEventEdit: string|boolean|Partial<SimpleEventEditConfig>
    sort: string|boolean|Partial<SortConfig>
    split: string|boolean|Partial<SplitConfig>
    stickyCells: string|boolean|Partial<StickyCellsConfig>
    stickyEvents: string|boolean|Partial<StickyEventsConfig>
    stripe: string|boolean|Partial<StripeConfig>
    summary: string|boolean|Partial<SummaryConfig>
    taskEdit: string|boolean|Partial<TaskEditConfig>
    timeAxisHeaderMenu: string|boolean|Partial<TimeAxisHeaderMenuConfig>
    timeRanges: string|boolean|Partial<TimeRangesConfig>
    timeSelection: string|boolean|Partial<TimeSelectionConfig>
    timeSpanHighlight: string|boolean|Partial<TimeSpanHighlightConfig>
    tree: string|boolean|Partial<TreeConfig>
    treeGroup: string|boolean|Partial<TreeGroupConfig>
    versions: string|boolean|Partial<VersionsConfig>
}

/**
 * Type with configuration options for [SchedulerPro](https://bryntum.com/products/grid/docs/api/SchedulerPro/view/SchedulerPro) class.
 */
type SchedulerProConfig = ContainerItemConfig & {
    type: 'schedulerpro'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * Set to `false` to not allow creating dependencies
     */
    allowCreate: boolean
    /**
     * `false` to require a drop on a target event bar side circle to define the dependency type.
     * If dropped on the event bar, the `defaultValue` of the DependencyModel `type` field will be used to
     * determine the target task side.
     */
    allowDropOnEventBar: boolean
    /**
     * Keep the tooltip open if user moves the mouse over it.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-allowOver)
     */
    allowOver: boolean
    /**
     * Set to `false` if you don't want to allow events overlapping times for any one resource (defaults to `true`).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-allowOverlap)
     */
    allowOverlap: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Set to true to anchor tooltip to the triggering target. If set to `false`, the tooltip
     * will align to the mouse position. When set to `false`, it will also set `anchor: false`
     * to hide anchor arrow.
     */
    anchorToTarget: boolean
    /**
     * Set to `false` to prevent remove row animation and remove the delay related to that.
     */
    animateRemovingRows: boolean
    /**
     * When the [Tree](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/Tree) feature is in use and the Store is a tree store, this
     * config may be set to `true` to visually animate branch node expand and collapse operations.
     * *This is not supported in Scheduler and Gantt*
     */
    animateTreeNodeToggle: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * The optional [AssignmentStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore), holding assignments between resources and events.
     * Required for multi assignments.
     */
    assignmentStore: AssignmentStore|Partial<AssignmentStoreConfig>
    /**
     * Inline assignments, will be loaded into the backing project's AssignmentStore.
     */
    assignments: AssignmentModel[]|Partial<AssignmentModelConfig>[]
    /**
     * You can set this option to `false` to make the timeline panel start and end on the exact provided
     * [startDate](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-startDate)/[endDate](#Scheduler/view/TimelineBase#config-endDate) w/o adjusting them.
     */
    autoAdjustTimeAxis: boolean
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#function-hide) when the user clicks or
     * taps outside its widget. Configure as `false` to make a Tooltip non-transient when user clicks outside it.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-autoClose)
     */
    autoClose: boolean
    /**
     * Automatically set grids height to fit all rows (no scrolling in the grid). In general you should avoid
     * using `autoHeight: true`, since it will bypass Grids virtual rendering and render all rows at once, which
     * in a larger grid is really bad for performance.
     */
    autoHeight: boolean
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#function-hide) when the mouse exits the target
     * element. Configure as `false` to make a Tooltip non-transient.
     */
    autoHide: boolean
    /**
     * Show immediately when created
     */
    autoShow: boolean
    /**
     * Update assigned [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * Controls how much space to leave between stacked event bars in px.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-barMargin)
     */
    barMargin: number
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-bbar)
     */
    bbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-bodyCls)
     */
    bodyCls: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * This config defines the size of the start and end invisible parts of the timespan when [infiniteScroll](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineScroll#config-infiniteScroll) set to `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-bufferCoef)
     */
    bufferCoef: number
    /**
     * This config defines the scroll limit, which, when exceeded will cause a timespan shift.
     * The limit is calculated as the `panelWidth * [bufferCoef](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineScroll#config-bufferCoef) * bufferThreshold`. During scrolling, if the left or right side
     * has less than that of the rendered content - a shift is triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-bufferThreshold)
     */
    bufferThreshold: number
    /**
     * Inline calendars, will be loaded into the backing project's CalendarManagerStore.
     */
    calendars: CalendarModel[]|Partial<CalendarModelConfig>[]
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Show a tool in the header to close this Popup, and allow `ESC` close it.
     * The tool is available in the [tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Toolable#property-tools) object
     * under the name `close`. It uses the CSS class `b-popup-close` to apply a
     * default close icon. This may be customized with your own CSS rules.
     */
    closable: boolean
    /**
     * The action to take when calling the [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) method.
     * By default, the popup is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-closeAction)
     */
    closeAction: 'hide'|'destroy'
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-cls)
     */
    cls: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-collapsible)
     */
    collapsible: boolean|Partial<PanelCollapserConfig>|Partial<PanelCollapserOverlayConfig>
    /**
     * Set to `false` to not show column lines. End result might be overruled by/differ between themes.
     */
    columnLines: boolean
    /**
     * Accepts column definitions for the grid during initialization. They will be used to create
     * [Column](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column) instances that are added to a [ColumnStore](#Grid/data/ColumnStore).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-columns)
     */
    columns: ColumnStore|Partial<GridColumnConfig>[]|Partial<ColumnStoreConfig>
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Event which is used to show context menus.
     * Available options are: 'contextmenu', 'click', 'dblclick'.
     */
    contextMenuTriggerEvent: 'contextmenu'|'click'|'dblclick'
    /**
     * If true, a new event will be created when user double-clicks on a time axis cell (if scheduler is not in
     * read only mode).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-createEventOnDblClick)
     * @param {boolean} createEventOnDblClick.useEventModelDefaults set to `true` to set default duration based on the defaults specified by the [duration](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/EventModel#field-duration) and [durationUnit](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/EventModel#field-durationUnit) fields.
     */
    createEventOnDblClick: boolean|object
    /**
     * A tooltip config object that will be applied to the dependency creation [Tooltip](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip)
     */
    creationTooltip: Partial<TooltipConfig>
    /**
     * A template function that will be called to generate the HTML contents of the dependency creation tooltip.
     * You can return either an HTML string or a [DomConfig](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DomHelper#typedef-DomConfig) object.
     * @param {object} data Data about the dependency being created
     * @param {TimeSpan} data.source The from event
     * @param {TimeSpan} data.target The target event
     * @param {string} data.fromSide The from side (start, end, top, bottom)
     * @param {string} data.toSide The target side (start, end, top, bottom)
     * @param {boolean} data.valid The validity of the dependency
     * @returns {string|DomConfig}
     */
    creationTooltipTemplate: (data: { source: TimeSpan, target: TimeSpan, fromSide: string, toSide: string, valid: boolean }) => string|DomConfig
    /**
     * Supply a [CrudManager](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/CrudManager) instance or a config object if you want to use
     * CrudManager for handling data.
     */
    crudManager: Partial<CrudManagerConfig>|CrudManager
    /**
     * Class that should be used to instantiate a CrudManager in case it's provided as a simple object to
     * [crudManager](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerStores#config-crudManager) config.
     */
    crudManagerClass: typeof CrudManager
    /**
     * Class implementing the popup resolving *scheduling cycles*.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-cycleResolutionPopupClass)
     */
    cycleResolutionPopupClass: typeof CycleResolutionPopup
    /**
     * Convenient shortcut to set data in grids store both during initialization and at runtime. Can also be
     * used to retrieve data at runtime, although we do recommend interacting with Grids store instead using
     * the [store](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#property-store) property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-data)
     */
    data: object[]|Model[]
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The date to display when used as a component of a Calendar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-date)
     */
    date: Date
    /**
     * A [DateHelper](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat: string
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator: string
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * Region to which columns are added when they have none specified
     */
    defaultRegion: string
    /**
     * Generic resource image, used when provided `imageUrl` or `image` fields or path calculated from resource
     * name are all invalid. If left blank, resource name initials will be shown when no image can be loaded.
     */
    defaultResourceImageName: string
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * Inline dependencies, will be loaded into the backing project's DependencyStore.
     */
    dependencies: DependencyModel[]|Partial<DependencyModelConfig>[]
    /**
     * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked tasks.
     */
    dependencyIdField: string
    /**
     * The optional [DependencyStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore).
     */
    dependencyStore: DependencyStore|Partial<DependencyStoreConfig>
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-descriptionFormat)
     */
    descriptionFormat: string|string[]|boolean[]
    /**
     * A function that provides the textual description for this view. If provided, this function overrides the
     * [descriptionFormat](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-descriptionRenderer)
     * @param {Widget} view The active view in case the function is in another scope.
     * @returns {string} Description string
     */
    descriptionRenderer: (view: Widget) => string
    /**
     * Configure as `false` to preserve selection when clicking the empty schedule area.
     */
    deselectAllOnScheduleClick: boolean
    /**
     * Configure as `true` to deselect a selected event upon click.
     */
    deselectOnClick: boolean
    /**
     * true to destroy the store when the grid is destroyed
     */
    destroyStore: boolean
    /**
     * Configure as `true` to destroy the Project and stores when `this` is destroyed.
     */
    destroyStores: boolean
    /**
     * Set to `true` to not get a warning when using another base class than GridRowModel for your grid data. If
     * you do, and would like to use the full feature set of the grid then include the fields from GridRowModel
     * in your model definition.
     */
    disableGridRowModelWarning: boolean
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * The time (in milliseconds) that the Tooltip should stay visible for when it shows over its
     * target. If the tooltip is anchored to its target, then moving the mouse during this time
     * resets the timer so that the tooltip will remain visible.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-dismissDelay)
     */
    dismissDelay: number
    /**
     * Defines how dates will be formatted in tooltips etc. This config has priority over similar config on the
     * view preset. For allowed values see [format](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DateHelper#function-format-static).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-displayDateFormat)
     */
    displayDateFormat: string
    /**
     * Set to `true` to display special popups allowing user
     * to resolve [scheduling conflicts](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup),
     * [cycles](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup) or calendar misconfigurations.
     * The popup will suggest user ways to resolve the corresponding case.
     */
    displaySchedulingIssueResolutionPopup: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * Decimal precision used when displaying durations, used by tooltips and DurationColumn.
     * Specify `false` to use raw value
     */
    durationDisplayPrecision: number|boolean
    /**
     * Text or HTML to display when there is no data to display in the grid
     */
    emptyText: string
    /**
     * Allow using [Delete] and [Backspace] to remove events/assignments
     */
    enableDeleteKey: boolean
    /**
     * Set to `false` if you don't want event bar DOM updates to animate.
     */
    enableEventAnimations: boolean
    /**
     * Enables showing occurrences of recurring events across the scheduler's time axis.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-enableRecurringEvents)
     */
    enableRecurringEvents: boolean
    /**
     * Configure this as `true` to allow elements within cells to be styled as `position: sticky`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-enableSticky)
     */
    enableSticky: boolean
    /**
     * Set to true to allow text selection in the grid cells. Note, this cannot be used simultaneously with the
     * `RowReorder` feature.
     */
    enableTextSelection: boolean
    /**
     * Set to true to listen for CTRL-Z (CMD-Z on Mac OS) keyboard event and trigger undo (redo when SHIFT is
     * pressed). Only applicable when using a [StateTrackingManager](https://bryntum.com/products/schedulerpro/docs/api/Core/data/stm/StateTrackingManager).
     */
    enableUndoRedoKeys: boolean
    /**
     * The end date of the timeline (if not configure with [infiniteScroll](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-infiniteScroll)).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-endDate)
     */
    endDate: Date|string
    /**
     * The name of the end date parameter that will be passed to in every `eventStore` load request.
     */
    endParamName: string
    /**
     * Field from EventModel displayed as text in the bar when rendering
     */
    eventBarTextField: string
    /**
     * The template used to generate the markup of your events in the scheduler. To 'populate' the
     * eventBodyTemplate with data, use the [eventRenderer](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer) method.
     * @param {*} data Data passed from [eventRenderer](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer) method.
     * @returns {DomConfig|string|void}
     * @deprecated Since 5.6.2. Return markup/DomConfigs from [eventRenderer](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer) instead, will be removed in 6.0.0
     */
    eventBodyTemplate: (data: any) => DomConfig|string|void
    /**
     * Event color used by default. Events and resources can specify their own color, with priority order being:
     * Event -&gt; Resource -&gt; Scheduler default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-eventColor)
     */
    eventColor: EventColor
    /**
     * Defines how to handle overlapping events. Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-eventLayout)
     */
    eventLayout: 'stack'|'pack'|'mixed'|'none'|object
    /**
     * An empty function by default, but provided so that you can override it. This function is called each time
     * an event is rendered into the schedule to render the contents of the event. It's called with the event,
     * its resource and a `renderData` object which allows you to populate data placeholders inside the event
     * template. <strong>IMPORTANT</strong> You should never modify any data on the EventModel inside this method.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-eventRenderer)
     * @param {object} detail An object containing the information needed to render an Event.
     * @param {EventModel} detail.eventRecord The event record.
     * @param {ResourceModel} detail.resourceRecord The resource record.
     * @param {AssignmentModel} detail.assignmentRecord The assignment record.
     * @param {object} detail.renderData An object containing details about the event rendering.
     * @param {EventModel} detail.renderData.event The event record.
     * @param {DomClassList|string} detail.renderData.cls An object whose property names represent the CSS class names to be added to the event bar element. Set a property's value to truthy or falsy to add or remove the class name based on the property name. Using this technique, you do not have to know whether the class is already there, or deal with concatenation.
     * @param {DomClassList|string} detail.renderData.wrapperCls An object whose property names represent the CSS class names to be added to the event wrapper element. Set a property's value to truthy or falsy to add or remove the class name based on the property name. Using this technique, you do not have to know whether the class is already there, or deal with concatenation.
     * @param {DomClassList|string} detail.renderData.iconCls An object whose property names represent the CSS class names to be added to an event icon element. Note that an element carrying this icon class is injected into the event element *after* the renderer completes, *before* the renderer's created content. To disable this if the renderer takes full control and creates content using the iconCls, you can set `renderData.iconCls = null`.
     * @param {number} detail.renderData.left Vertical offset position (in pixels) on the time axis.
     * @param {number} detail.renderData.width Width in pixels of the event element.
     * @param {number} detail.renderData.height Height in pixels of the event element.
     * @param {string|<String, String>} detail.renderData.style Inline styles for the event bar DOM element. Use either 'border: 1px solid black' or `{ border: '1px solid black' }`
     * @param {string|<String, String>} detail.renderData.wrapperStyle Inline styles for wrapper of the event bar DOM element. Use either 'border: 1px solid green' or `{ border: '1px solid green' }`
     * @param {string} detail.renderData.eventStyle The `eventStyle` of the event. Use this to apply custom styles to the event DOM element
     * @param {string} detail.renderData.eventColor The `eventColor` of the event. Use this to set a custom color for the rendered event
     * @param {DomConfig>} detail.renderData.children An array of DOM configs used as children to the `b-sch-event` element. Can be populated with additional DOM configs to have more control over contents.
     * @returns {string|object|DomConfig|DomConfig>} A simple string, or a custom object which will be applied to the [eventBodyTemplate](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventBodyTemplate), creating the actual HTML
     */
    eventRenderer: (detail: { eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, renderData: { event: SchedulerEventModel, cls: DomClassList|string, wrapperCls: DomClassList|string, iconCls: DomClassList|string, left: number, width: number, height: number, style: string|Record<string, string>, wrapperStyle: string|Record<string, string>, eventStyle: string, eventColor: string, children: DomConfig[] } }) => string|object|DomConfig|DomConfig[]
    /**
     * `this` reference for the [eventRenderer](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer) function
     */
    eventRendererThisObj: object
    /**
     * Configure as `true`, or set property to `true` to disable event selection.
     */
    eventSelectionDisabled: boolean
    /**
     * The [EventStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) holding the events to be rendered into the scheduler.
     */
    eventStore: EventStore|Partial<EventStoreConfig>
    /**
     * Event style used by default. Events and resources can specify their own style, with priority order being:
     * Event -&gt; Resource -&gt; Scheduler default. Determines the appearance of the event by assigning a CSS class
     * to it. Available styles are:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-eventStyle)
     */
    eventStyle: 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null
    /**
     * Inline events, will be loaded into the backing project's EventStore.
     */
    events: EventModel[]|object[]|Partial<EventModelConfig>[]
    /**
     * An object containing Feature configuration objects (or `true` if no configuration is required)
     * keyed by the Feature class name in all lowercase.
     */
    features: Partial<SchedulerProFeaturesConfigType>
    /**
     * Set to `true` to stretch the last column in a grid with all fixed width columns
     * to fill extra available space if the grid's width is wider than the sum of all
     * configured column widths.
     */
    fillLastColumn: boolean
    /**
     * Specify `true` to force rendered events/tasks to fill entire ticks. This only affects rendering, start
     * and end dates retain their value on the data level.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-fillTicks)
     */
    fillTicks: boolean
    /**
     * Use fixed row height. Setting this to `true` will configure the underlying RowManager to use fixed row
     * height, which sacrifices the ability to use rows with variable height to gain a fraction better
     * performance.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-fixedRowHeight)
     */
    fixedRowHeight: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * By default a Popup is focused when it is shown.
     * Configure this as `false` to prevent automatic focus on show.
     */
    focusOnToFront: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-footer)
     */
    footer: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * DOM element to attach tooltip to. By default, the mouse entering this element will kick off a timer
     * (see [hoverDelay](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#config-hoverDelay)) to show itself.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-forElement)
     */
    forElement: HTMLElement
    /**
     * A CSS selector which targets child elements of the [forElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#config-forElement) that should produce a
     * tooltip when hovered over.
     */
    forSelector: string
    /**
     * Set to `true` to force the time columns to fit to the available space (horizontal or vertical depends on mode).
     * Note that setting [suppressFit](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-suppressFit) to `true`, will disable `forceFit` functionality. Zooming
     * cannot be used when `forceFit` is set.
     */
    forceFit: boolean
    /**
     * Refresh entire row when a record changes (`true`) or, if possible, only the cells affected (`false`).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-fullRowRefresh)
     */
    fullRowRefresh: boolean
    /**
     * A method allowing you to define date boundaries that will constrain resize, create and drag drop
     * operations. The method will be called with the Resource record, and the Event record.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-getDateConstraints)
     * @param {ResourceModel} resourceRecord The resource record
     * @param {EventModel} eventRecord The event record
     * @returns {object} Constraining object containing `start` and `end` constraints. Omitting either will mean that end is not constrained. So you can prevent a resize or move from moving *before* a certain time while not constraining the end date.
     */
    getDateConstraints: (resourceRecord?: SchedulerResourceModel, eventRecord?: SchedulerEventModel) => object
    /**
     * A method, or the *name* of a method called to update the tooltip's content when the
     * cursor is moved over a target. It receives one argument containing context about the
     * tooltip and show operation. The function should return a string, or a Promise yielding
     * a string.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-getHtml)
     * @param {object} context
     * @param {Tooltip} context.tip The tooltip instance
     * @param {HTMLElement} context.element The Element for which the Tooltip is monitoring mouse movement
     * @param {HTMLElement} context.activeTarget The target element that triggered the show
     * @param {Event} context.event The raw DOM event
     * @returns {string|Promise}
     */
    getHtml: ((context: { tip: Tooltip, element: HTMLElement, activeTarget: HTMLElement, event: Event }) => string|Promise<any>)|string
    /**
     * Scheduler overrides Grids default implementation of [getRowHeight](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#config-getRowHeight) to
     * pre-calculate row heights based on events in the rows.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-getRowHeight)
     * @param {ResourceModel} getRowHeight.record Resource record to determine row height for
     * @returns {number} Desired row height
     */
    getRowHeight: (getRowHeight: { record: SchedulerResourceModel }) => number
    /**
     * A config [object](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-header)
     */
    header: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * The time (in milliseconds) for which the Tooltip remains visible when the mouse leaves the target.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-hideDelay)
     */
    hideDelay: number|boolean
    /**
     * Set to `true` to hide the footer elements
     */
    hideFooters: boolean
    /**
     * Set to `true` to hide the column header elements
     */
    hideHeaders: boolean
    /**
     * Set to `true` to hide the Grid's horizontal scrollbar(s)
     */
    hideHorizontalScrollbar: boolean
    /**
     * By default, when moving rapidly from target to target, if, when mouseovering
     * a new target, the tip is still visible, the tooltip does not hide, it remains
     * visible, but updates its content however it is configured to do so.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-hideOnDelegateChange)
     */
    hideOnDelegateChange: boolean
    /**
     * By default the row hover effect is not visible in the Scheduler part of the grid.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-hideRowHover)
     */
    hideRowHover: boolean
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * Configure as `true`, or set property to `true` to highlight dependent events as well when selecting an event.
     */
    highlightPredecessors: boolean
    /**
     * Configure as `true`, or set property to `true` to highlight dependent events as well when selecting an event.
     */
    highlightSuccessors: boolean
    /**
     * Deprecated, to be removed in version 6.0. Replaced by [overlappingEventSorter](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-overlappingEventSorter).
     * @deprecated Since 5.0. Use [overlappingEventSorter](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-overlappingEventSorter) instead.
     */
    horizontalEventSorterFn: () => void
    /**
     * The amount of time to hover before showing
     */
    hoverDelay: number
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Set to `true` to ignore reacting to DOM events (mouseover/mouseout etc) while scrolling. Useful if you
     * want to maximize scroll performance.
     */
    ignoreDomEventsWhileScrolling: boolean
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Configure as `true` to automatically adjust the panel timespan during scrolling in the time dimension,
     * when the scroller comes close to the start/end edges.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-infiniteScroll)
     */
    infiniteScroll: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * A template method (empty by default) allowing you to control if an event can be selected or not.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-isEventSelectable)
     * @param {EventModel} event The event record
     * @returns {boolean} true if event can be selected, otherwise false
     */
    isEventSelectable: (event: SchedulerEventModel) => boolean
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * See [Keyboard shortcuts](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/Scheduler#keyboard-shortcuts) for details
     */
    keyMap: Record<string, string>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-listeners)
     */
    listeners: object
    /**
     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object, or a message to be shown when a store is performing a remote
     * operation, or Crud Manager is loading data from the sever. Set to `null` to disable default load mask.
     */
    loadMask: string|Partial<MaskConfig>|null
    /**
     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when data is loading. The message and optional configuration from the
     * [loadMask](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/LoadMaskable#config-loadMask) config take priority over these options, just as they do
     * for `maskDefaults`, respectively.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-loadMaskDefaults)
     */
    loadMaskDefaults: Partial<MaskConfig>
    /**
     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when an error occurs loading data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-loadMaskError)
     */
    loadMaskError: Partial<MaskConfig>|Mask|boolean
    /**
     * The message to show while an async tooltip is fetching its content.
     */
    loadingMsg: string
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Time in ms until a longpress is triggered
     */
    longPressTime: number
    /**
     * This flag controls whether Scheduler should preserve its selection of events when loading a new dataset
     * (if selected event ids are included in the newly loaded dataset).
     */
    maintainSelectionOnDatasetChange: boolean
    /**
     * When `true`, events are sized and positioned based on rowHeight, resourceMargin and barMargin settings.
     * Set this to `false` if you want to control height and vertical position using CSS instead.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-managedEventSizing)
     */
    managedEventSizing: boolean
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * Grids change the `maskDefaults` to cover only their `body` element.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The maximum time axis unit to display non-working ranges for ('hour' or 'day' etc).
     * When zooming to a view with a larger unit, no non-working time elements will be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-maxTimeAxisUnit)
     */
    maxTimeAxisUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * The maximum zoom level to which [zoomIn](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomIn) will work. Defaults to the number of
     * [ViewPresets](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/ViewPreset) available, see [presets](#Scheduler/view/mixin/TimelineViewPresets#property-presets)
     * for information. Unless you have modified the collection of available presets, the max zoom level is
     * milliseconds.
     */
    maxZoomLevel: number
    /**
     * Show a tool in the header to maximize this popup
     */
    maximizable: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized: boolean
    /**
     * How to align milestones in relation to their startDate. Only applies when using a `milestoneLayoutMode`
     * other than `default`. Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-milestoneAlign)
     */
    milestoneAlign: 'start'|'center'|'end'
    /**
     * Factor representing the average char width in pixels used to determine milestone width when configured
     * with `milestoneLayoutMode: 'estimate'`.
     */
    milestoneCharWidth: number
    /**
     * How to handle milestones during event layout. How the milestones are displayed when part of the layout
     * are controlled using [milestoneTextPosition](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-milestoneTextPosition).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-milestoneLayoutMode)
     */
    milestoneLayoutMode: 'default'|'estimate'|'data'|'measure'
    /**
     * Position of the milestone text:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-milestoneTextPosition)
     */
    milestoneTextPosition: 'inside'|'outside'|'always-outside'
    /**
     * Grid's `min-height`. Defaults to `10em` to be sure that the Grid always has a height wherever it is
     * inserted.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-minHeight)
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * The minimum zoom level to which [zoomOut](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomOut) will work. Defaults to 0 (year ticks)
     */
    minZoomLevel: number
    /**
     * Optionally show an opaque mask below this Popup when shown.
     * Configure this as `true` to show the mask.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-modal)
     */
    modal: boolean|{
        closeOnMaskTap?: boolean
        transparent?: boolean
    }
    /**
     * Scheduler mode. Supported values: horizontal, vertical
     */
    mode: 'horizontal'|'vertical'
    /**
     * Grid monitors window resize by default.
     */
    monitorResize: boolean
    /**
     * Horizontal offset from mouse when [anchorToTarget](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-mouseOffsetX)
     */
    mouseOffsetX: number
    /**
     * Vertical offset from mouse when [anchorToTarget](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`
     */
    mouseOffsetY: number
    /**
     * Configure as `true` to allow `CTRL+click` to select multiple events in the scheduler.
     */
    multiEventSelect: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * When an event bar has a width less than this value, it gets the CSS class `b-sch-event-narrow`
     * added. You may apply custom CSS rules using this class.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-narrowEventWidth)
     */
    narrowEventWidth: number
    /**
     * Override this method to provide a custom sort function to sort any overlapping events. This only applies
     * to the horizontal mode, where the order the events are sorted in determines their vertical placement
     * within a resource.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-overlappingEventSorter)
     * @param {EventModel} a First event
     * @param {EventModel} b Second event
     * @returns {number} Return -1 to display `a` above `b`, 1 for `b` above `a`
     */
    overlappingEventSorter: (a: SchedulerEventModel, b: SchedulerEventModel) => number
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-owner)
     */
    owner: Widget
    /**
     * Partners this Timeline panel with another Timeline in order to sync their region sizes (sub-grids like locked, normal will get the same width),
     * start and end dates, view preset, zoom level and scrolling position. All these values will be synced with the timeline defined as the `partner`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-partner)
     */
    partner: TimelineBase
    /**
     * Set to true to include `startDate` and `endDate` params indicating the currently viewed date range.
     * Dates are formatted using the same format as the `startDate` field on the EventModel
     * (e.g. 2023-03-08T00:00:00+01:00).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-passStartEndParameters)
     */
    passStartEndParameters: boolean
    /**
     * Specify plugins (an array of classes) in config
     */
    plugins: Function[]
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-positioned)
     */
    positioned: boolean
    /**
     * Maximum number of resources for which height is pre-calculated. If you have many events per
     * resource you might want to lower this number to gain some initial rendering performance.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-preCalculateHeightLimit)
     */
    preCalculateHeightLimit: number
    /**
     * True to preserve focused cell after loading new data
     */
    preserveFocusOnDatasetChange: boolean
    /**
     * Preserve the grid's vertical scroll position when changesets are applied, as in the case of remote
     * changes, or when stores are configured with [syncDataOnLoad](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-syncDataOnLoad).
     */
    preserveScroll: PreserveScrollOptions|boolean
    /**
     * Specify `true` to preserve vertical scroll position after store actions that trigger a `refresh` event,
     * such as loading new data and filtering.
     */
    preserveScrollOnDatasetChange: boolean
    /**
     * An array of [ViewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/ViewPreset) config objects
     * which describes the available timeline layouts for this scheduler.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-presets)
     */
    presets: Partial<ViewPresetConfig>[]
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * A [ProjectModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel) instance or a config object. The project holds all SchedulerPro data.
     */
    project: ProjectModel|Partial<ProjectModelConfig>
    /**
     * Accepts the following values:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-projectProgressReporting)
     */
    projectProgressReporting: string|null
    /**
     * Unit used to set the length of the time axis when used as a component of a Calendar. Suitable units are
     * `'month'`, `'week'` and `'day'`.
     */
    range: 'day'|'week'|'month'
    /**
     * Configure as `true` to make the scheduler read-only, by disabling any UIs for modifying data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-ref)
     */
    ref: string
    /**
     * Set to `false` to only measure cell contents when double clicking the edge between column headers.
     */
    resizeToFitIncludesHeader: boolean
    /**
     * A config object used to configure the resource columns in vertical mode.
     * See [ResourceHeader](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/ResourceHeader) for more details on available properties.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-resourceColumns)
     */
    resourceColumns: Partial<ResourceHeaderConfig>
    /**
     * Resource image extension, used when creating image path from resource name.
     */
    resourceImageExtension: string
    /**
     * Path to load resource images from. Used by the resource header in vertical mode and the
     * [ResourceInfoColumn](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/column/ResourceInfoColumn) in horizontal mode. Set this to display miniature
     * images for each resource using their `image` or `imageUrl` fields.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-resourceImagePath)
     */
    resourceImagePath: string
    /**
     * Control how much space to leave between the first event/last event and the resources edge (top/bottom
     * margin within the resource row in horizontal mode, left/right margin within the resource column in
     * vertical mode), in px. Defaults to the value of [barMargin](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/Scheduler#config-barMargin).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-resourceMargin)
     */
    resourceMargin: number|Partial<ResourceMarginConfig>
    /**
     * The [ResourceStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore) holding the resources to be rendered into the scheduler.
     */
    resourceStore: ResourceStore|Partial<ResourceStoreConfig>
    /**
     * Resource time ranges store instance or config object for [ResourceTimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ResourceTimeRanges) feature.
     */
    resourceTimeRangeStore: ResourceTimeRangeStore|Partial<ResourceTimeRangeStoreConfig>
    /**
     * Inline resource time ranges, will be loaded into an internally created store if
     * [ResourceTimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ResourceTimeRanges) is enabled.
     */
    resourceTimeRanges: ResourceTimeRangeModel[]|Partial<ResourceTimeRangeModelConfig>[]
    /**
     * Inline resources, will be loaded into the backing project's ResourceStore.
     */
    resources: ResourceModel[]|Partial<ResourceModelConfig>[]
    /**
     * "Break points" for which responsive config to use for columns and css.
     */
    responsiveLevels: Record<string, number|string>
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * The height in pixels of Scheduler rows.
     */
    rowHeight: number
    /**
     * Set to `false` to not show row lines. End result might be overruled by/differ between themes.
     */
    rowLines: boolean
    /**
     * Class implementing the popup resolving *scheduling conflicts* and *calendar misconfigurations*.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-schedulingIssueResolutionPopupClass)
     */
    schedulingIssueResolutionPopupClass: typeof SchedulingIssueResolutionPopup
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Configuration values for the [ScrollManager](https://bryntum.com/products/schedulerpro/docs/api/Core/util/ScrollManager) class on initialization. Returns the
     * [ScrollManager](https://bryntum.com/products/schedulerpro/docs/api/Core/util/ScrollManager) at runtime.
     */
    scrollManager: Partial<ScrollManagerConfig>|ScrollManager
    /**
     * Configures whether the grid is scrollable in the `Y` axis. This is used to configure a [GridScroller](https://bryntum.com/products/schedulerpro/docs/api/Grid/util/GridScroller).
     * See the [scrollerClass](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#config-scrollerClass) config option.
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * The class to instantiate to use as the [scrollable](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#config-scrollable). Defaults to [GridScroller](#Grid/util/GridScroller).
     */
    scrollerClass: typeof Scroller
    /**
     * Set to `false` to not select the resource of the event when clicking an event bar.
     */
    selectResourceOnEventNavigate: boolean
    /**
     * Set to `false` to not select the row/resource when clicking the empty area in a time axis cell.
     */
    selectResourceOnScheduleClick: boolean
    /**
     * The selection settings, where you can set these boolean flags to control what is selected. Options below:
     * @param {boolean} selectionMode.cell Set to `true` to enable cell selection. This takes precedence over row selection, but rows can still be selected programmatically or with checkbox or RowNumber selection. Required for `column` selection
     * @param {boolean} selectionMode.multiSelect Allow multiple selection with ctrl and shift+click or with `checkbox` selection. Required for `dragSelect` and `column` selection
     * @param {boolean|CheckColumnConfig} selectionMode.checkbox Set to `true` to add a checkbox selection column to the grid, or pass a config object for the [CheckColumn](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/CheckColumn)
     * @param {number|string} selectionMode.checkboxIndex Positions the checkbox column at the provided index or to the right of a provided column id. Defaults to 0 or to the right of an included `RowNumberColumn`
     * @param {boolean} selectionMode.checkboxOnly Select rows only when clicking in the checkbox column. Requires cell selection config to be `false` and checkbox to be set to `true`. This setting was previously named `rowCheckboxSelection`
     * @param {boolean} selectionMode.showCheckAll Set to `true` to add a checkbox to the selection column header to select/deselect all rows. Requires checkbox to also be set to `true`
     * @param {boolean} selectionMode.deselectFilteredOutRecords Set to `true` to deselect records when they are filtered out
     * @param {boolean|string} selectionMode.includeChildren Set to `true` to also select/deselect child nodes when a parent node is selected by toggling the checkbox. Set to `always` to always select/deselect child nodes.
     * @param {boolean|'all'|'some'} selectionMode.includeParents Set to `all` or `true` to auto select parent if all its children gets selected. If one gets deselected, the parent will also be deselected. Set to 'some' to select parent if one of its children gets selected. The parent will be deselected if all children gets deselected.
     * @param {boolean} selectionMode.preserveSelectionOnPageChange In `row` selection mode, this flag controls whether the Grid should preserve its selection when loading a new page of a paged data store. Defaults to `false`
     * @param {boolean} selectionMode.preserveSelectionOnDatasetChange In `row` selection mode, this flag controls whether the Grid should preserve its selection of cells / rows when loading a new dataset (assuming the selected records are included in the newly loaded dataset)
     * @param {boolean} selectionMode.deselectOnClick Toggles whether the Grid should deselect a selected row or cell when clicking it
     * @param {boolean} selectionMode.dragSelect Set to `true` to enable multiple selection by dragging. Requires `multiSelect` to also be set to `true`. Also requires the [RowReorder](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/RowReorder) feature to be set to [gripOnly](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/RowReorder#config-gripOnly).
     * @param {boolean} selectionMode.selectOnKeyboardNavigation Set to `false` to disable auto-selection by keyboard navigation. This will activate the `select` keyboard shortcut.
     * @param {boolean} selectionMode.column Set to `true` to be able to select whole columns of cells by clicking the header. Requires cell to be set to `true`
     * @param {boolean|RowNumberColumnConfig} selectionMode.rowNumber Set to `true` or a config object to add a RowNumberColumn which, when clicked, selects the row.
     * @param {boolean} selectionMode.selectRecordOnCell Set to `false` not to include the record in the `selectedRecords` array when one of the record row's cells is selected.
     */
    selectionMode: object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * `false` to not show a tooltip while creating a dependency
     */
    showCreationTooltip: boolean
    /**
     * Configure as `true` to have the grid show a red "changed" tag in cells who's
     * field value has changed and not yet been committed.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-showDirty)
     */
    showDirty: boolean|{
        duringEdit?: boolean
    }
    /**
     * If set to `true` this will show a color field in the [EventEdit](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventEdit) editor and also a
     * picker in the [EventMenu](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventMenu). Both enables the user to choose a color which will be
     * applied to the event bar's background. See EventModel's
     * [eventColor](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventColor) config.
     * config.
     */
    showEventColorPickers: boolean
    /**
     * Set to `true` to show the lag in the tooltip
     */
    showLagInTooltip: boolean
    /**
     * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover
     */
    showOnClick: boolean
    /**
     * Show on hover
     */
    showOnHover: boolean
    /**
     * Set to `false` to hide recurring fields in event editor, even if the
     * [Recurring Events](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/RecurringEvents#config-enableRecurringEvents) is `true`
     * and a recurring event is being edited.
     */
    showRecurringUI: boolean
    /**
     * If set to `true` this will show a color field in the [TaskEdit](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/TaskEdit) editor and also a
     * picker in the [EventMenu](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventMenu). Both enables the user to choose a color which will be
     * applied to the event bar's background. See EventModel's
     * [eventColor](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventColor) config.
     * config.
     */
    showTaskColorPickers: boolean
    /**
     * Set to `true` to show a tooltip when hovering a dependency line
     */
    showTooltip: boolean
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Set to `true` to snap to the current time resolution increment while interacting with scheduled events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-snap)
     */
    snap: boolean
    /**
     * Affects drag drop and resizing of events when [snap](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineDateMapper#config-snap)
     * is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-snapRelativeToEventStartDate)
     */
    snapRelativeToEventStartDate: boolean
    /**
     * The start date of the timeline (if not configure with [infiniteScroll](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-infiniteScroll)).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-startDate)
     */
    startDate: Date|string
    /**
     * The name of the start date parameter that will be passed to in every `eventStore` load request.
     */
    startParamName: string
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-stateId)
     */
    stateId: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/schedulerpro/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-stateProvider)
     */
    stateProvider: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-stateful)
     */
    stateful: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-statefulEvents)
     */
    statefulEvents: object|string[]
    /**
     * Unit used to control how large steps to take when clicking the previous and next buttons in the Calendar
     * UI. Only applies when used as a component of a Calendar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-stepUnit)
     */
    stepUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * When set, the text in the major time axis header sticks in the scrolling viewport as long as possible.
     */
    stickyHeaders: boolean
    /**
     * Store that holds records to display in the grid, or a store config object. If the configuration contains
     * a `readUrl`, an `AjaxStore` will be created.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-store)
     */
    store: Partial<Store|StoreConfig|AjaxStore|AjaxStoreConfig>
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar). If the value assigned to a strip is an array, it is converted to
     * the toolbar's [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-strips)
     */
    strips: Record<string, Partial<ContainerItemConfig>>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * An object containing sub grid configuration objects keyed by a `region` property.
     * By default, grid has a 'locked' region (if configured with locked columns) and a 'normal' region.
     * The 'normal' region defaults to use `flex: 1`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-subGridConfigs)
     */
    subGridConfigs: Record<string, Partial<SubGridConfig>>
    /**
     * Set to `true` to prevent auto calculating of a minimal [tickSize](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineEventRendering#property-tickSize)
     * to always fit the content to the screen size. Setting this property on `true` will disable [forceFit](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-forceFit) behaviour.
     */
    suppressFit: boolean
    /**
     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object, or a message to be shown when Crud Manager
     * is persisting changes on the server. Set to `null` to disable default sync mask.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-syncMask)
     */
    syncMask: string|Partial<MaskConfig>|null
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-tbar)
     */
    tbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * CSS class used for terminals
     */
    terminalCls: string
    /**
     * Delay in ms before hiding the terminals when the mouse leaves an event bar or terminal.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-terminalHideDelay)
     */
    terminalHideDelay: number
    /**
     * Terminal offset from their initial position, in px. Positive values move terminals further away from the
     * event bar, negative values inside the event bar.
     */
    terminalOffset: number
    /**
     * Delay in ms before showing the terminals when hovering over an event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-terminalShowDelay)
     */
    terminalShowDelay: number
    /**
     * Where (on event bar edges) to display terminals. The sides are `'start'`, `'top'`,
     * `'end'` and `'bottom'`
     */
    terminalSides: string[]
    /**
     * Terminal diameter in px, overrides the default CSS value for it (which might depend on theme).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-terminalSize)
     */
    terminalSize: number|string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-textContent)
     */
    textContent: boolean
    /**
     * The width/height (depending on vertical / horizontal mode) of all the time columns.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-tickSize)
     */
    tickSize: number
    /**
     * A [TimeAxis](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/TimeAxis) config object or instance, used to create a backing data store of
     * 'ticks' providing the input date data for the time axis of timeline panel. Created automatically if none
     * supplied.
     */
    timeAxis: Partial<TimeAxisConfig>|TimeAxis
    /**
     * The time ranges store instance for [TimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeRanges) feature.
     */
    timeRangeStore: Store|Partial<StoreConfig>
    /**
     * Inline time ranges, will be loaded into an internally created store if [TimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeRanges)
     * is enabled.
     */
    timeRanges: TimeSpan[]|Partial<TimeSpanConfig>[]
    /**
     * Set to a time zone or a UTC offset. This will set the projects
     * [timeZone](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/ProjectModel#config-timeZone) config accordingly. As this config is only a referer,
     * please se project's config [documentation](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/ProjectModel#config-timeZone) for more
     * information.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-timeZone)
     */
    timeZone: string|number
    /**
     * A title to display in the header. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-title)
     */
    title: string
    /**
     * The [tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-tools)
     */
    tools: Record<string, Partial<ToolConfig>>
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * A template function allowing you to configure the contents of the tooltip shown when hovering a
     * dependency line. You can return either an HTML string or a [DomConfig](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DomHelper#typedef-DomConfig) object.
     * @param {DependencyBaseModel} dependency The dependency record
     * @returns {string|DomConfig}
     */
    tooltipTemplate: (dependency: DependencyBaseModel) => string|DomConfig
    /**
     * By default, once a tooltip is shown aligned as requested, it stays put.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-trackMouse)
     */
    trackMouse: boolean
    /**
     * Animation transition duration in milliseconds.
     */
    transitionDuration: number
    /**
     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
     * forwards or backwards.
     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
     */
    trapFocus: boolean
    /**
     * Configure as `true` to trigger `selectionChange` when removing a selected event/assignment.
     */
    triggerSelectionChangeOnRemove: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-ui)
     */
    ui: string|object
    /**
     * By default, scrolling the schedule will update the [timelineContext](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/SchedulerBase#property-timelineContext) to reflect the new
     * currently hovered context. When displaying a large number of events on screen at the same time, this will
     * have a slight impact on scrolling performance. In such scenarios, opt out of this behavior by setting
     * this config to `false`.
     */
    updateTimelineContextOnScroll: boolean
    /**
     * By default, scheduler fade events in on load. Specify `false` to prevent this animation or specify one
     * of the available animation types to use it (`true` equals `'fade-in'`):
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-useInitialAnimation)
     */
    useInitialAnimation: boolean|'fade-in'|'slide-from-left'|'slide-from-top'|string
    /**
     * The time axis column config for vertical [mode](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/SchedulerBase#config-mode).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-verticalTimeAxisColumn)
     */
    verticalTimeAxisColumn: Partial<VerticalTimeAxisColumnConfig>
    /**
     * A string key used to lookup a predefined [ViewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/ViewPreset) (e.g. 'weekAndDay', 'hourAndDay'),
     * managed by [PresetManager](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/PresetManager). See [PresetManager](#Scheduler/preset/PresetManager) for more information.
     * Or a config object for a viewPreset.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-viewPreset)
     */
    viewPreset: string|Partial<ViewPresetConfig>
    /**
     * A date to bring into view initially on the scrollable timeline.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-visibleDate)
     */
    visibleDate: Date|VisibleDate
    /**
     * Integer number indicating the size of timespan during zooming. When zooming, the timespan is adjusted to make
     * the scrolling area `visibleZoomFactor` times wider than the timeline area itself. Used in
     * [zoomToSpan](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomToSpan) and [zoomToLevel](#Scheduler/view/mixin/TimelineZoomable#function-zoomToLevel) functions.
     */
    visibleZoomFactor: number
    /**
     * A valid JS day index between 0-6 (0: Sunday, 1: Monday etc.) to be considered the start day of the week.
     * When omitted, the week start day is retrieved from the active locale class.
     */
    weekStartDay: number
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * An object with format `{ fromDay, toDay, fromHour, toHour }` that describes the working days and hours.
     * This object will be used to populate TimeAxis [include](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/TimeAxis#config-include) property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-workingTime)
     */
    workingTime: object
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-y)
     */
    y: number
    /**
     * Whether the originally rendered timespan should be preserved while zooming. By default, it is set to `false`,
     * meaning the timeline panel will adjust the currently rendered timespan to limit the amount of HTML content to
     * render. When setting this option to `true`, be careful not to allow to zoom a big timespan in seconds
     * resolution for example. That will cause <strong>a lot</strong> of HTML content to be rendered and affect performance. You
     * can use [minZoomLevel](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineZoomable#config-minZoomLevel) and [maxZoomLevel](#Scheduler/view/mixin/TimelineZoomable#config-maxZoomLevel) config options for that.
     */
    zoomKeepsOriginalTimespan: boolean
    /**
     * If true, you can zoom in and out on the time axis using CTRL-key + mouse wheel.
     */
    zoomOnMouseWheel: boolean
    /**
     * True to zoom to time span when double-clicking a time axis cell.
     */
    zoomOnTimeAxisDoubleClick: boolean
    /**
     * Fired on the owning Scheduler/Gantt after a dependency drag creation operation finished, no matter to outcome
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {DependencyBaseModel} event.dependency The created dependency
     */
    onAfterDependencyCreateDrop: ((event: { source: TimeSpan, target: TimeSpan, dependency: DependencyBaseModel }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget after a dependency is successfully saved
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler instance
     * @param {SchedulerDependencyModel} event.dependencyRecord The dependency about to be saved
     */
    onAfterDependencySave: ((event: { source: Scheduler, dependencyRecord: SchedulerDependencyModel }) => void)|string
    /**
     * Fires on the owning Scheduler at the end of the drag create gesture whether or not
     * a new event was created by the gesture.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {SchedulerEventModel} event.eventRecord The event record being created
     * @param {SchedulerResourceModel} event.resourceRecord The resource record
     * @param {HTMLElement} event.eventElement The element representing the created event record
     */
    onAfterDragCreate: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, eventElement: HTMLElement }) => void)|string
    /**
     * Fired on the owning Scheduler after event drop
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords
     * @param {SchedulerEventModel[]} event.eventRecords
     * @param {boolean} event.valid
     * @param {object} event.context
     * @param {MouseEvent} event.domEvent Browser event
     */
    onAfterEventDrop: ((event: { source: Scheduler, assignmentRecords: SchedulerAssignmentModel[], eventRecords: SchedulerEventModel[], valid: boolean, context: object, domEvent: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler after editor is closed by any action - save, delete or cancel
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     */
    onAfterEventEdit: ((event: { source: Scheduler }) => void)|string
    /**
     * Fires on the owning Scheduler after an event is successfully saved
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler instance
     * @param {SchedulerEventModel} event.eventRecord The record about to be saved
     */
    onAfterEventSave: ((event: { source: Scheduler, eventRecord: SchedulerEventModel }) => void)|string
    /**
     * Fired on the owning Scheduler after an event segment is dropped
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {SchedulerEventModel[]} event.eventRecords Dropped segments
     * @param {boolean} event.valid
     * @param {object} event.context
     */
    onAfterEventSegmentDrop: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], valid: boolean, context: object }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget instance after task editing is finished by applying changes, cancelling them
     * or deleting the task record.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {EventModel} event.taskRecord Task record used in the task editor
     * @param {TaskEditorBase} event.editor The editor widget
     */
    onAfterTaskEdit: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget instance after a task is saved
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {EventModel} event.taskRecord The task about to be saved
     * @param {TaskEditorBase} event.editor The editor widget
     */
    onAfterTaskSave: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => void)|string
    /**
     * Fired any time there is a change to the assignments selected in the Scheduler.
     * @param {object} event Event object
     * @param {'select'|'deselect'|'update'|'clear'} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {SchedulerAssignmentModel[]} event.selected An array of the Assignments added to the selection.
     * @param {SchedulerAssignmentModel[]} event.deselected An array of the Assignments removed from the selection.
     * @param {SchedulerAssignmentModel[]} event.selection The new selection.
     */
    onAssignmentSelectionChange: ((event: { action: 'select'|'deselect'|'update'|'clear', selected: SchedulerAssignmentModel[], deselected: SchedulerAssignmentModel[], selection: SchedulerAssignmentModel[] }) => void)|string
    /**
     * Fires before an assignment is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or
     * by the event editor. Can for example be used to display a custom dialog to confirm deletion, in which
     * case records should be "manually" removed after confirmation:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-beforeAssignmentDelete)
     * @param {object} event Event object
     * @param {Scheduler} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeAssignmentDelete: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => boolean|void)|string
    /**
     * Fired any time there is going to be a change to the assignments selected in the Scheduler.
     * Returning `false` prevents the change
     * @param {object} event Event object
     * @param {string} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {SchedulerEventModel[]} event.selected An array of assignments that will be added to the selection.
     * @param {SchedulerEventModel[]} event.deselected An array of assignments that will be removed from the selection.
     * @param {SchedulerEventModel[]} event.selection The currently selected assignments, before applying `selected` and `deselected`.
     */
    onBeforeAssignmentSelectionChange: ((event: { action: string, selected: SchedulerEventModel[], deselected: SchedulerEventModel[], selection: SchedulerEventModel[] }) => boolean|void)|string
    /**
     * Fires on the owning Grid before the cell editing is canceled, return `false` to prevent cancellation.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     */
    onBeforeCancelCellEdit: ((event: { source: Grid, editorContext: Location }) => boolean|void)|string
    /**
     * Fires on the owning Grid before deleting a range of selected cell values by pressing `Backspace` or `Del`
     * buttons while [autoEdit](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellEdit#config-autoEdit) is set to `true`. Return `false` to prevent editing.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {(Location|Model)[]} event.gridSelection An array of cell selectors or records that will have their values deleted (the records themself will not get deleted, only visible column values).
     */
    onBeforeCellDelete: ((event: { source: Grid, gridSelection: (Location|Model)[] }) => boolean|void)|string
    /**
     * Fires on the owning Grid before editing starts, return `false` to prevent editing
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {Field} event.editorContext.editor The input field that the column is configured with (see [field](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column#config-field)). This property mey be replaced to be a different [field](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field) in the handler, to take effect just for the impending edit.
     * @param {Function} event.editorContext.finalize An async function may be injected into this property which performs asynchronous finalization tasks such as complex validation of confirmation. The value `true` or `false` must be returned.
     * @param {object} event.editorContext.finalize.context An object describing the editing context upon requested completion of the edit.
     * @param {any} event.editorContext.value Cell value
     */
    onBeforeCellEditStart: ((event: { source: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Field, finalize: { context?: object }, value: any } }) => boolean|void)|string
    /**
     * Fired when the [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Popup} event.source This Popup
     */
    onBeforeClose: ((event: { source: Popup }) => void)|string
    /**
     * This event is fired prior to starting a column drag gesture. The drag is canceled if a listener returns `false`.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    onBeforeColumnDragStart: ((event: { source: Grid, column: Column, event: Event }) => boolean|void)|string
    /**
     * This event is fired when a column is dropped, and you can return false from a listener to abort the operation.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Column} event.newParent The new parent column.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    onBeforeColumnDropFinalize: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, event: Event, region: string }) => boolean|void)|string
    /**
     * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location[]} event.cells The cells about to be copied or cut
     * @param {string} event.data The string data about to be copied or cut
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other beforeCopy events
     */
    onBeforeCopy: ((event: { source: Grid, cells: Location[], data: string, isCut: boolean, entityName: string }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before a dependency is added
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyEdit} event.dependencyEdit The dependency edit feature
     * @param {SchedulerDependencyModel} event.dependencyRecord The dependency about to be added
     */
    onBeforeDependencyAdd: ((event: { source: Scheduler, dependencyEdit: SchedulerDependencyEdit, dependencyRecord: SchedulerDependencyModel }) => boolean|void)|string
    /**
     * Fired on the owning Scheduler/Gantt before a dependency creation drag operation starts. Return `false` to
     * prevent it
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     */
    onBeforeDependencyCreateDrag: ((event: { source: TimeSpan }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when a dependency drag creation operation is about to finalize
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {'start'|'end'|'top'|'bottom'} event.fromSide The from side (start / end / top / bottom)
     * @param {'start'|'end'|'top'|'bottom'} event.toSide The to side (start / end / top / bottom)
     */
    onBeforeDependencyCreateFinalize: ((event: { source: TimeSpan, target: TimeSpan, fromSide: 'start'|'end'|'top'|'bottom', toSide: 'start'|'end'|'top'|'bottom' }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before a dependency is deleted
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler instance
     * @param {SchedulerDependencyModel} event.dependencyRecord The dependency record about to be deleted
     */
    onBeforeDependencyDelete: ((event: { source: Scheduler, dependencyRecord: SchedulerDependencyModel }) => boolean|void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before an dependency is displayed in the editor.
     * This may be listened for to allow an application to take over dependency editing duties. Return `false` to
     * stop the default editing UI from being shown or a `Promise` yielding `true` or `false` for async vetoing.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyEdit} event.dependencyEdit The dependencyEdit feature
     * @param {SchedulerDependencyModel} event.dependencyRecord The record about to be shown in the editor.
     */
    onBeforeDependencyEdit: ((event: { source: Scheduler, dependencyEdit: SchedulerDependencyEdit, dependencyRecord: SchedulerDependencyModel }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Scheduler or Gantt widget when the editor for a dependency is available but before it is shown. Allows
     * manipulating fields before the widget is shown.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyEdit} event.dependencyEdit The dependencyEdit feature
     * @param {SchedulerDependencyModel} event.dependencyRecord The record about to be shown in the editor.
     * @param {Popup} event.editor The editor popup
     */
    onBeforeDependencyEditShow: ((event: { source: Scheduler, dependencyEdit: SchedulerDependencyEdit, dependencyRecord: SchedulerDependencyModel, editor: Popup }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before a dependency is saved
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler instance
     * @param {SchedulerDependencyModel} event.dependencyRecord The dependency about to be saved
     * @param {object} event.values The new values
     */
    onBeforeDependencySave: ((event: { source: Scheduler, dependencyRecord: SchedulerDependencyModel, values: object }) => boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires on the owning Scheduler at the beginning of the drag gesture. Returning `false` from a listener prevents
     * the drag create operation from starting.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-beforeDragCreate)
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {SchedulerResourceModel} event.resourceRecord
     * @param {Date} event.date The datetime associated with the drag start point.
     */
    onBeforeDragCreate: ((event: { source: Scheduler, resourceRecord: SchedulerResourceModel, date: Date }) => boolean|void)|string
    /**
     * Fires on the owning Scheduler to allow implementer to prevent immediate finalization by setting
     * `data.context.async = true` in the listener, to show a confirmation popup etc
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-beforeDragCreateFinalize)
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel} event.eventRecord The event record being created
     * @param {SchedulerResourceModel} event.resourceRecord The resource record
     * @param {HTMLElement} event.eventElement The element representing the new Event record
     * @param {object} event.context
     * @param {boolean} event.context.async Set true to handle drag create asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize drag create. This method accepts one argument: pass true to update records, or false, to ignore changes
     */
    onBeforeDragCreateFinalize: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, eventElement: HTMLElement, context: { async: boolean, finalize: Function } }) => void)|string
    /**
     * Fires before an event is added. Can be triggered by schedule double click or drag create action.
     * @param {object} event Event object
     * @param {Scheduler} event.source The Scheduler instance
     * @param {SchedulerEventModel} event.eventRecord The record about to be added
     * @param {SchedulerResourceModel[]} event.resourceRecords Resources that the record is assigned to
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords The assignment records
     */
    onBeforeEventAdd: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecords: SchedulerResourceModel[], assignmentRecords: SchedulerAssignmentModel[] }) => boolean|void)|string
    /**
     * Fires before an event is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or by the
     * event editor. Return `false` to immediately veto the removal (or a `Promise` yielding `true` or `false`
     * for async vetoing).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-beforeEventDelete)
     * @param {object} event Event object
     * @param {Scheduler|any} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeEventDelete: ((event: { source: Scheduler|any, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean|void>)|string
    /**
     * Fired on the owning Scheduler before event dragging starts. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel} event.eventRecord Event record the drag starts from
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the drag starts from
     * @param {SchedulerEventModel[]} event.eventRecords Event records being dragged
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords Assignment records being dragged
     * @param {MouseEvent} event.event Browser event DEPRECATED (replaced by domEvent)
     * @param {MouseEvent} event.domEvent Browser event
     */
    onBeforeEventDrag: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], event: MouseEvent, domEvent: MouseEvent }) => boolean|void)|string
    /**
     * Fires on the owning Scheduler before drag selection starts. Return false to prevent the operation.
     * @param {object} event Event object
     * @param {Event} event.event The native browser DOM event
     */
    onBeforeEventDragSelect: ((event: { event: Event }) => boolean|void)|string
    /**
     * This event is fired on the owning Scheduler after the event drag operation completes, but before changing any data.
     * It allows implementer to use asynchronous validation/finalization by setting `context.async = true`
     * in the listener, for example, to show a confirmation popup, make async data request etc.
     * In such case, implementer need to call the `context.finalize()` method manually:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-beforeEventDropFinalize)
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {object} event.context
     * @param {DropData} event.context.dropData Information about the drop points for dragged events/assignments.
     * @param {boolean} event.context.async Set to `true` to not finalize the drag-drop operation immediately (e.g. to wait for user confirmation)
     * @param {SchedulerEventModel[]} event.context.eventRecords Event records being dragged
     * @param {SchedulerAssignmentModel[]} event.context.assignmentRecords Assignment records being dragged
     * @param {SchedulerEventModel} event.context.targetEventRecord Event record for drop target
     * @param {SchedulerResourceModel} event.context.newResource Resource record for drop target
     * @param {boolean} event.context.valid Set this to `false` to abort the drop immediately.
     * @param {Function} event.context.finalize Call this method after an <strong>async</strong> finalization flow, to finalize the drag-drop operation. This method accepts one argument: pass `true` to update records, or `false` to ignore changes
     * @param {MouseEvent} event.domEvent Browser event
     */
    onBeforeEventDropFinalize: ((event: { source: Scheduler, context: { dropData: DropData, async: boolean, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], targetEventRecord: SchedulerEventModel, newResource: SchedulerResourceModel, valid: boolean, finalize: Function }, domEvent: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler before an event is displayed in an editor.
     * This may be listened for to allow an application to take over event editing duties. Returning `false`
     * stops the default editing UI from being shown.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {EventEdit} event.eventEdit The eventEdit feature
     * @param {SchedulerEventModel} event.eventRecord The record about to be shown in the event editor.
     * @param {SchedulerResourceModel} event.resourceRecord The Resource record for the event. If the event is being created, it will not contain a resource, so this parameter specifies the resource the event is being created for.
     * @param {HTMLElement} event.eventElement The element which represents the event in the scheduler display.
     */
    onBeforeEventEdit: ((event: { source: Scheduler, eventEdit: EventEdit, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, eventElement: HTMLElement }) => boolean|void)|string
    /**
     * Fires on the owning Scheduler when the editor for an event is available but before it is populated with
     * data and shown. Allows manipulating fields etc.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {EventEdit} event.eventEdit The eventEdit feature
     * @param {SchedulerEventModel} event.eventRecord The record about to be shown in the event editor.
     * @param {SchedulerResourceModel} event.resourceRecord The Resource record for the event. If the event is being created, it will not contain a resource, so this parameter specifies the resource the event is being created for.
     * @param {HTMLElement} event.eventElement The element which represents the event in the scheduler display.
     * @param {Popup} event.editor The editor
     */
    onBeforeEventEditShow: ((event: { source: Scheduler, eventEdit: EventEdit, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, eventElement: HTMLElement, editor: Popup }) => void)|string
    /**
     * Fired on the owning Scheduler before resizing starts. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel} event.eventRecord Event record being resized
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onBeforeEventResize: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => boolean|void)|string
    /**
     * Fired on the owning Scheduler to allow implementer to prevent immediate finalization by setting
     * `data.context.async = true` in the listener, to show a confirmation popup etc
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-beforeEventResizeFinalize)
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {object} event.context
     * @param {SchedulerEventModel} event.context.eventRecord Event record being resized
     * @param {Date} event.context.startDate New startDate (changed if resizing start side)
     * @param {Date} event.context.endDate New endDate (changed if resizing end side)
     * @param {Date} event.context.originalStartDate Start date before resize
     * @param {Date} event.context.originalEndDate End date before resize
     * @param {boolean} event.context.async Set true to handle resize asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize resize. This method accepts one argument: pass `true` to update records, or `false`, to ignore changes
     * @param {Event} event.event Browser event
     */
    onBeforeEventResizeFinalize: ((event: { source: Scheduler, context: { eventRecord: SchedulerEventModel, startDate: Date, endDate: Date, originalStartDate: Date, originalEndDate: Date, async: boolean, finalize: Function }, event: Event }) => void)|string
    /**
     * Fires on the owning Scheduler before an event is saved.
     * Return `false` to immediately prevent saving
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-beforeEventSave)
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler instance
     * @param {SchedulerEventModel} event.eventRecord The record about to be saved
     * @param {SchedulerResourceModel[]} event.resourceRecords The resources to which the event is assigned
     * @param {object} event.values The new values
     * @param {object} event.context Extended save context:
     * @param {boolean} event.context.async Set this to `true` in a listener to indicate that the listener will asynchronously decide to prevent or not the event save.
     * @param {Function} event.context.finalize Function to call to finalize the save. Used when `async` is `true`. Provide `false` to the function to prevent the save.
     */
    onBeforeEventSave: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecords: SchedulerResourceModel[], values: object, context: { async?: boolean, finalize: Function } }) => Promise<boolean|void>)|string
    /**
     * Fired on the owning Scheduler before event segment dragging starts. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords Segments to drag
     * @param {MouseEvent} event.event Browser event
     */
    onBeforeEventSegmentDrag: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], event: MouseEvent }) => boolean|void)|string
    /**
     * Fired on the owning Scheduler to allow implementer to use asynchronous finalization by setting
     * `context.async = true` in the listener, to show a confirmation popup etc.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-beforeEventSegmentDropFinalize)
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {object} event.context
     * @param {boolean} event.context.async Set true to not finalize the drag-drop operation immediately (e.g. to wait for user confirmation)
     * @param {SchedulerEventModel[]} event.context.eventRecords Dragged segments
     * @param {boolean} event.context.valid Set this to `false` to abort the drop immediately.
     * @param {Function} event.context.finalize Call this method after an <strong>async</strong> finalization flow, to finalize the drag-drop operation. This method accepts one argument: pass `true` to update records, or `false` to ignore changes
     */
    onBeforeEventSegmentDropFinalize: ((event: { source: Scheduler, context: { async: boolean, eventRecords: SchedulerEventModel[], valid: boolean, finalize: Function } }) => void)|string
    /**
     * Fired on the owning Scheduler Pro before resizing starts. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {EventModel} event.eventRecord Segment being resized
     * @param {ResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onBeforeEventSegmentResize: ((event: { source: SchedulerPro, eventRecord: EventModel, resourceRecord: ResourceModel, event: MouseEvent }) => boolean|void)|string
    /**
     * Fired on the owning Scheduler Pro to allow implementer to prevent immediate finalization by setting
     * `data.context.async = true` in the listener, to show a confirmation popup etc
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-beforeEventSegmentResizeFinalize)
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {object} event.context
     * @param {boolean} event.context.async Set true to handle resize asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize resize. This method accepts one argument: pass `true` to update records, or `false`, to ignore changes
     */
    onBeforeEventSegmentResizeFinalize: ((event: { source: SchedulerPro, context: { async: boolean, finalize: Function } }) => void)|string
    /**
     * Fired any time there is going to be a change to the events selected in the Scheduler.
     * Returning `false` prevents the change
     * @param {object} event Event object
     * @param {string} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {SchedulerEventModel[]} event.selected An array of events that will be added to the selection.
     * @param {SchedulerEventModel[]} event.deselected An array of events that will be removed from the selection.
     * @param {SchedulerEventModel[]} event.selection The currently selected events, before applying `selected` and `deselected`.
     */
    onBeforeEventSelectionChange: ((event: { action: string, selected: SchedulerEventModel[], deselected: SchedulerEventModel[], selection: SchedulerEventModel[] }) => boolean|void)|string
    /**
     * Fires on the owning Grid before the cell editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * @param {object} event Event object
     * @param {Grid} event.grid Target grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onBeforeFinishCellEdit: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before pan starts. Return `false` to prevent the operation.
     * @param {object} event Event object
     * @param {Event} event.event The native browser DOM event
     */
    onBeforePan: ((event: { event: Event }) => boolean|void)|string
    /**
     * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData about to be pasted
     * @param {Location} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other beforePaste events
     */
    onBeforePaste: ((event: { source: Grid, clipboardData: string, targetCell: Location, entityName: string }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Grid before export started. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {object} event.config Export config
     */
    onBeforePdfExport: ((event: { config: object }) => boolean|void)|string
    /**
     * Fired before the [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) is changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onBeforePresetChange: ((event: { source: Scheduler, startDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Fires before a row is rendered.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Row} event.row The row about to be rendered.
     * @param {Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    onBeforeRenderRow: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows are about to be rendered
     * @param {object} event Event object
     * @param {Grid} event.source This grid.
     */
    onBeforeRenderRows: ((event: { source: Grid }) => void)|string
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records to be deselected in this operation.
     * @param {Model[]} event.selected The records to be selected in this operation.
     * @param {Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Location[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Location[]} event.selectedCells The cells to be selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    onBeforeSelectionChange: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fired on the owning Scheduler/Gantt before showing dependency terminals on a task or event. Return `false` to
     * prevent it
     * @param {object} event Event object
     * @param {TimeSpan} event.source The hovered task
     */
    onBeforeShowTerminals: ((event: { source: TimeSpan }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before a task is deleted, return `false` to prevent it.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-beforeTaskDelete)
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance.
     * @param {EventModel} event.taskRecord The record about to be deleted
     * @param {TaskEditorBase} event.editor The editor widget
     */
    onBeforeTaskDelete: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Scheduler or Gantt widget instance before a task is displayed in the editor.
     * This may be listened to in order to take over the task editing flow. Returning `false`
     * stops the default editing UI from being shown.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-beforeTaskEdit)
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {TaskEdit} event.taskEdit The taskEdit feature
     * @param {EventModel} event.taskRecord The task about to be shown in the editor.
     * @param {HTMLElement} event.taskElement The element which represents the task
     */
    onBeforeTaskEdit: ((event: { source: SchedulerPro, taskEdit: TaskEdit, taskRecord: EventModel, taskElement: HTMLElement }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Scheduler or Gantt widget when the editor for an event is available but before it is shown. Allows
     * manipulating fields etc.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The SchedulerPro instance
     * @param {TaskEdit} event.taskEdit The taskEdit feature
     * @param {EventModel} event.taskRecord The task about to be shown in the editor.
     * @param {HTMLElement} event.eventElement The element which represents the task
     * @param {TaskEditorBase} event.editor The editor
     */
    onBeforeTaskEditShow: ((event: { source: SchedulerPro, taskEdit: TaskEdit, taskRecord: EventModel, eventElement: HTMLElement, editor: TaskEditorBase }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget instance before a task is saved, return `false` to prevent it.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-beforeTaskSave)
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {EventModel} event.taskRecord The task about to be saved
     * @param {TaskEditorBase} event.editor The editor widget
     */
    onBeforeTaskSave: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => Promise<boolean|void>)|string
    /**
     * Fired when a group is going to be expanded or collapsed using the UI.
     * Returning `false` from a listener prevents the operation
     * @param {object} event Event object
     * @param {Model} event.groupRecord Group record
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     * @param {Event} event.domEvent The user interaction event (eg a `click` event) if the toggle request was instigated by user interaction.
     */
    onBeforeToggleGroup: ((event: { groupRecord: Model, collapse: boolean, domEvent: Event }) => boolean|void)|string
    /**
     * Fired before a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    onBeforeToggleNode: ((event: { source: Grid, record: Model, collapse: boolean }) => void)|string
    /**
     * Fires on the owning Grid when editing is cancelled
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Event} event.event Included if the cancellation was triggered by a DOM event
     */
    onCancelCellEdit: ((event: { source: Grid, editorContext: Location, event: Event }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellContextMenu: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellDblClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * This event fires on the owning grid before the context menu is shown for a cell.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-cellMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuBeforeShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column, record: Model }) => boolean|void)|string
    /**
     * This event fires on the owning grid when an item is selected in the cell context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid after the context menu is shown for a cell.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid when a check item is toggled in the cell context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     * @param {boolean} event.checked Checked or not
     */
    onCellMenuToggleItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model, checked: boolean }) => void)|string
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOut: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOver: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onCollapse: ((event: { source: Panel }) => void)|string
    /**
     * Fired before a parent node record is collapsed.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record which has been collapsed.
     */
    onCollapseNode: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * This event is fired when a column is being dragged, and you can set the `valid` flag on t
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Event} event.event The browser event.
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     */
    onColumnDrag: ((event: { source: Grid, column: Column, insertBefore: Column, event: Event, context: { valid: boolean } }) => void)|string
    /**
     * This event is fired when a column drag gesture has started.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    onColumnDragStart: ((event: { source: Grid, column: Column, event: Event }) => void)|string
    /**
     * This event is always fired after a column is dropped. The `valid` param is true if the operation was not
     * vetoed and the column was moved in the column store.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Column} event.newParent The new parent column.
     * @param {boolean} event.valid true if the operation was not vetoed.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    onColumnDrop: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, valid: boolean, event: Event, region: string }) => boolean|void)|string
    /**
     * This event fires on the owning widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Widget} event.source The owning widget
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     */
    onContextMenuItem: ((event: { source: Widget, menu: Menu, item: MenuItem }) => void)|string
    /**
     * This event fires on the owning widget when a check item is toggled in the context menu.
     * @param {object} event Event object
     * @param {Widget} event.source The owning widget
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {boolean} event.checked Checked or not
     */
    onContextMenuToggleItem: ((event: { source: Widget, menu: Menu, item: MenuItem, checked: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a copy action is performed.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location[]} event.cells The cells about to be copied or cut
     * @param {string} event.copiedDataString The concatenated data string that was copied or cut
     * @param {boolean} event.isCut `true` if this was a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other copy events
     */
    onCopy: ((event: { source: Grid, cells: Location[], copiedDataString: string, isCut: boolean, entityName: string }) => void)|string
    /**
     * Fired when data in the store changes.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-dataChange)
     * @param {object} event Event object
     * @param {Grid} event.source Owning grid
     * @param {Store} event.store The originating store
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'updatemultiple'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onDataChange: ((event: { source: Grid, store: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired when the range of dates encapsulated by the UI changes. This will be when
     * moving a view in time by reconfiguring its [timeAxis](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-timeAxis). This will happen
     * when zooming, or changing [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-viewPreset).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-dateRangeChange)
     * @param {object} event Event object
     * @param {TimelineBase} event.source This Scheduler/Gantt instance.
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onDateRangeChange: ((event: { source: TimelineBase, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fired when dependencies are rendered
     */
    onDependenciesDrawn: (() => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when a click is registered on a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyClick: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when a context menu event is registered on a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyContextMenu: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when a dependency creation drag operation starts
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     */
    onDependencyCreateDragStart: ((event: { source: TimeSpan }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when a dependency drag creation operation succeeds
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {DependencyBaseModel} event.dependency The created dependency
     */
    onDependencyCreateDrop: ((event: { source: TimeSpan, target: TimeSpan, dependency: DependencyBaseModel }) => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when a double click is registered on a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyDblClick: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when the mouse moves out of a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyMouseOut: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when the mouse moves over a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyMouseOver: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when asynchronous dependency validation completes
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {number} event.dependencyType The dependency type, see [Type](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static)
     */
    onDependencyValidationComplete: ((event: { source: TimeSpan, target: TimeSpan, dependencyType: number }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when asynchronous dependency validation starts
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {number} event.dependencyType The dependency type, see [Type](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static)
     */
    onDependencyValidationStart: ((event: { source: TimeSpan, target: TimeSpan, dependencyType: number }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires on the owning Scheduler after the new event has been created.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {SchedulerEventModel} event.eventRecord The new `EventModel` record.
     * @param {SchedulerResourceModel} event.resourceRecord The resource for the row in which the event is being created.
     * @param {MouseEvent} event.event The ending mouseup event.
     * @param {HTMLElement} event.eventElement The DOM element representing the newly created event un the UI.
     */
    onDragCreateEnd: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, event: MouseEvent, eventElement: HTMLElement }) => void)|string
    /**
     * Fires on the owning Scheduler after the drag start has created a new Event record.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {SchedulerEventModel} event.eventRecord The event record being created
     * @param {SchedulerResourceModel} event.resourceRecord The resource record
     * @param {HTMLElement} event.eventElement The element representing the new event.
     */
    onDragCreateStart: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, eventElement: HTMLElement }) => void)|string
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid} event.source
     * @param {Model[]|object} event.selectedCells The cells that is currently being dragged over
     */
    onDragSelecting: ((event: { source: Grid, selectedCells: Model[]|object|Partial<ModelConfig> }) => void)|string
    /**
     * Fired when a double click or drag gesture has created a new event and added it to the event store.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler.
     * @param {SchedulerEventModel} event.eventRecord The new event record.
     * @param {SchedulerResourceModel} event.resourceRecord The resource assigned to the new event.
     */
    onEventAutoCreated: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel }) => void)|string
    /**
     * Triggered for click on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventClick: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for right-click on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventContextMenu: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for double-click on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventDblClick: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler when event is dragged
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords Event records being dragged
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords Assignment records being dragged
     * @param {Date} event.startDate Start date for the current location
     * @param {Date} event.endDate End date for the current location
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the drag started from
     * @param {SchedulerResourceModel} event.newResource Resource at the current location
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to `false` to signal that the current drop position is invalid.
     * @param {MouseEvent} event.domEvent Browser event
     */
    onEventDrag: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], startDate: Date, endDate: Date, resourceRecord: SchedulerResourceModel, newResource: SchedulerResourceModel, context: { valid: boolean }, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler after an event drag operation has been aborted
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords Event records being dragged
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords Assignment records being dragged
     * @param {MouseEvent} event.domEvent Browser event
     */
    onEventDragAbort: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], domEvent: MouseEvent }) => void)|string
    /**
     * Triggered when drag mode is changed, for example when copy key is
     * pressed or released while dragging.
     * @param {object} event Event object
     * @param {string} event.mode Drag mode, could be either 'move', 'copy', or 'auto'
     */
    onEventDragModeChange: ((event: { mode: string }) => void)|string
    /**
     * Fired on the owning Scheduler after an event drag operation regardless of the operation being cancelled or not
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     */
    onEventDragReset: ((event: { source: Scheduler }) => void)|string
    /**
     * Fired on the owning Scheduler when event dragging starts
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the drag starts from
     * @param {SchedulerEventModel[]} event.eventRecords Event records being dragged
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords Assignment records being dragged
     * @param {MouseEvent} event.event Browser event DEPRECATED (replaced by domEvent)
     * @param {MouseEvent} event.domEvent Browser event
     */
    onEventDragStart: ((event: { source: Scheduler, resourceRecord: SchedulerResourceModel, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], event: MouseEvent, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler when an event is dropped
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {SchedulerEventModel[]} event.eventRecords
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords
     * @param {HTMLElement} event.externalDropTarget The HTML element dropped upon, if drop happened on a valid external drop target
     * @param {boolean} event.isCopy
     * @param {object} event.context
     * @param {SchedulerEventModel} event.context.targetEventRecord Event record for drop target
     * @param {SchedulerResourceModel} event.context.newResource Resource record for drop target
     * @param {MouseEvent} event.domEvent Browser event
     */
    onEventDrop: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], externalDropTarget: HTMLElement, isCopy: boolean, context: { targetEventRecord: SchedulerEventModel, newResource: SchedulerResourceModel }, domEvent: MouseEvent }) => void)|string
    /**
     * Fired before the editor will load the event record data into its input fields. This is useful if you
     * want to modify the fields before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The editor widget
     * @param {SchedulerEventModel} event.record The record
     */
    onEventEditBeforeSetRecord: ((event: { source: Container, record: SchedulerEventModel }) => void)|string
    /**
     * Triggered when a keydown event is observed if there are selected events.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel[]} event.eventRecords The selected event records
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords The selected assignment records
     * @param {KeyboardEvent} event.event Browser event
     */
    onEventKeyDown: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], event: KeyboardEvent }) => void)|string
    /**
     * Triggered when a keyup event is observed if there are selected events.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel[]} event.eventRecords The selected event records
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords The selected assignment records
     * @param {KeyboardEvent} event.event Browser event
     */
    onEventKeyUp: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], event: KeyboardEvent }) => void)|string
    /**
     * This event fires on the owning Scheduler before the context menu is shown for an event. Allows manipulation of the items
     * to show in the same way as in `processItems`. Returning `false` from a listener prevents the menu from
     * being shown.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {SchedulerEventModel} event.eventRecord Event record for which the menu was triggered
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     * @param {MouseEvent} event.event Pointer event which triggered the context menu (if any)
     */
    onEventMenuBeforeShow: ((event: { source: Scheduler, items: Record<string, Partial<MenuItemConfig>>, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement, event?: MouseEvent }) => boolean|void)|string
    /**
     * This event fires on the owning Scheduler when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {MenuItem} event.item
     * @param {SchedulerEventModel} event.eventRecord
     * @param {SchedulerResourceModel} event.resourceRecord
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    onEventMenuItem: ((event: { source: Scheduler, item: MenuItem, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement }) => void)|string
    /**
     * This event fires on the owning Scheduler after showing the context menu for an event
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {Menu} event.menu The menu
     * @param {SchedulerEventModel} event.eventRecord Event record for which the menu was triggered
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    onEventMenuShow: ((event: { source: Scheduler, menu: Menu, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement }) => void)|string
    /**
     * Triggered for mouse down on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseDown: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the mouse enters an event bar.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseEnter: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the mouse leaves an event bar.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseLeave: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for mouse out events within and when moving out of an event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-eventMouseOut)
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseOut: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for mouse over events when moving into and within an event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-eventMouseOver)
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseOver: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for mouse up on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseUp: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler on each resize move event
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel} event.eventRecord Event record being resized
     * @param {Date} event.startDate
     * @param {Date} event.endDate
     * @param {HTMLElement} event.element
     */
    onEventPartialResize: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, startDate: Date, endDate: Date, element: HTMLElement }) => void)|string
    /**
     * Fires on the owning Scheduler after the resizing gesture has finished.
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {boolean} event.changed Shows if the record has been changed by the resize action
     * @param {SchedulerEventModel} event.eventRecord Event record being resized
     */
    onEventResizeEnd: ((event: { source: Scheduler, changed: boolean, eventRecord: SchedulerEventModel }) => void)|string
    /**
     * Fires on the owning Scheduler when event resizing starts
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel} event.eventRecord Event record being resized
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onEventResizeStart: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler when event segments are dragged
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords Dragged segments
     * @param {Date} event.startDate Start date for the current location
     * @param {Date} event.endDate End date for the current location
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to `false` to signal that the current drop position is invalid.
     */
    onEventSegmentDrag: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], startDate: Date, endDate: Date, context: { valid: boolean } }) => void)|string
    /**
     * Fired on the owning Scheduler after an event segment drag operation has been aborted
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords Dragged segments
     */
    onEventSegmentDragAbort: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[] }) => void)|string
    /**
     * Fired on the owning Scheduler after an event segment drag operation regardless of the operation being cancelled
     * or not
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     */
    onEventSegmentDragReset: ((event: { source: Scheduler }) => void)|string
    /**
     * Fired on the owning Scheduler when event segment dragging starts
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords Dragged segments
     * @param {MouseEvent} event.event Browser event
     */
    onEventSegmentDragStart: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], event: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler when an event segment is dropped
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {SchedulerEventModel[]} event.eventRecords Dropped segments
     */
    onEventSegmentDrop: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[] }) => void)|string
    /**
     * Fires on the owning Scheduler Pro on each segment resize move event
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {EventModel} event.eventRecord Segment being resized
     * @param {Date} event.startDate
     * @param {Date} event.endDate
     * @param {HTMLElement} event.element
     */
    onEventSegmentPartialResize: ((event: { source: SchedulerPro, eventRecord: EventModel, startDate: Date, endDate: Date, element: HTMLElement }) => void)|string
    /**
     * Fires on the owning Scheduler Pro after the resizing gesture has finished.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {boolean} event.changed Shows if the record has been changed by the resize action
     * @param {EventModel} event.eventRecord Segment being resized
     */
    onEventSegmentResizeEnd: ((event: { source: SchedulerPro, changed: boolean, eventRecord: EventModel }) => void)|string
    /**
     * Fires on the owning Scheduler Pro when segment resizing starts
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {EventModel} event.eventRecord Segment being resized
     * @param {ResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onEventSegmentResizeStart: ((event: { source: SchedulerPro, eventRecord: EventModel, resourceRecord: ResourceModel, event: MouseEvent }) => void)|string
    /**
     * Fired any time there is a change to the events selected in the Scheduler.
     * @param {object} event Event object
     * @param {'select'|'deselect'|'update'|'clear'} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {SchedulerEventModel[]} event.selected An array of the Events added to the selection.
     * @param {SchedulerEventModel[]} event.deselected An array of the Event removed from the selection.
     * @param {SchedulerEventModel[]} event.selection The new selection.
     */
    onEventSelectionChange: ((event: { action: 'select'|'deselect'|'update'|'clear', selected: SchedulerEventModel[], deselected: SchedulerEventModel[], selection: SchedulerEventModel[] }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onExpand: ((event: { source: Panel }) => void)|string
    /**
     * Fired after a parent node record is expanded.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record which has been expanded.
     */
    onExpandNode: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * Fired when a file is dropped on the widget element
     * @param {object} event Event object
     * @param {Grid} event.source The owning Grid instance
     * @param {DataTransferItem} event.file The dropped file descriptor
     * @param {DragEvent} event.domEvent The native DragEvent
     */
    onFileDrop: ((event: { source: Grid, file: DataTransferItem, domEvent: DragEvent }) => void)|string
    /**
     * Fires on the owning Grid when cell editing is finished
     * @param {object} event Event object
     * @param {Grid} event.grid Target grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onFinishCellEdit: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when a row drag operation is aborted
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {MouseEvent} event.event
     */
    onGridRowAbort: ((event: { source: DragHelper, context: object, event: MouseEvent }) => void)|string
    /**
     * Fired before dragging starts, return false to prevent the drag operation.
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent|TouchEvent} event.event
     */
    onGridRowBeforeDragStart: ((event: { source: DragHelper, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => boolean|void)|string
    /**
     * Fired before the row drop operation is finalized. You can return false to abort the drop operation, or a
     * Promise yielding `true` / `false` which allows for asynchronous abort (e.g. first show user a confirmation dialog).
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the `record`, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    onGridRowBeforeDropFinalize: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => Promise<boolean|void>)|string
    /**
     * Fired while the row is being dragged, in the listener function you have access to `context.insertBefore` a grid /
     * tree record, and additionally `context.parent` (a TreeNode) for trees. You can signal that the drop position is
     * valid or invalid by setting `context.valid = false;`
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent} event.event
     */
    onGridRowDrag: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[] }, event: MouseEvent }) => void)|string
    /**
     * Fired when dragging starts.
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent|TouchEvent} event.event
     */
    onGridRowDragStart: ((event: { source: DragHelper, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => void)|string
    /**
     * Fired after the row drop operation has completed, regardless of validity
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid true or false depending on whether the drop position was valid
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model} event.context.record [DEPRECATED] The dragged row record
     * @param {Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the record, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    onGridRowDrop: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, record: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => void)|string
    /**
     * This event fires on the owning Grid before the context menu is shown for a header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/HeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-headerMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     */
    onHeaderMenuBeforeShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => boolean|void)|string
    /**
     * This event fires on the owning Grid when an item is selected in the header context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     */
    onHeaderMenuItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid after the context menu is shown for a header
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     */
    onHeaderMenuShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid when a check item is toggled in the header context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {boolean} event.checked Checked or not
     */
    onHeaderMenuToggleItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, checked: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOut: ((event: { event: MouseEvent }) => void)|string
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOver: ((event: { event: MouseEvent }) => void)|string
    /**
     * Fired when a user gesture causes the active item to change.
     * @param {object} event Event object
     * @param {Event} event.event The browser event which instigated navigation. May be a click or key or focus event.
     * @param {HTMLElement|null} event.item The newly active item, or `null` if focus moved out.
     * @param {HTMLElement|null} event.oldItem The previously active item, or `null` if focus is moving in.
     */
    onNavigate: ((event: { event: Event, item: HTMLElement|null, oldItem: HTMLElement|null }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a paste action is performed.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData that was pasted
     * @param {Model[]} event.modifiedRecords The records which have been modified due to the paste action
     * @param {Location} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other paste events
     */
    onPaste: ((event: { source: Grid, clipboardData: string, modifiedRecords: Model[], targetCell: Location, entityName: string }) => void)|string
    /**
     * Fires on the owning Scheduler if a paste action is not allowed
     * @param {object} event Event object
     * @param {Scheduler} event.source Owner scheduler
     * @param {SchedulerEventModel[]} event.eventRecords
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords
     * @param {Date} event.date The paste date
     * @param {SchedulerResourceModel} event.resourceRecord The target resource record
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'event' to distinguish this event from other `pasteNotAllowed` events
     * @param {'overlappingEvents'|'resourceReadOnly'} event.reason A string id to use for displaying an error message to the user.
     */
    onPasteNotAllowed: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], date: Date, resourceRecord: SchedulerResourceModel, isCut: boolean, entityName: string, reason: 'overlappingEvents'|'resourceReadOnly' }) => void)|string
    /**
     * Fires on the owning Grid when export has finished
     * @param {object} event Event object
     * @param {Response} event.response Optional response, if received
     * @param {Error} event.error Optional error, if exception occurred
     */
    onPdfExport: ((event: { response?: Response, error?: Error }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when dragging the percent bar
     * @param {object} event Event object
     * @param {TimelineBase} event.source SchedulerPro or Gantt instance
     * @param {Model} event.taskRecord The task record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onPercentBarDrag: ((event: { source: TimelineBase, taskRecord: Model, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget if a percent bar drag-drop operation is aborted
     * @param {object} event Event object
     * @param {TimelineBase} event.source SchedulerPro instance
     * @param {Model} event.taskRecord The task record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onPercentBarDragAbort: ((event: { source: TimelineBase, taskRecord: Model, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when percent bar dragging starts
     * @param {object} event Event object
     * @param {TimelineBase} event.source SchedulerPro or Gantt instance
     * @param {Model} event.taskRecord The task record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onPercentBarDragStart: ((event: { source: TimelineBase, taskRecord: Model, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when dropping the percent bar
     * @param {object} event Event object
     * @param {TimelineBase} event.source SchedulerPro or Gantt instance
     * @param {Model} event.taskRecord The task record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onPercentBarDrop: ((event: { source: TimelineBase, taskRecord: Model, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => void)|string
    /**
     * Fired after the [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) has changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.centerDate The new center date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onPresetChange: ((event: { source: Scheduler, startDate: Date, centerDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired after releasing an event, useful to cleanup of custom content added on `renderEvent` or in `eventRenderer`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord The event record
     * @param {SchedulerResourceModel} event.resourceRecord The resource record
     * @param {SchedulerAssignmentModel} event.assignmentRecord The assignment record
     * @param {object} event.renderData An object containing details about the event rendering
     * @param {HTMLElement} event.element The event bar element
     */
    onReleaseEvent: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, renderData: object, element: HTMLElement }) => void)|string
    /**
     * Fired after rendering an event, when its element is available in DOM.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord The event record
     * @param {SchedulerResourceModel} event.resourceRecord The resource record
     * @param {SchedulerAssignmentModel} event.assignmentRecord The assignment record
     * @param {object} event.renderData An object containing details about the event rendering, see [eventRenderer](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer) for details
     * @param {boolean} event.isRepaint `true` if this render is a repaint of the event, updating its existing element
     * @param {boolean} event.isReusingElement `true` if this render lead to the event reusing a released events element
     * @param {HTMLElement} event.element The event bar element
     */
    onRenderEvent: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, renderData: object, isRepaint: boolean, isReusingElement: boolean, element: HTMLElement }) => void)|string
    /**
     * Fires after a row is rendered.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Row} event.row The row that has been rendered.
     * @param {Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    onRenderRow: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows have been rendered
     * @param {object} event Event object
     * @param {Grid} event.source This grid.
     */
    onRenderRows: ((event: { source: Grid }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Fired when clicking a resource header cell
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerResourceModel} event.resourceRecord The resource record
     * @param {Event} event.event The event
     */
    onResourceHeaderClick: ((event: { source: Scheduler, resourceRecord: SchedulerResourceModel, event: Event }) => void)|string
    /**
     * Fired when activating context menu on a resource header cell
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerResourceModel} event.resourceRecord The resource record
     * @param {Event} event.event The event
     */
    onResourceHeaderContextmenu: ((event: { source: Scheduler, resourceRecord: SchedulerResourceModel, event: Event }) => void)|string
    /**
     * Fired when double clicking a resource header cell
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerResourceModel} event.resourceRecord The resource record
     * @param {Event} event.event The event
     */
    onResourceHeaderDblclick: ((event: { source: Scheduler, resourceRecord: SchedulerResourceModel, event: Event }) => void)|string
    /**
     * This event fires on the owning scheduler before the context menu is shown for a resource.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ResourceMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-resourceMenuBeforeShow)
     * @param {object} event Event object
     * @param {Scheduler} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     * @param {SchedulerResourceModel} event.resourceRecord Record
     */
    onResourceMenuBeforeShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column, resourceRecord: SchedulerResourceModel }) => boolean|void)|string
    /**
     * This event fires on the owning scheduler when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {SchedulerResourceModel} event.record Record
     */
    onResourceMenuItem: ((event: { source: Scheduler, menu: Menu, item: MenuItem, record: SchedulerResourceModel }) => void)|string
    /**
     * This event fires on the owning scheduler after the context menu is shown for a resource.
     * @param {object} event Event object
     * @param {Scheduler} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {SchedulerResourceModel} event.record Record
     */
    onResourceMenuShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, record: SchedulerResourceModel }) => void)|string
    /**
     * This event fires on the owning grid when a check item is toggled in the context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {SchedulerResourceModel} event.resourceRecord Record
     * @param {boolean} event.checked Checked or not
     */
    onResourceMenuToggleItem: ((event: { source: Scheduler, menu: Menu, item: MenuItem, resourceRecord: SchedulerResourceModel, checked: boolean }) => void)|string
    /**
     * Triggered for click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured with
     * `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeClick: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for right-click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeContextMenu: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for double-click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeDblClick: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse down ona resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeMouseDown: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse out of a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeMouseOut: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse over on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeMouseOver: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse up ona resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeMouseUp: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for click on a resource time range. Only triggered if the ResourceTimeRange feature is configured with
     * `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeClick: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for right-click on a resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeContextMenu: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for double-click on a resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeDblClick: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse down ona resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeMouseDown: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse out of a resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeMouseOut: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse over on a resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeMouseOver: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse up ona resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeMouseUp: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    onResponsive: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string
    /**
     * Triggered when user clicks an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {TimeSpan} event.tick A record which encapsulates the time axis tick clicked on.
     * @param {number} event.tickIndex The index of the time axis tick clicked on.
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleClick: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when user right-clicks an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {TimeSpan} event.tick A record which encapsulates the time axis tick clicked on.
     * @param {number} event.tickIndex The index of the time axis tick clicked on.
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleContextMenu: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when user double-clicks an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {TimeSpan} event.tick A record which encapsulates the time axis tick clicked on.
     * @param {number} event.tickIndex The index of the time axis tick clicked on.
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Index of double-clicked resource
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleDblClick: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget before the context menu is shown for the schedule. Allows manipulation of the items
     * to show in the same way as in `processItems`. Returning `false` from a listener prevents the menu from
     * being shown.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {SchedulerEventModel} event.eventRecord Event record for which the menu was triggered
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    onScheduleMenuBeforeShow: ((event: { source: Scheduler, items: Record<string, Partial<MenuItemConfig>>, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, date: Date, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement }) => boolean|void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {MenuItem} event.item
     * @param {SchedulerResourceModel} event.resourceRecord
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {HTMLElement} event.element
     */
    onScheduleMenuItem: ((event: { source: Scheduler, item: MenuItem, resourceRecord: SchedulerResourceModel, date: Date, element: HTMLElement }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget after showing the context menu for the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Menu} event.menu The menu
     * @param {SchedulerResourceModel} event.resourceRecord
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {HTMLElement} event.targetElement
     */
    onScheduleMenuShow: ((event: { source: Scheduler, items: Record<string, Partial<MenuItemConfig>>, menu: Menu, resourceRecord: SchedulerResourceModel, date: Date, targetElement: HTMLElement }) => void)|string
    /**
     * Triggered when user mousedowns over an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseDown: ((event: { source: Scheduler, date: Date, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when mouse enters an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseEnter: ((event: { source: Scheduler, date: Date, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when mouse leaves an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseLeave: ((event: { source: Scheduler, event: MouseEvent }) => void)|string
    /**
     * Triggered when user moves mouse over an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {TimeSpan} event.tick A record which encapsulates the time axis tick clicked on.
     * @param {number} event.tickIndex The index of the time axis tick clicked on.
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseMove: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when user mouseups over an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseUp: ((event: { source: Scheduler, date: Date, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Grid has scrolled vertically
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {number} event.scrollTop The vertical scroll position.
     */
    onScroll: ((event: { source: Grid, scrollTop: number }) => void)|string
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select'|'deselect'} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records deselected in this operation.
     * @param {Model[]} event.selected The records selected in this operation.
     * @param {Model[]} event.selection The records in the new selection.
     * @param {Location[]} event.deselectedCells The cells deselected in this operation.
     * @param {Location[]} event.selectedCells The cells selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the new selection.
     */
    onSelectionChange: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => void)|string
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    onSelectionModeChange: ((event: { selectionMode: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * Fires when splitting the Grid.
     * @param {object} event Event object
     * @param {GridBase[]} event.subViews The sub views created by the split
     * @param {object} event.options The options passed to the split call
     * @param {'horizontal'|'vertical'|'both'} event.options.direction The direction of the split
     * @param {Column} event.options.atColumn The column to split at
     * @param {Model} event.options.atRecord The record to split at
     */
    onSplit: ((event: { subViews: GridBase[], options: { direction: 'horizontal'|'vertical'|'both', atColumn: Column, atRecord: Model } }) => void)|string
    /**
     * Fired by the Grid when the collapse icon is clicked. Return `false` to prevent the default collapse action,
     * if you want to implement your own behavior.
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterCollapseClick: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => boolean|void)|string
    /**
     * Fired by the Grid after a sub-grid has been resized using the splitter
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The resized subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterDragEnd: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fired by the Grid when a sub-grid resize gesture starts
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The subgrid about to be resized
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterDragStart: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fires on the owning Grid when editing starts
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onStartCellEdit: ((event: { source: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fires after a sub grid is collapsed.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance
     * @param {SubGrid} event.subGrid The sub grid instance
     */
    onSubGridCollapse: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Fires after a sub grid is expanded.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance
     * @param {SubGrid} event.subGrid The sub grid instance
     */
    onSubGridExpand: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget when the editor for an event is canceled.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {EventModel} event.taskRecord the task about the shown in the editor
     * @param {TaskEditorBase} event.editor The editor
     */
    onTaskEditCanceled: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => void)|string
    /**
     * Fired when the timeaxis has changed, for example by zooming or configuring a new time span.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {object} event.config Config object used to reconfigure the time axis.
     * @param {Date} event.config.startDate New start date (if supplied)
     * @param {Date} event.config.endDate New end date (if supplied)
     */
    onTimeAxisChange: ((event: { source: Scheduler, config: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fires after a click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderClick: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a right click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderContextMenu: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a double click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderDblClick: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget before the context menu is shown for the time axis header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeAxisHeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-timeAxisHeaderMenuBeforeShow)
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Time axis column
     */
    onTimeAxisHeaderMenuBeforeShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => boolean|void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget when an item is selected in the header context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Time axis column
     */
    onTimeAxisHeaderMenuItem: ((event: { source: Scheduler, menu: Menu, item: MenuItem, column: Column }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget after the context menu is shown for a header
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Time axis column
     */
    onTimeAxisHeaderMenuShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.event DEPRECATED 5.3.0 Use `domEvent` instead
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTimeRangeHeaderClick: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, event: MouseEvent, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a right click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.event DEPRECATED 5.3.0 Use `domEvent` instead
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTimeRangeHeaderContextMenu: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, event: MouseEvent, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a double click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.event DEPRECATED 5.3.0 Use `domEvent` instead
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTimeRangeHeaderDblClick: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, event: MouseEvent, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered when time selection changes
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Date} event.startDate The selected range start date, or `undefined`
     * @param {Date} event.endDate The selected range end date, or `undefined`
     */
    onTimeSelectionChange: ((event: { source: Scheduler, startDate: Date, endDate: Date }) => void)|string
    /**
     * Triggered when clicking the time selection header element
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Date} event.startDate The selected range start date
     * @param {Date} event.endDate The selected range end date
     * @param {Event} event.domEvent The raw DOM event
     */
    onTimeSelectionElementClick: ((event: { source: Scheduler, startDate: Date, endDate: Date, domEvent: Event }) => void)|string
    /**
     * Fired when the pointer-activated [timelineContext](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineDomEvents#property-timelineContext) has changed.
     * @param {object} event Event object
     * @param {TimelineContext} event.oldContext The tick/resource context being deactivated.
     * @param {TimelineContext} event.context The tick/resource context being activated.
     */
    onTimelineContextChange: ((event: { oldContext: TimelineContext, context: TimelineContext }) => void)|string
    /**
     * Fired when the *scheduler* viewport (not the overall Scheduler element) changes size.
     * This happens when the grid changes height, or when the subgrid which encapsulates the
     * scheduler column changes width.
     * @param {object} event Event object
     * @param {Widget} event.source This Scheduler
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onTimelineViewportResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Group expanded or collapsed
     * @param {object} event Event object
     * @param {Model} event.groupRecord Group record
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     */
    onToggleGroup: ((event: { groupRecord: Model, collapse: boolean }) => void)|string
    /**
     * Fired after a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    onToggleNode: ((event: { record: Model, collapse: boolean }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Tool} event.source This Panel.
     * @param {Tool} event.tool The tool which is being clicked.
     */
    onToolClick: ((event: { source: Tool, tool: Tool }) => void)|string
    /**
     * <strong>Note that this event fires on the owning [SchedulerPro](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro).</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-transactionChange)
     * @param {object} event Event object
     * @param {boolean} event.hasChanges Whether any changes are recorded that are not yet attached to a version.
     */
    onTransactionChange: ((event: { hasChanges: boolean }) => void)|string
    /**
     * Fires when un-splitting the Grid.
     */
    onUnsplit: (() => void)|string
    /**
     * Fired when the range of dates visible within the viewport changes. This will be when
     * scrolling along a time axis.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-visibleDateRangeChange)
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onVisibleDateRangeChange: ((event: { source: Scheduler, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
}

/**
 * <h2>Intro</h2>
 * The Scheduler Pro is an extension of the [Bryntum Scheduler](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/Scheduler), and combines the visualisation capabilities
 * of the Scheduler with the powerful scheduling engine from the Gantt. This means it can manage [project](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel) data composed by
 * tasks, dependencies, resources, assignments and calendars (for working / non-working time). If you have inter-task dependencies,
 * task updates will be propagated to any successors after a task is moved. The engine will reschedule tasks
 * according to the constraints, dependencies and calendars defined in the project. To familiarize yourself with the various APIs and data structures
 * of the Scheduler Pro, we recommend starting with these resources:
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro)
 */
export class SchedulerPro extends SchedulerProBase {
    /**
     * An object containing Features
     */
    features: SchedulerProFeaturesType
    /**
     * Fired any time there is a change to the assignments selected in the Scheduler.
     * @param {object} event Event object
     * @param {'select'|'deselect'|'update'|'clear'} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {SchedulerAssignmentModel[]} event.selected An array of the Assignments added to the selection.
     * @param {SchedulerAssignmentModel[]} event.deselected An array of the Assignments removed from the selection.
     * @param {SchedulerAssignmentModel[]} event.selection The new selection.
     */
    onAssignmentSelectionChange: ((event: { action: 'select'|'deselect'|'update'|'clear', selected: SchedulerAssignmentModel[], deselected: SchedulerAssignmentModel[], selection: SchedulerAssignmentModel[] }) => void)|string
    /**
     * Fires before an assignment is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or
     * by the event editor. Can for example be used to display a custom dialog to confirm deletion, in which
     * case records should be "manually" removed after confirmation:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-beforeAssignmentDelete)
     * @param {object} event Event object
     * @param {Scheduler} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeAssignmentDelete: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => boolean|void)|string
    /**
     * Fired any time there is going to be a change to the assignments selected in the Scheduler.
     * Returning `false` prevents the change
     * @param {object} event Event object
     * @param {string} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {SchedulerEventModel[]} event.selected An array of assignments that will be added to the selection.
     * @param {SchedulerEventModel[]} event.deselected An array of assignments that will be removed from the selection.
     * @param {SchedulerEventModel[]} event.selection The currently selected assignments, before applying `selected` and `deselected`.
     */
    onBeforeAssignmentSelectionChange: ((event: { action: string, selected: SchedulerEventModel[], deselected: SchedulerEventModel[], selection: SchedulerEventModel[] }) => boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before an event is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or by the
     * event editor. Return `false` to immediately veto the removal (or a `Promise` yielding `true` or `false`
     * for async vetoing).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-beforeEventDelete)
     * @param {object} event Event object
     * @param {Scheduler|any} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeEventDelete: ((event: { source: Scheduler|any, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean|void>)|string
    /**
     * Fired any time there is going to be a change to the events selected in the Scheduler.
     * Returning `false` prevents the change
     * @param {object} event Event object
     * @param {string} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {SchedulerEventModel[]} event.selected An array of events that will be added to the selection.
     * @param {SchedulerEventModel[]} event.deselected An array of events that will be removed from the selection.
     * @param {SchedulerEventModel[]} event.selection The currently selected events, before applying `selected` and `deselected`.
     */
    onBeforeEventSelectionChange: ((event: { action: string, selected: SchedulerEventModel[], deselected: SchedulerEventModel[], selection: SchedulerEventModel[] }) => boolean|void)|string
    /**
     * Fired before the [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) is changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onBeforePresetChange: ((event: { source: Scheduler, startDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records to be deselected in this operation.
     * @param {Model[]} event.selected The records to be selected in this operation.
     * @param {Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Location[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Location[]} event.selectedCells The cells to be selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    onBeforeSelectionChange: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellContextMenu: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellDblClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOut: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOver: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid} event.source
     * @param {Model[]|object} event.selectedCells The cells that is currently being dragged over
     */
    onDragSelecting: ((event: { source: Grid, selectedCells: Model[]|object|Partial<ModelConfig> }) => void)|string
    /**
     * Triggered for click on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventClick: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for right-click on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventContextMenu: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for double-click on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventDblClick: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for mouse down on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseDown: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the mouse enters an event bar.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseEnter: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the mouse leaves an event bar.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseLeave: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for mouse out events within and when moving out of an event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-eventMouseOut)
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseOut: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for mouse over events when moving into and within an event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#event-eventMouseOver)
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseOver: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for mouse up on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseUp: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Fired any time there is a change to the events selected in the Scheduler.
     * @param {object} event Event object
     * @param {'select'|'deselect'|'update'|'clear'} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {SchedulerEventModel[]} event.selected An array of the Events added to the selection.
     * @param {SchedulerEventModel[]} event.deselected An array of the Event removed from the selection.
     * @param {SchedulerEventModel[]} event.selection The new selection.
     */
    onEventSelectionChange: ((event: { action: 'select'|'deselect'|'update'|'clear', selected: SchedulerEventModel[], deselected: SchedulerEventModel[], selection: SchedulerEventModel[] }) => void)|string
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOut: ((event: { event: MouseEvent }) => void)|string
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOver: ((event: { event: MouseEvent }) => void)|string
    /**
     * Fired when a user gesture causes the active item to change.
     * @param {object} event Event object
     * @param {Event} event.event The browser event which instigated navigation. May be a click or key or focus event.
     * @param {HTMLElement|null} event.item The newly active item, or `null` if focus moved out.
     * @param {HTMLElement|null} event.oldItem The previously active item, or `null` if focus is moving in.
     */
    onNavigate: ((event: { event: Event, item: HTMLElement|null, oldItem: HTMLElement|null }) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => void)|string
    /**
     * Fired after the [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) has changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.centerDate The new center date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onPresetChange: ((event: { source: Scheduler, startDate: Date, centerDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    onResponsive: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string
    /**
     * Triggered when user clicks an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {TimeSpan} event.tick A record which encapsulates the time axis tick clicked on.
     * @param {number} event.tickIndex The index of the time axis tick clicked on.
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleClick: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when user right-clicks an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {TimeSpan} event.tick A record which encapsulates the time axis tick clicked on.
     * @param {number} event.tickIndex The index of the time axis tick clicked on.
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleContextMenu: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when user double-clicks an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {TimeSpan} event.tick A record which encapsulates the time axis tick clicked on.
     * @param {number} event.tickIndex The index of the time axis tick clicked on.
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Index of double-clicked resource
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleDblClick: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when user mousedowns over an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseDown: ((event: { source: Scheduler, date: Date, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when mouse enters an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseEnter: ((event: { source: Scheduler, date: Date, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when mouse leaves an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseLeave: ((event: { source: Scheduler, event: MouseEvent }) => void)|string
    /**
     * Triggered when user moves mouse over an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {TimeSpan} event.tick A record which encapsulates the time axis tick clicked on.
     * @param {number} event.tickIndex The index of the time axis tick clicked on.
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseMove: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when user mouseups over an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseUp: ((event: { source: Scheduler, date: Date, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select'|'deselect'} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records deselected in this operation.
     * @param {Model[]} event.selected The records selected in this operation.
     * @param {Model[]} event.selection The records in the new selection.
     * @param {Location[]} event.deselectedCells The cells deselected in this operation.
     * @param {Location[]} event.selectedCells The cells selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the new selection.
     */
    onSelectionChange: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => void)|string
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    onSelectionModeChange: ((event: { selectionMode: object }) => void)|string
    /**
     * Fires after a click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderClick: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a right click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderContextMenu: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a double click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderDblClick: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fired when the pointer-activated [timelineContext](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineDomEvents#property-timelineContext) has changed.
     * @param {object} event Event object
     * @param {TimelineContext} event.oldContext The tick/resource context being deactivated.
     * @param {TimelineContext} event.context The tick/resource context being activated.
     */
    onTimelineContextChange: ((event: { oldContext: TimelineContext, context: TimelineContext }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<SchedulerProConfig>} config
     */
    constructor(config?: Partial<SchedulerProConfig>);
}

type SchedulerProBaseFeaturesType = {
    calendarHighlight: CalendarHighlight
    cellCopyPaste: CellCopyPaste
    cellEdit: CellEdit
    cellMenu: CellMenu
    cellTooltip: CellTooltip
    columnAutoWidth: ColumnAutoWidth
    columnDragToolbar: ColumnDragToolbar
    columnLines: ColumnLines
    columnPicker: ColumnPicker
    columnRename: ColumnRename
    columnReorder: ColumnReorder
    columnResize: ColumnResize
    dependencies: Dependencies
    dependencyEdit: DependencyEdit
    eventBuffer: EventBuffer
    eventCopyPaste: EventCopyPaste
    eventDrag: EventDrag
    eventDragCreate: EventDragCreate
    eventDragSelect: EventDragSelect
    eventEdit: EventEdit
    eventFilter: EventFilter
    eventMenu: EventMenu
    eventNonWorkingTime: EventNonWorkingTime
    eventResize: EventResize
    eventSegmentDrag: EventSegmentDrag
    eventSegmentResize: EventSegmentResize
    eventSegments: EventSegments
    eventTooltip: EventTooltip
    excelExporter: ExcelExporter
    fileDrop: FileDrop
    fillHandle: FillHandle
    filter: Filter
    filterBar: FilterBar
    group: Group
    groupSummary: GroupSummary
    headerMenu: HeaderMenu
    headerZoom: HeaderZoom
    labels: Labels
    mergeCells: MergeCells
    nestedEvents: NestedEvents
    nonWorkingTime: NonWorkingTime
    pan: Pan
    pdfExport: PdfExport
    percentBar: PercentBar
    print: Print
    quickFind: QuickFind
    regionResize: RegionResize
    resourceMenu: ResourceMenu
    resourceNonWorkingTime: ResourceNonWorkingTime
    resourceTimeRanges: ResourceTimeRanges
    rowCopyPaste: RowCopyPaste
    rowExpander: RowExpander
    rowReorder: RowReorder
    rowResize: RowResize
    scheduleContext: ScheduleContext
    scheduleMenu: ScheduleMenu
    scheduleTooltip: ScheduleTooltip
    search: Search
    simpleEventEdit: SimpleEventEdit
    sort: Sort
    split: Split
    stickyCells: StickyCells
    stickyEvents: StickyEvents
    stripe: Stripe
    summary: Summary
    taskEdit: TaskEdit
    timeAxisHeaderMenu: TimeAxisHeaderMenu
    timeRanges: TimeRanges
    timeSelection: TimeSelection
    timeSpanHighlight: TimeSpanHighlight
    tree: Tree
    treeGroup: TreeGroup
    versions: Versions
}

type SchedulerProBaseFeaturesConfigType = {
    calendarHighlight: string|boolean|Partial<CalendarHighlightConfig>
    cellCopyPaste: string|boolean|Partial<CellCopyPasteConfig>
    cellEdit: string|boolean|Partial<CellEditConfig>
    cellMenu: string|boolean|Partial<CellMenuConfig>
    cellTooltip: string|boolean|Partial<CellTooltipConfig>
    columnAutoWidth: string|boolean|Partial<ColumnAutoWidthConfig>
    columnDragToolbar: string|boolean|Partial<ColumnDragToolbarConfig>
    columnLines: string|boolean|Partial<ColumnLinesConfig>
    columnPicker: string|boolean|Partial<ColumnPickerConfig>
    columnRename: string|boolean|Partial<ColumnRenameConfig>
    columnReorder: string|boolean|Partial<ColumnReorderConfig>
    columnResize: string|boolean|Partial<ColumnResizeConfig>
    dependencies: string|boolean|Partial<DependenciesConfig>
    dependencyEdit: string|boolean|Partial<DependencyEditConfig>
    eventBuffer: string|boolean|Partial<EventBufferConfig>
    eventCopyPaste: string|boolean|Partial<EventCopyPasteConfig>
    eventDrag: string|boolean|Partial<EventDragConfig>
    eventDragCreate: string|boolean|Partial<EventDragCreateConfig>
    eventDragSelect: string|boolean|Partial<EventDragSelectConfig>
    eventEdit: string|boolean|Partial<EventEditConfig>
    eventFilter: string|boolean|Partial<EventFilterConfig>
    eventMenu: string|boolean|Partial<EventMenuConfig>
    eventNonWorkingTime: string|boolean|Partial<EventNonWorkingTimeConfig>
    eventResize: string|boolean|Partial<EventResizeConfig>
    eventSegmentDrag: string|boolean|Partial<EventSegmentDragConfig>
    eventSegmentResize: string|boolean|Partial<EventSegmentResizeConfig>
    eventSegments: string|boolean|Partial<EventSegmentsConfig>
    eventTooltip: string|boolean|Partial<EventTooltipConfig>
    excelExporter: string|boolean|Partial<ExcelExporterConfig>
    fileDrop: string|boolean|Partial<FileDropConfig>
    fillHandle: string|boolean|Partial<FillHandleConfig>
    filter: string|boolean|Partial<FilterConfig>
    filterBar: string|boolean|Partial<FilterBarConfig>
    group: string|boolean|Partial<GroupConfig>
    groupSummary: string|boolean|Partial<GroupSummaryConfig>
    headerMenu: string|boolean|Partial<HeaderMenuConfig>
    headerZoom: string|boolean|Partial<HeaderZoomConfig>
    labels: string|boolean|Partial<LabelsConfig>
    mergeCells: string|boolean|Partial<MergeCellsConfig>
    nestedEvents: string|boolean|Partial<NestedEventsConfig>
    nonWorkingTime: string|boolean|Partial<NonWorkingTimeConfig>
    pan: string|boolean|Partial<PanConfig>
    pdfExport: string|boolean|Partial<PdfExportConfig>
    percentBar: string|boolean|Partial<PercentBarConfig>
    print: string|boolean|Partial<PrintConfig>
    quickFind: string|boolean|Partial<QuickFindConfig>
    regionResize: string|boolean|Partial<RegionResizeConfig>
    resourceMenu: string|boolean|Partial<ResourceMenuConfig>
    resourceNonWorkingTime: string|boolean|Partial<ResourceNonWorkingTimeConfig>
    resourceTimeRanges: string|boolean|Partial<ResourceTimeRangesConfig>
    rowCopyPaste: string|boolean|Partial<RowCopyPasteConfig>
    rowExpander: string|boolean|Partial<RowExpanderConfig>
    rowReorder: string|boolean|Partial<RowReorderConfig>
    rowResize: string|boolean|Partial<RowResizeConfig>
    scheduleContext: string|boolean|Partial<ScheduleContextConfig>
    scheduleMenu: string|boolean|Partial<ScheduleMenuConfig>
    scheduleTooltip: string|boolean|Partial<ScheduleTooltipConfig>
    search: string|boolean|Partial<SearchConfig>
    simpleEventEdit: string|boolean|Partial<SimpleEventEditConfig>
    sort: string|boolean|Partial<SortConfig>
    split: string|boolean|Partial<SplitConfig>
    stickyCells: string|boolean|Partial<StickyCellsConfig>
    stickyEvents: string|boolean|Partial<StickyEventsConfig>
    stripe: string|boolean|Partial<StripeConfig>
    summary: string|boolean|Partial<SummaryConfig>
    taskEdit: string|boolean|Partial<TaskEditConfig>
    timeAxisHeaderMenu: string|boolean|Partial<TimeAxisHeaderMenuConfig>
    timeRanges: string|boolean|Partial<TimeRangesConfig>
    timeSelection: string|boolean|Partial<TimeSelectionConfig>
    timeSpanHighlight: string|boolean|Partial<TimeSpanHighlightConfig>
    tree: string|boolean|Partial<TreeConfig>
    treeGroup: string|boolean|Partial<TreeGroupConfig>
    versions: string|boolean|Partial<VersionsConfig>
}

/**
 * Type with configuration options for [SchedulerProBase](https://bryntum.com/products/grid/docs/api/SchedulerPro/view/SchedulerProBase) class.
 */
type SchedulerProBaseConfig = ContainerItemConfig & {
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * Set to `false` to not allow creating dependencies
     */
    allowCreate: boolean
    /**
     * `false` to require a drop on a target event bar side circle to define the dependency type.
     * If dropped on the event bar, the `defaultValue` of the DependencyModel `type` field will be used to
     * determine the target task side.
     */
    allowDropOnEventBar: boolean
    /**
     * Keep the tooltip open if user moves the mouse over it.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-allowOver)
     */
    allowOver: boolean
    /**
     * Set to `false` if you don't want to allow events overlapping times for any one resource (defaults to `true`).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-allowOverlap)
     */
    allowOverlap: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Set to true to anchor tooltip to the triggering target. If set to `false`, the tooltip
     * will align to the mouse position. When set to `false`, it will also set `anchor: false`
     * to hide anchor arrow.
     */
    anchorToTarget: boolean
    /**
     * Set to `false` to prevent remove row animation and remove the delay related to that.
     */
    animateRemovingRows: boolean
    /**
     * When the [Tree](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/Tree) feature is in use and the Store is a tree store, this
     * config may be set to `true` to visually animate branch node expand and collapse operations.
     * *This is not supported in Scheduler and Gantt*
     */
    animateTreeNodeToggle: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * The optional [AssignmentStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/AssignmentStore), holding assignments between resources and events.
     * Required for multi assignments.
     */
    assignmentStore: AssignmentStore|Partial<AssignmentStoreConfig>
    /**
     * Inline assignments, will be loaded into the backing project's AssignmentStore.
     */
    assignments: AssignmentModel[]|Partial<AssignmentModelConfig>[]
    /**
     * You can set this option to `false` to make the timeline panel start and end on the exact provided
     * [startDate](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-startDate)/[endDate](#Scheduler/view/TimelineBase#config-endDate) w/o adjusting them.
     */
    autoAdjustTimeAxis: boolean
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#function-hide) when the user clicks or
     * taps outside its widget. Configure as `false` to make a Tooltip non-transient when user clicks outside it.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-autoClose)
     */
    autoClose: boolean
    /**
     * Automatically set grids height to fit all rows (no scrolling in the grid). In general you should avoid
     * using `autoHeight: true`, since it will bypass Grids virtual rendering and render all rows at once, which
     * in a larger grid is really bad for performance.
     */
    autoHeight: boolean
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#function-hide) when the mouse exits the target
     * element. Configure as `false` to make a Tooltip non-transient.
     */
    autoHide: boolean
    /**
     * Show immediately when created
     */
    autoShow: boolean
    /**
     * Update assigned [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * Controls how much space to leave between stacked event bars in px.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-barMargin)
     */
    barMargin: number
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-bbar)
     */
    bbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-bodyCls)
     */
    bodyCls: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * This config defines the size of the start and end invisible parts of the timespan when [infiniteScroll](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineScroll#config-infiniteScroll) set to `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-bufferCoef)
     */
    bufferCoef: number
    /**
     * This config defines the scroll limit, which, when exceeded will cause a timespan shift.
     * The limit is calculated as the `panelWidth * [bufferCoef](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineScroll#config-bufferCoef) * bufferThreshold`. During scrolling, if the left or right side
     * has less than that of the rendered content - a shift is triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-bufferThreshold)
     */
    bufferThreshold: number
    /**
     * Inline calendars, will be loaded into the backing project's CalendarManagerStore.
     */
    calendars: CalendarModel[]|Partial<CalendarModelConfig>[]
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Show a tool in the header to close this Popup, and allow `ESC` close it.
     * The tool is available in the [tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Toolable#property-tools) object
     * under the name `close`. It uses the CSS class `b-popup-close` to apply a
     * default close icon. This may be customized with your own CSS rules.
     */
    closable: boolean
    /**
     * The action to take when calling the [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) method.
     * By default, the popup is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-closeAction)
     */
    closeAction: 'hide'|'destroy'
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-cls)
     */
    cls: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-collapsible)
     */
    collapsible: boolean|Partial<PanelCollapserConfig>|Partial<PanelCollapserOverlayConfig>
    /**
     * Set to `false` to not show column lines. End result might be overruled by/differ between themes.
     */
    columnLines: boolean
    /**
     * Accepts column definitions for the grid during initialization. They will be used to create
     * [Column](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column) instances that are added to a [ColumnStore](#Grid/data/ColumnStore).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-columns)
     */
    columns: ColumnStore|Partial<GridColumnConfig>[]|Partial<ColumnStoreConfig>
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Event which is used to show context menus.
     * Available options are: 'contextmenu', 'click', 'dblclick'.
     */
    contextMenuTriggerEvent: 'contextmenu'|'click'|'dblclick'
    /**
     * If true, a new event will be created when user double-clicks on a time axis cell (if scheduler is not in
     * read only mode).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-createEventOnDblClick)
     * @param {boolean} createEventOnDblClick.useEventModelDefaults set to `true` to set default duration based on the defaults specified by the [duration](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/EventModel#field-duration) and [durationUnit](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/EventModel#field-durationUnit) fields.
     */
    createEventOnDblClick: boolean|object
    /**
     * A tooltip config object that will be applied to the dependency creation [Tooltip](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip)
     */
    creationTooltip: Partial<TooltipConfig>
    /**
     * A template function that will be called to generate the HTML contents of the dependency creation tooltip.
     * You can return either an HTML string or a [DomConfig](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DomHelper#typedef-DomConfig) object.
     * @param {object} data Data about the dependency being created
     * @param {TimeSpan} data.source The from event
     * @param {TimeSpan} data.target The target event
     * @param {string} data.fromSide The from side (start, end, top, bottom)
     * @param {string} data.toSide The target side (start, end, top, bottom)
     * @param {boolean} data.valid The validity of the dependency
     * @returns {string|DomConfig}
     */
    creationTooltipTemplate: (data: { source: TimeSpan, target: TimeSpan, fromSide: string, toSide: string, valid: boolean }) => string|DomConfig
    /**
     * Supply a [CrudManager](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/CrudManager) instance or a config object if you want to use
     * CrudManager for handling data.
     */
    crudManager: Partial<CrudManagerConfig>|CrudManager
    /**
     * Class that should be used to instantiate a CrudManager in case it's provided as a simple object to
     * [crudManager](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerStores#config-crudManager) config.
     */
    crudManagerClass: typeof CrudManager
    /**
     * Class implementing the popup resolving *scheduling cycles*.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-cycleResolutionPopupClass)
     */
    cycleResolutionPopupClass: typeof CycleResolutionPopup
    /**
     * Convenient shortcut to set data in grids store both during initialization and at runtime. Can also be
     * used to retrieve data at runtime, although we do recommend interacting with Grids store instead using
     * the [store](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#property-store) property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-data)
     */
    data: object[]|Model[]
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The date to display when used as a component of a Calendar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-date)
     */
    date: Date
    /**
     * A [DateHelper](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat: string
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator: string
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * Region to which columns are added when they have none specified
     */
    defaultRegion: string
    /**
     * Generic resource image, used when provided `imageUrl` or `image` fields or path calculated from resource
     * name are all invalid. If left blank, resource name initials will be shown when no image can be loaded.
     */
    defaultResourceImageName: string
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * Inline dependencies, will be loaded into the backing project's DependencyStore.
     */
    dependencies: DependencyModel[]|Partial<DependencyModelConfig>[]
    /**
     * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked tasks.
     */
    dependencyIdField: string
    /**
     * The optional [DependencyStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/DependencyStore).
     */
    dependencyStore: DependencyStore|Partial<DependencyStoreConfig>
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-descriptionFormat)
     */
    descriptionFormat: string|string[]|boolean[]
    /**
     * A function that provides the textual description for this view. If provided, this function overrides the
     * [descriptionFormat](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-descriptionRenderer)
     * @param {Widget} view The active view in case the function is in another scope.
     * @returns {string} Description string
     */
    descriptionRenderer: (view: Widget) => string
    /**
     * Configure as `false` to preserve selection when clicking the empty schedule area.
     */
    deselectAllOnScheduleClick: boolean
    /**
     * Configure as `true` to deselect a selected event upon click.
     */
    deselectOnClick: boolean
    /**
     * true to destroy the store when the grid is destroyed
     */
    destroyStore: boolean
    /**
     * Configure as `true` to destroy the Project and stores when `this` is destroyed.
     */
    destroyStores: boolean
    /**
     * Set to `true` to not get a warning when using another base class than GridRowModel for your grid data. If
     * you do, and would like to use the full feature set of the grid then include the fields from GridRowModel
     * in your model definition.
     */
    disableGridRowModelWarning: boolean
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * The time (in milliseconds) that the Tooltip should stay visible for when it shows over its
     * target. If the tooltip is anchored to its target, then moving the mouse during this time
     * resets the timer so that the tooltip will remain visible.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-dismissDelay)
     */
    dismissDelay: number
    /**
     * Defines how dates will be formatted in tooltips etc. This config has priority over similar config on the
     * view preset. For allowed values see [format](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DateHelper#function-format-static).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-displayDateFormat)
     */
    displayDateFormat: string
    /**
     * Set to `true` to display special popups allowing user
     * to resolve [scheduling conflicts](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup),
     * [cycles](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup) or calendar misconfigurations.
     * The popup will suggest user ways to resolve the corresponding case.
     */
    displaySchedulingIssueResolutionPopup: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * Decimal precision used when displaying durations, used by tooltips and DurationColumn.
     * Specify `false` to use raw value
     */
    durationDisplayPrecision: number|boolean
    /**
     * Text or HTML to display when there is no data to display in the grid
     */
    emptyText: string
    /**
     * Allow using [Delete] and [Backspace] to remove events/assignments
     */
    enableDeleteKey: boolean
    /**
     * Set to `false` if you don't want event bar DOM updates to animate.
     */
    enableEventAnimations: boolean
    /**
     * Enables showing occurrences of recurring events across the scheduler's time axis.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-enableRecurringEvents)
     */
    enableRecurringEvents: boolean
    /**
     * Configure this as `true` to allow elements within cells to be styled as `position: sticky`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-enableSticky)
     */
    enableSticky: boolean
    /**
     * Set to true to allow text selection in the grid cells. Note, this cannot be used simultaneously with the
     * `RowReorder` feature.
     */
    enableTextSelection: boolean
    /**
     * Set to true to listen for CTRL-Z (CMD-Z on Mac OS) keyboard event and trigger undo (redo when SHIFT is
     * pressed). Only applicable when using a [StateTrackingManager](https://bryntum.com/products/schedulerpro/docs/api/Core/data/stm/StateTrackingManager).
     */
    enableUndoRedoKeys: boolean
    /**
     * The end date of the timeline (if not configure with [infiniteScroll](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-infiniteScroll)).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-endDate)
     */
    endDate: Date|string
    /**
     * The name of the end date parameter that will be passed to in every `eventStore` load request.
     */
    endParamName: string
    /**
     * Field from EventModel displayed as text in the bar when rendering
     */
    eventBarTextField: string
    /**
     * The template used to generate the markup of your events in the scheduler. To 'populate' the
     * eventBodyTemplate with data, use the [eventRenderer](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer) method.
     * @param {*} data Data passed from [eventRenderer](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer) method.
     * @returns {DomConfig|string|void}
     * @deprecated Since 5.6.2. Return markup/DomConfigs from [eventRenderer](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer) instead, will be removed in 6.0.0
     */
    eventBodyTemplate: (data: any) => DomConfig|string|void
    /**
     * Event color used by default. Events and resources can specify their own color, with priority order being:
     * Event -&gt; Resource -&gt; Scheduler default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-eventColor)
     */
    eventColor: EventColor
    /**
     * Defines how to handle overlapping events. Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-eventLayout)
     */
    eventLayout: 'stack'|'pack'|'mixed'|'none'|object
    /**
     * An empty function by default, but provided so that you can override it. This function is called each time
     * an event is rendered into the schedule to render the contents of the event. It's called with the event,
     * its resource and a `renderData` object which allows you to populate data placeholders inside the event
     * template. <strong>IMPORTANT</strong> You should never modify any data on the EventModel inside this method.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-eventRenderer)
     * @param {object} detail An object containing the information needed to render an Event.
     * @param {EventModel} detail.eventRecord The event record.
     * @param {ResourceModel} detail.resourceRecord The resource record.
     * @param {AssignmentModel} detail.assignmentRecord The assignment record.
     * @param {object} detail.renderData An object containing details about the event rendering.
     * @param {EventModel} detail.renderData.event The event record.
     * @param {DomClassList|string} detail.renderData.cls An object whose property names represent the CSS class names to be added to the event bar element. Set a property's value to truthy or falsy to add or remove the class name based on the property name. Using this technique, you do not have to know whether the class is already there, or deal with concatenation.
     * @param {DomClassList|string} detail.renderData.wrapperCls An object whose property names represent the CSS class names to be added to the event wrapper element. Set a property's value to truthy or falsy to add or remove the class name based on the property name. Using this technique, you do not have to know whether the class is already there, or deal with concatenation.
     * @param {DomClassList|string} detail.renderData.iconCls An object whose property names represent the CSS class names to be added to an event icon element. Note that an element carrying this icon class is injected into the event element *after* the renderer completes, *before* the renderer's created content. To disable this if the renderer takes full control and creates content using the iconCls, you can set `renderData.iconCls = null`.
     * @param {number} detail.renderData.left Vertical offset position (in pixels) on the time axis.
     * @param {number} detail.renderData.width Width in pixels of the event element.
     * @param {number} detail.renderData.height Height in pixels of the event element.
     * @param {string|<String, String>} detail.renderData.style Inline styles for the event bar DOM element. Use either 'border: 1px solid black' or `{ border: '1px solid black' }`
     * @param {string|<String, String>} detail.renderData.wrapperStyle Inline styles for wrapper of the event bar DOM element. Use either 'border: 1px solid green' or `{ border: '1px solid green' }`
     * @param {string} detail.renderData.eventStyle The `eventStyle` of the event. Use this to apply custom styles to the event DOM element
     * @param {string} detail.renderData.eventColor The `eventColor` of the event. Use this to set a custom color for the rendered event
     * @param {DomConfig>} detail.renderData.children An array of DOM configs used as children to the `b-sch-event` element. Can be populated with additional DOM configs to have more control over contents.
     * @returns {string|object|DomConfig|DomConfig>} A simple string, or a custom object which will be applied to the [eventBodyTemplate](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventBodyTemplate), creating the actual HTML
     */
    eventRenderer: (detail: { eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, renderData: { event: SchedulerEventModel, cls: DomClassList|string, wrapperCls: DomClassList|string, iconCls: DomClassList|string, left: number, width: number, height: number, style: string|Record<string, string>, wrapperStyle: string|Record<string, string>, eventStyle: string, eventColor: string, children: DomConfig[] } }) => string|object|DomConfig|DomConfig[]
    /**
     * `this` reference for the [eventRenderer](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer) function
     */
    eventRendererThisObj: object
    /**
     * Configure as `true`, or set property to `true` to disable event selection.
     */
    eventSelectionDisabled: boolean
    /**
     * The [EventStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/EventStore) holding the events to be rendered into the scheduler.
     */
    eventStore: EventStore|Partial<EventStoreConfig>
    /**
     * Event style used by default. Events and resources can specify their own style, with priority order being:
     * Event -&gt; Resource -&gt; Scheduler default. Determines the appearance of the event by assigning a CSS class
     * to it. Available styles are:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-eventStyle)
     */
    eventStyle: 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null
    /**
     * Inline events, will be loaded into the backing project's EventStore.
     */
    events: EventModel[]|object[]|Partial<EventModelConfig>[]
    /**
     * An object containing Feature configuration objects (or `true` if no configuration is required)
     * keyed by the Feature class name in all lowercase.
     */
    features: Partial<SchedulerProBaseFeaturesConfigType>
    /**
     * Set to `true` to stretch the last column in a grid with all fixed width columns
     * to fill extra available space if the grid's width is wider than the sum of all
     * configured column widths.
     */
    fillLastColumn: boolean
    /**
     * Specify `true` to force rendered events/tasks to fill entire ticks. This only affects rendering, start
     * and end dates retain their value on the data level.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-fillTicks)
     */
    fillTicks: boolean
    /**
     * Use fixed row height. Setting this to `true` will configure the underlying RowManager to use fixed row
     * height, which sacrifices the ability to use rows with variable height to gain a fraction better
     * performance.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-fixedRowHeight)
     */
    fixedRowHeight: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * By default a Popup is focused when it is shown.
     * Configure this as `false` to prevent automatic focus on show.
     */
    focusOnToFront: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-footer)
     */
    footer: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * DOM element to attach tooltip to. By default, the mouse entering this element will kick off a timer
     * (see [hoverDelay](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#config-hoverDelay)) to show itself.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-forElement)
     */
    forElement: HTMLElement
    /**
     * A CSS selector which targets child elements of the [forElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#config-forElement) that should produce a
     * tooltip when hovered over.
     */
    forSelector: string
    /**
     * Set to `true` to force the time columns to fit to the available space (horizontal or vertical depends on mode).
     * Note that setting [suppressFit](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-suppressFit) to `true`, will disable `forceFit` functionality. Zooming
     * cannot be used when `forceFit` is set.
     */
    forceFit: boolean
    /**
     * Refresh entire row when a record changes (`true`) or, if possible, only the cells affected (`false`).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-fullRowRefresh)
     */
    fullRowRefresh: boolean
    /**
     * A method allowing you to define date boundaries that will constrain resize, create and drag drop
     * operations. The method will be called with the Resource record, and the Event record.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-getDateConstraints)
     * @param {ResourceModel} resourceRecord The resource record
     * @param {EventModel} eventRecord The event record
     * @returns {object} Constraining object containing `start` and `end` constraints. Omitting either will mean that end is not constrained. So you can prevent a resize or move from moving *before* a certain time while not constraining the end date.
     */
    getDateConstraints: (resourceRecord?: SchedulerResourceModel, eventRecord?: SchedulerEventModel) => object
    /**
     * A method, or the *name* of a method called to update the tooltip's content when the
     * cursor is moved over a target. It receives one argument containing context about the
     * tooltip and show operation. The function should return a string, or a Promise yielding
     * a string.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-getHtml)
     * @param {object} context
     * @param {Tooltip} context.tip The tooltip instance
     * @param {HTMLElement} context.element The Element for which the Tooltip is monitoring mouse movement
     * @param {HTMLElement} context.activeTarget The target element that triggered the show
     * @param {Event} context.event The raw DOM event
     * @returns {string|Promise}
     */
    getHtml: ((context: { tip: Tooltip, element: HTMLElement, activeTarget: HTMLElement, event: Event }) => string|Promise<any>)|string
    /**
     * Scheduler overrides Grids default implementation of [getRowHeight](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#config-getRowHeight) to
     * pre-calculate row heights based on events in the rows.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-getRowHeight)
     * @param {ResourceModel} getRowHeight.record Resource record to determine row height for
     * @returns {number} Desired row height
     */
    getRowHeight: (getRowHeight: { record: SchedulerResourceModel }) => number
    /**
     * A config [object](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-header)
     */
    header: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * The time (in milliseconds) for which the Tooltip remains visible when the mouse leaves the target.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-hideDelay)
     */
    hideDelay: number|boolean
    /**
     * Set to `true` to hide the footer elements
     */
    hideFooters: boolean
    /**
     * Set to `true` to hide the column header elements
     */
    hideHeaders: boolean
    /**
     * Set to `true` to hide the Grid's horizontal scrollbar(s)
     */
    hideHorizontalScrollbar: boolean
    /**
     * By default, when moving rapidly from target to target, if, when mouseovering
     * a new target, the tip is still visible, the tooltip does not hide, it remains
     * visible, but updates its content however it is configured to do so.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-hideOnDelegateChange)
     */
    hideOnDelegateChange: boolean
    /**
     * By default the row hover effect is not visible in the Scheduler part of the grid.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-hideRowHover)
     */
    hideRowHover: boolean
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * Configure as `true`, or set property to `true` to highlight dependent events as well when selecting an event.
     */
    highlightPredecessors: boolean
    /**
     * Configure as `true`, or set property to `true` to highlight dependent events as well when selecting an event.
     */
    highlightSuccessors: boolean
    /**
     * Deprecated, to be removed in version 6.0. Replaced by [overlappingEventSorter](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-overlappingEventSorter).
     * @deprecated Since 5.0. Use [overlappingEventSorter](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-overlappingEventSorter) instead.
     */
    horizontalEventSorterFn: () => void
    /**
     * The amount of time to hover before showing
     */
    hoverDelay: number
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Set to `true` to ignore reacting to DOM events (mouseover/mouseout etc) while scrolling. Useful if you
     * want to maximize scroll performance.
     */
    ignoreDomEventsWhileScrolling: boolean
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Configure as `true` to automatically adjust the panel timespan during scrolling in the time dimension,
     * when the scroller comes close to the start/end edges.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-infiniteScroll)
     */
    infiniteScroll: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * A template method (empty by default) allowing you to control if an event can be selected or not.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-isEventSelectable)
     * @param {EventModel} event The event record
     * @returns {boolean} true if event can be selected, otherwise false
     */
    isEventSelectable: (event: SchedulerEventModel) => boolean
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * See [Keyboard shortcuts](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/Scheduler#keyboard-shortcuts) for details
     */
    keyMap: Record<string, string>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-listeners)
     */
    listeners: object
    /**
     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object, or a message to be shown when a store is performing a remote
     * operation, or Crud Manager is loading data from the sever. Set to `null` to disable default load mask.
     */
    loadMask: string|Partial<MaskConfig>|null
    /**
     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when data is loading. The message and optional configuration from the
     * [loadMask](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/LoadMaskable#config-loadMask) config take priority over these options, just as they do
     * for `maskDefaults`, respectively.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-loadMaskDefaults)
     */
    loadMaskDefaults: Partial<MaskConfig>
    /**
     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when an error occurs loading data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-loadMaskError)
     */
    loadMaskError: Partial<MaskConfig>|Mask|boolean
    /**
     * The message to show while an async tooltip is fetching its content.
     */
    loadingMsg: string
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Time in ms until a longpress is triggered
     */
    longPressTime: number
    /**
     * This flag controls whether Scheduler should preserve its selection of events when loading a new dataset
     * (if selected event ids are included in the newly loaded dataset).
     */
    maintainSelectionOnDatasetChange: boolean
    /**
     * When `true`, events are sized and positioned based on rowHeight, resourceMargin and barMargin settings.
     * Set this to `false` if you want to control height and vertical position using CSS instead.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-managedEventSizing)
     */
    managedEventSizing: boolean
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * Grids change the `maskDefaults` to cover only their `body` element.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The maximum time axis unit to display non-working ranges for ('hour' or 'day' etc).
     * When zooming to a view with a larger unit, no non-working time elements will be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-maxTimeAxisUnit)
     */
    maxTimeAxisUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * The maximum zoom level to which [zoomIn](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomIn) will work. Defaults to the number of
     * [ViewPresets](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/ViewPreset) available, see [presets](#Scheduler/view/mixin/TimelineViewPresets#property-presets)
     * for information. Unless you have modified the collection of available presets, the max zoom level is
     * milliseconds.
     */
    maxZoomLevel: number
    /**
     * Show a tool in the header to maximize this popup
     */
    maximizable: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized: boolean
    /**
     * How to align milestones in relation to their startDate. Only applies when using a `milestoneLayoutMode`
     * other than `default`. Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-milestoneAlign)
     */
    milestoneAlign: 'start'|'center'|'end'
    /**
     * Factor representing the average char width in pixels used to determine milestone width when configured
     * with `milestoneLayoutMode: 'estimate'`.
     */
    milestoneCharWidth: number
    /**
     * How to handle milestones during event layout. How the milestones are displayed when part of the layout
     * are controlled using [milestoneTextPosition](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-milestoneTextPosition).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-milestoneLayoutMode)
     */
    milestoneLayoutMode: 'default'|'estimate'|'data'|'measure'
    /**
     * Position of the milestone text:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-milestoneTextPosition)
     */
    milestoneTextPosition: 'inside'|'outside'|'always-outside'
    /**
     * Grid's `min-height`. Defaults to `10em` to be sure that the Grid always has a height wherever it is
     * inserted.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-minHeight)
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * The minimum zoom level to which [zoomOut](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomOut) will work. Defaults to 0 (year ticks)
     */
    minZoomLevel: number
    /**
     * Optionally show an opaque mask below this Popup when shown.
     * Configure this as `true` to show the mask.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-modal)
     */
    modal: boolean|{
        closeOnMaskTap?: boolean
        transparent?: boolean
    }
    /**
     * Scheduler mode. Supported values: horizontal, vertical
     */
    mode: 'horizontal'|'vertical'
    /**
     * Grid monitors window resize by default.
     */
    monitorResize: boolean
    /**
     * Horizontal offset from mouse when [anchorToTarget](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-mouseOffsetX)
     */
    mouseOffsetX: number
    /**
     * Vertical offset from mouse when [anchorToTarget](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`
     */
    mouseOffsetY: number
    /**
     * Configure as `true` to allow `CTRL+click` to select multiple events in the scheduler.
     */
    multiEventSelect: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * When an event bar has a width less than this value, it gets the CSS class `b-sch-event-narrow`
     * added. You may apply custom CSS rules using this class.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-narrowEventWidth)
     */
    narrowEventWidth: number
    /**
     * Override this method to provide a custom sort function to sort any overlapping events. This only applies
     * to the horizontal mode, where the order the events are sorted in determines their vertical placement
     * within a resource.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-overlappingEventSorter)
     * @param {EventModel} a First event
     * @param {EventModel} b Second event
     * @returns {number} Return -1 to display `a` above `b`, 1 for `b` above `a`
     */
    overlappingEventSorter: (a: SchedulerEventModel, b: SchedulerEventModel) => number
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-owner)
     */
    owner: Widget
    /**
     * Partners this Timeline panel with another Timeline in order to sync their region sizes (sub-grids like locked, normal will get the same width),
     * start and end dates, view preset, zoom level and scrolling position. All these values will be synced with the timeline defined as the `partner`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-partner)
     */
    partner: TimelineBase
    /**
     * Set to true to include `startDate` and `endDate` params indicating the currently viewed date range.
     * Dates are formatted using the same format as the `startDate` field on the EventModel
     * (e.g. 2023-03-08T00:00:00+01:00).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-passStartEndParameters)
     */
    passStartEndParameters: boolean
    /**
     * Specify plugins (an array of classes) in config
     */
    plugins: Function[]
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-positioned)
     */
    positioned: boolean
    /**
     * Maximum number of resources for which height is pre-calculated. If you have many events per
     * resource you might want to lower this number to gain some initial rendering performance.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-preCalculateHeightLimit)
     */
    preCalculateHeightLimit: number
    /**
     * True to preserve focused cell after loading new data
     */
    preserveFocusOnDatasetChange: boolean
    /**
     * Preserve the grid's vertical scroll position when changesets are applied, as in the case of remote
     * changes, or when stores are configured with [syncDataOnLoad](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-syncDataOnLoad).
     */
    preserveScroll: PreserveScrollOptions|boolean
    /**
     * Specify `true` to preserve vertical scroll position after store actions that trigger a `refresh` event,
     * such as loading new data and filtering.
     */
    preserveScrollOnDatasetChange: boolean
    /**
     * An array of [ViewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/ViewPreset) config objects
     * which describes the available timeline layouts for this scheduler.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-presets)
     */
    presets: Partial<ViewPresetConfig>[]
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * A [ProjectModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel) instance or a config object. The project holds all SchedulerPro data.
     */
    project: ProjectModel|Partial<ProjectModelConfig>
    /**
     * Accepts the following values:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-projectProgressReporting)
     */
    projectProgressReporting: string|null
    /**
     * Unit used to set the length of the time axis when used as a component of a Calendar. Suitable units are
     * `'month'`, `'week'` and `'day'`.
     */
    range: 'day'|'week'|'month'
    /**
     * Configure as `true` to make the scheduler read-only, by disabling any UIs for modifying data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-ref)
     */
    ref: string
    /**
     * Set to `false` to only measure cell contents when double clicking the edge between column headers.
     */
    resizeToFitIncludesHeader: boolean
    /**
     * A config object used to configure the resource columns in vertical mode.
     * See [ResourceHeader](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/ResourceHeader) for more details on available properties.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-resourceColumns)
     */
    resourceColumns: Partial<ResourceHeaderConfig>
    /**
     * Resource image extension, used when creating image path from resource name.
     */
    resourceImageExtension: string
    /**
     * Path to load resource images from. Used by the resource header in vertical mode and the
     * [ResourceInfoColumn](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/column/ResourceInfoColumn) in horizontal mode. Set this to display miniature
     * images for each resource using their `image` or `imageUrl` fields.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-resourceImagePath)
     */
    resourceImagePath: string
    /**
     * Control how much space to leave between the first event/last event and the resources edge (top/bottom
     * margin within the resource row in horizontal mode, left/right margin within the resource column in
     * vertical mode), in px. Defaults to the value of [barMargin](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/Scheduler#config-barMargin).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-resourceMargin)
     */
    resourceMargin: number|Partial<ResourceMarginConfig>
    /**
     * The [ResourceStore](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/data/ResourceStore) holding the resources to be rendered into the scheduler.
     */
    resourceStore: ResourceStore|Partial<ResourceStoreConfig>
    /**
     * Resource time ranges store instance or config object for [ResourceTimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ResourceTimeRanges) feature.
     */
    resourceTimeRangeStore: ResourceTimeRangeStore|Partial<ResourceTimeRangeStoreConfig>
    /**
     * Inline resource time ranges, will be loaded into an internally created store if
     * [ResourceTimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ResourceTimeRanges) is enabled.
     */
    resourceTimeRanges: ResourceTimeRangeModel[]|Partial<ResourceTimeRangeModelConfig>[]
    /**
     * Inline resources, will be loaded into the backing project's ResourceStore.
     */
    resources: ResourceModel[]|Partial<ResourceModelConfig>[]
    /**
     * "Break points" for which responsive config to use for columns and css.
     */
    responsiveLevels: Record<string, number|string>
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * The height in pixels of Scheduler rows.
     */
    rowHeight: number
    /**
     * Set to `false` to not show row lines. End result might be overruled by/differ between themes.
     */
    rowLines: boolean
    /**
     * Class implementing the popup resolving *scheduling conflicts* and *calendar misconfigurations*.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-schedulingIssueResolutionPopupClass)
     */
    schedulingIssueResolutionPopupClass: typeof SchedulingIssueResolutionPopup
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Configuration values for the [ScrollManager](https://bryntum.com/products/schedulerpro/docs/api/Core/util/ScrollManager) class on initialization. Returns the
     * [ScrollManager](https://bryntum.com/products/schedulerpro/docs/api/Core/util/ScrollManager) at runtime.
     */
    scrollManager: Partial<ScrollManagerConfig>|ScrollManager
    /**
     * Configures whether the grid is scrollable in the `Y` axis. This is used to configure a [GridScroller](https://bryntum.com/products/schedulerpro/docs/api/Grid/util/GridScroller).
     * See the [scrollerClass](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#config-scrollerClass) config option.
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * The class to instantiate to use as the [scrollable](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#config-scrollable). Defaults to [GridScroller](#Grid/util/GridScroller).
     */
    scrollerClass: typeof Scroller
    /**
     * Set to `false` to not select the resource of the event when clicking an event bar.
     */
    selectResourceOnEventNavigate: boolean
    /**
     * Set to `false` to not select the row/resource when clicking the empty area in a time axis cell.
     */
    selectResourceOnScheduleClick: boolean
    /**
     * The selection settings, where you can set these boolean flags to control what is selected. Options below:
     * @param {boolean} selectionMode.cell Set to `true` to enable cell selection. This takes precedence over row selection, but rows can still be selected programmatically or with checkbox or RowNumber selection. Required for `column` selection
     * @param {boolean} selectionMode.multiSelect Allow multiple selection with ctrl and shift+click or with `checkbox` selection. Required for `dragSelect` and `column` selection
     * @param {boolean|CheckColumnConfig} selectionMode.checkbox Set to `true` to add a checkbox selection column to the grid, or pass a config object for the [CheckColumn](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/CheckColumn)
     * @param {number|string} selectionMode.checkboxIndex Positions the checkbox column at the provided index or to the right of a provided column id. Defaults to 0 or to the right of an included `RowNumberColumn`
     * @param {boolean} selectionMode.checkboxOnly Select rows only when clicking in the checkbox column. Requires cell selection config to be `false` and checkbox to be set to `true`. This setting was previously named `rowCheckboxSelection`
     * @param {boolean} selectionMode.showCheckAll Set to `true` to add a checkbox to the selection column header to select/deselect all rows. Requires checkbox to also be set to `true`
     * @param {boolean} selectionMode.deselectFilteredOutRecords Set to `true` to deselect records when they are filtered out
     * @param {boolean|string} selectionMode.includeChildren Set to `true` to also select/deselect child nodes when a parent node is selected by toggling the checkbox. Set to `always` to always select/deselect child nodes.
     * @param {boolean|'all'|'some'} selectionMode.includeParents Set to `all` or `true` to auto select parent if all its children gets selected. If one gets deselected, the parent will also be deselected. Set to 'some' to select parent if one of its children gets selected. The parent will be deselected if all children gets deselected.
     * @param {boolean} selectionMode.preserveSelectionOnPageChange In `row` selection mode, this flag controls whether the Grid should preserve its selection when loading a new page of a paged data store. Defaults to `false`
     * @param {boolean} selectionMode.preserveSelectionOnDatasetChange In `row` selection mode, this flag controls whether the Grid should preserve its selection of cells / rows when loading a new dataset (assuming the selected records are included in the newly loaded dataset)
     * @param {boolean} selectionMode.deselectOnClick Toggles whether the Grid should deselect a selected row or cell when clicking it
     * @param {boolean} selectionMode.dragSelect Set to `true` to enable multiple selection by dragging. Requires `multiSelect` to also be set to `true`. Also requires the [RowReorder](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/RowReorder) feature to be set to [gripOnly](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/RowReorder#config-gripOnly).
     * @param {boolean} selectionMode.selectOnKeyboardNavigation Set to `false` to disable auto-selection by keyboard navigation. This will activate the `select` keyboard shortcut.
     * @param {boolean} selectionMode.column Set to `true` to be able to select whole columns of cells by clicking the header. Requires cell to be set to `true`
     * @param {boolean|RowNumberColumnConfig} selectionMode.rowNumber Set to `true` or a config object to add a RowNumberColumn which, when clicked, selects the row.
     * @param {boolean} selectionMode.selectRecordOnCell Set to `false` not to include the record in the `selectedRecords` array when one of the record row's cells is selected.
     */
    selectionMode: object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * `false` to not show a tooltip while creating a dependency
     */
    showCreationTooltip: boolean
    /**
     * Configure as `true` to have the grid show a red "changed" tag in cells who's
     * field value has changed and not yet been committed.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-showDirty)
     */
    showDirty: boolean|{
        duringEdit?: boolean
    }
    /**
     * If set to `true` this will show a color field in the [EventEdit](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventEdit) editor and also a
     * picker in the [EventMenu](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventMenu). Both enables the user to choose a color which will be
     * applied to the event bar's background. See EventModel's
     * [eventColor](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventColor) config.
     * config.
     */
    showEventColorPickers: boolean
    /**
     * Set to `true` to show the lag in the tooltip
     */
    showLagInTooltip: boolean
    /**
     * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover
     */
    showOnClick: boolean
    /**
     * Show on hover
     */
    showOnHover: boolean
    /**
     * Set to `false` to hide recurring fields in event editor, even if the
     * [Recurring Events](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/RecurringEvents#config-enableRecurringEvents) is `true`
     * and a recurring event is being edited.
     */
    showRecurringUI: boolean
    /**
     * If set to `true` this will show a color field in the [TaskEdit](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/TaskEdit) editor and also a
     * picker in the [EventMenu](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventMenu). Both enables the user to choose a color which will be
     * applied to the event bar's background. See EventModel's
     * [eventColor](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventColor) config.
     * config.
     */
    showTaskColorPickers: boolean
    /**
     * Set to `true` to show a tooltip when hovering a dependency line
     */
    showTooltip: boolean
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Set to `true` to snap to the current time resolution increment while interacting with scheduled events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-snap)
     */
    snap: boolean
    /**
     * Affects drag drop and resizing of events when [snap](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineDateMapper#config-snap)
     * is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-snapRelativeToEventStartDate)
     */
    snapRelativeToEventStartDate: boolean
    /**
     * The start date of the timeline (if not configure with [infiniteScroll](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-infiniteScroll)).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-startDate)
     */
    startDate: Date|string
    /**
     * The name of the start date parameter that will be passed to in every `eventStore` load request.
     */
    startParamName: string
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-stateId)
     */
    stateId: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/schedulerpro/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-stateProvider)
     */
    stateProvider: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-stateful)
     */
    stateful: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-statefulEvents)
     */
    statefulEvents: object|string[]
    /**
     * Unit used to control how large steps to take when clicking the previous and next buttons in the Calendar
     * UI. Only applies when used as a component of a Calendar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-stepUnit)
     */
    stepUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * When set, the text in the major time axis header sticks in the scrolling viewport as long as possible.
     */
    stickyHeaders: boolean
    /**
     * Store that holds records to display in the grid, or a store config object. If the configuration contains
     * a `readUrl`, an `AjaxStore` will be created.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-store)
     */
    store: Partial<Store|StoreConfig|AjaxStore|AjaxStoreConfig>
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar). If the value assigned to a strip is an array, it is converted to
     * the toolbar's [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-strips)
     */
    strips: Record<string, Partial<ContainerItemConfig>>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * An object containing sub grid configuration objects keyed by a `region` property.
     * By default, grid has a 'locked' region (if configured with locked columns) and a 'normal' region.
     * The 'normal' region defaults to use `flex: 1`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-subGridConfigs)
     */
    subGridConfigs: Record<string, Partial<SubGridConfig>>
    /**
     * Set to `true` to prevent auto calculating of a minimal [tickSize](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineEventRendering#property-tickSize)
     * to always fit the content to the screen size. Setting this property on `true` will disable [forceFit](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-forceFit) behaviour.
     */
    suppressFit: boolean
    /**
     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object, or a message to be shown when Crud Manager
     * is persisting changes on the server. Set to `null` to disable default sync mask.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-syncMask)
     */
    syncMask: string|Partial<MaskConfig>|null
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-tbar)
     */
    tbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * CSS class used for terminals
     */
    terminalCls: string
    /**
     * Delay in ms before hiding the terminals when the mouse leaves an event bar or terminal.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-terminalHideDelay)
     */
    terminalHideDelay: number
    /**
     * Terminal offset from their initial position, in px. Positive values move terminals further away from the
     * event bar, negative values inside the event bar.
     */
    terminalOffset: number
    /**
     * Delay in ms before showing the terminals when hovering over an event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-terminalShowDelay)
     */
    terminalShowDelay: number
    /**
     * Where (on event bar edges) to display terminals. The sides are `'start'`, `'top'`,
     * `'end'` and `'bottom'`
     */
    terminalSides: string[]
    /**
     * Terminal diameter in px, overrides the default CSS value for it (which might depend on theme).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-terminalSize)
     */
    terminalSize: number|string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-textContent)
     */
    textContent: boolean
    /**
     * The width/height (depending on vertical / horizontal mode) of all the time columns.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-tickSize)
     */
    tickSize: number
    /**
     * A [TimeAxis](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/TimeAxis) config object or instance, used to create a backing data store of
     * 'ticks' providing the input date data for the time axis of timeline panel. Created automatically if none
     * supplied.
     */
    timeAxis: Partial<TimeAxisConfig>|TimeAxis
    /**
     * The time ranges store instance for [TimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeRanges) feature.
     */
    timeRangeStore: Store|Partial<StoreConfig>
    /**
     * Inline time ranges, will be loaded into an internally created store if [TimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeRanges)
     * is enabled.
     */
    timeRanges: TimeSpan[]|Partial<TimeSpanConfig>[]
    /**
     * Set to a time zone or a UTC offset. This will set the projects
     * [timeZone](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/ProjectModel#config-timeZone) config accordingly. As this config is only a referer,
     * please se project's config [documentation](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/ProjectModel#config-timeZone) for more
     * information.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-timeZone)
     */
    timeZone: string|number
    /**
     * A title to display in the header. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-title)
     */
    title: string
    /**
     * The [tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-tools)
     */
    tools: Record<string, Partial<ToolConfig>>
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * A template function allowing you to configure the contents of the tooltip shown when hovering a
     * dependency line. You can return either an HTML string or a [DomConfig](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DomHelper#typedef-DomConfig) object.
     * @param {DependencyBaseModel} dependency The dependency record
     * @returns {string|DomConfig}
     */
    tooltipTemplate: (dependency: DependencyBaseModel) => string|DomConfig
    /**
     * By default, once a tooltip is shown aligned as requested, it stays put.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-trackMouse)
     */
    trackMouse: boolean
    /**
     * Animation transition duration in milliseconds.
     */
    transitionDuration: number
    /**
     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
     * forwards or backwards.
     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
     */
    trapFocus: boolean
    /**
     * Configure as `true` to trigger `selectionChange` when removing a selected event/assignment.
     */
    triggerSelectionChangeOnRemove: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-ui)
     */
    ui: string|object
    /**
     * By default, scrolling the schedule will update the [timelineContext](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/SchedulerBase#property-timelineContext) to reflect the new
     * currently hovered context. When displaying a large number of events on screen at the same time, this will
     * have a slight impact on scrolling performance. In such scenarios, opt out of this behavior by setting
     * this config to `false`.
     */
    updateTimelineContextOnScroll: boolean
    /**
     * By default, scheduler fade events in on load. Specify `false` to prevent this animation or specify one
     * of the available animation types to use it (`true` equals `'fade-in'`):
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-useInitialAnimation)
     */
    useInitialAnimation: boolean|'fade-in'|'slide-from-left'|'slide-from-top'|string
    /**
     * The time axis column config for vertical [mode](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/SchedulerBase#config-mode).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-verticalTimeAxisColumn)
     */
    verticalTimeAxisColumn: Partial<VerticalTimeAxisColumnConfig>
    /**
     * A string key used to lookup a predefined [ViewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/ViewPreset) (e.g. 'weekAndDay', 'hourAndDay'),
     * managed by [PresetManager](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/PresetManager). See [PresetManager](#Scheduler/preset/PresetManager) for more information.
     * Or a config object for a viewPreset.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-viewPreset)
     */
    viewPreset: string|Partial<ViewPresetConfig>
    /**
     * A date to bring into view initially on the scrollable timeline.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-visibleDate)
     */
    visibleDate: Date|VisibleDate
    /**
     * Integer number indicating the size of timespan during zooming. When zooming, the timespan is adjusted to make
     * the scrolling area `visibleZoomFactor` times wider than the timeline area itself. Used in
     * [zoomToSpan](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomToSpan) and [zoomToLevel](#Scheduler/view/mixin/TimelineZoomable#function-zoomToLevel) functions.
     */
    visibleZoomFactor: number
    /**
     * A valid JS day index between 0-6 (0: Sunday, 1: Monday etc.) to be considered the start day of the week.
     * When omitted, the week start day is retrieved from the active locale class.
     */
    weekStartDay: number
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * An object with format `{ fromDay, toDay, fromHour, toHour }` that describes the working days and hours.
     * This object will be used to populate TimeAxis [include](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/TimeAxis#config-include) property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-workingTime)
     */
    workingTime: object
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#config-y)
     */
    y: number
    /**
     * Whether the originally rendered timespan should be preserved while zooming. By default, it is set to `false`,
     * meaning the timeline panel will adjust the currently rendered timespan to limit the amount of HTML content to
     * render. When setting this option to `true`, be careful not to allow to zoom a big timespan in seconds
     * resolution for example. That will cause <strong>a lot</strong> of HTML content to be rendered and affect performance. You
     * can use [minZoomLevel](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineZoomable#config-minZoomLevel) and [maxZoomLevel](#Scheduler/view/mixin/TimelineZoomable#config-maxZoomLevel) config options for that.
     */
    zoomKeepsOriginalTimespan: boolean
    /**
     * If true, you can zoom in and out on the time axis using CTRL-key + mouse wheel.
     */
    zoomOnMouseWheel: boolean
    /**
     * True to zoom to time span when double-clicking a time axis cell.
     */
    zoomOnTimeAxisDoubleClick: boolean
    /**
     * Fired on the owning Scheduler/Gantt after a dependency drag creation operation finished, no matter to outcome
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {DependencyBaseModel} event.dependency The created dependency
     */
    onAfterDependencyCreateDrop: ((event: { source: TimeSpan, target: TimeSpan, dependency: DependencyBaseModel }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget after a dependency is successfully saved
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler instance
     * @param {SchedulerDependencyModel} event.dependencyRecord The dependency about to be saved
     */
    onAfterDependencySave: ((event: { source: Scheduler, dependencyRecord: SchedulerDependencyModel }) => void)|string
    /**
     * Fires on the owning Scheduler at the end of the drag create gesture whether or not
     * a new event was created by the gesture.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {SchedulerEventModel} event.eventRecord The event record being created
     * @param {SchedulerResourceModel} event.resourceRecord The resource record
     * @param {HTMLElement} event.eventElement The element representing the created event record
     */
    onAfterDragCreate: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, eventElement: HTMLElement }) => void)|string
    /**
     * Fired on the owning Scheduler after event drop
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords
     * @param {SchedulerEventModel[]} event.eventRecords
     * @param {boolean} event.valid
     * @param {object} event.context
     * @param {MouseEvent} event.domEvent Browser event
     */
    onAfterEventDrop: ((event: { source: Scheduler, assignmentRecords: SchedulerAssignmentModel[], eventRecords: SchedulerEventModel[], valid: boolean, context: object, domEvent: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler after editor is closed by any action - save, delete or cancel
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     */
    onAfterEventEdit: ((event: { source: Scheduler }) => void)|string
    /**
     * Fires on the owning Scheduler after an event is successfully saved
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler instance
     * @param {SchedulerEventModel} event.eventRecord The record about to be saved
     */
    onAfterEventSave: ((event: { source: Scheduler, eventRecord: SchedulerEventModel }) => void)|string
    /**
     * Fired on the owning Scheduler after an event segment is dropped
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {SchedulerEventModel[]} event.eventRecords Dropped segments
     * @param {boolean} event.valid
     * @param {object} event.context
     */
    onAfterEventSegmentDrop: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], valid: boolean, context: object }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget instance after task editing is finished by applying changes, cancelling them
     * or deleting the task record.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {EventModel} event.taskRecord Task record used in the task editor
     * @param {TaskEditorBase} event.editor The editor widget
     */
    onAfterTaskEdit: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget instance after a task is saved
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {EventModel} event.taskRecord The task about to be saved
     * @param {TaskEditorBase} event.editor The editor widget
     */
    onAfterTaskSave: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => void)|string
    /**
     * Fired any time there is a change to the assignments selected in the Scheduler.
     * @param {object} event Event object
     * @param {'select'|'deselect'|'update'|'clear'} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {SchedulerAssignmentModel[]} event.selected An array of the Assignments added to the selection.
     * @param {SchedulerAssignmentModel[]} event.deselected An array of the Assignments removed from the selection.
     * @param {SchedulerAssignmentModel[]} event.selection The new selection.
     */
    onAssignmentSelectionChange: ((event: { action: 'select'|'deselect'|'update'|'clear', selected: SchedulerAssignmentModel[], deselected: SchedulerAssignmentModel[], selection: SchedulerAssignmentModel[] }) => void)|string
    /**
     * Fires before an assignment is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or
     * by the event editor. Can for example be used to display a custom dialog to confirm deletion, in which
     * case records should be "manually" removed after confirmation:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-beforeAssignmentDelete)
     * @param {object} event Event object
     * @param {Scheduler} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeAssignmentDelete: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => boolean|void)|string
    /**
     * Fired any time there is going to be a change to the assignments selected in the Scheduler.
     * Returning `false` prevents the change
     * @param {object} event Event object
     * @param {string} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {SchedulerEventModel[]} event.selected An array of assignments that will be added to the selection.
     * @param {SchedulerEventModel[]} event.deselected An array of assignments that will be removed from the selection.
     * @param {SchedulerEventModel[]} event.selection The currently selected assignments, before applying `selected` and `deselected`.
     */
    onBeforeAssignmentSelectionChange: ((event: { action: string, selected: SchedulerEventModel[], deselected: SchedulerEventModel[], selection: SchedulerEventModel[] }) => boolean|void)|string
    /**
     * Fires on the owning Grid before the cell editing is canceled, return `false` to prevent cancellation.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     */
    onBeforeCancelCellEdit: ((event: { source: Grid, editorContext: Location }) => boolean|void)|string
    /**
     * Fires on the owning Grid before deleting a range of selected cell values by pressing `Backspace` or `Del`
     * buttons while [autoEdit](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellEdit#config-autoEdit) is set to `true`. Return `false` to prevent editing.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {(Location|Model)[]} event.gridSelection An array of cell selectors or records that will have their values deleted (the records themself will not get deleted, only visible column values).
     */
    onBeforeCellDelete: ((event: { source: Grid, gridSelection: (Location|Model)[] }) => boolean|void)|string
    /**
     * Fires on the owning Grid before editing starts, return `false` to prevent editing
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {Field} event.editorContext.editor The input field that the column is configured with (see [field](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column#config-field)). This property mey be replaced to be a different [field](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field) in the handler, to take effect just for the impending edit.
     * @param {Function} event.editorContext.finalize An async function may be injected into this property which performs asynchronous finalization tasks such as complex validation of confirmation. The value `true` or `false` must be returned.
     * @param {object} event.editorContext.finalize.context An object describing the editing context upon requested completion of the edit.
     * @param {any} event.editorContext.value Cell value
     */
    onBeforeCellEditStart: ((event: { source: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Field, finalize: { context?: object }, value: any } }) => boolean|void)|string
    /**
     * Fired when the [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Popup} event.source This Popup
     */
    onBeforeClose: ((event: { source: Popup }) => void)|string
    /**
     * This event is fired prior to starting a column drag gesture. The drag is canceled if a listener returns `false`.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    onBeforeColumnDragStart: ((event: { source: Grid, column: Column, event: Event }) => boolean|void)|string
    /**
     * This event is fired when a column is dropped, and you can return false from a listener to abort the operation.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Column} event.newParent The new parent column.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    onBeforeColumnDropFinalize: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, event: Event, region: string }) => boolean|void)|string
    /**
     * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location[]} event.cells The cells about to be copied or cut
     * @param {string} event.data The string data about to be copied or cut
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other beforeCopy events
     */
    onBeforeCopy: ((event: { source: Grid, cells: Location[], data: string, isCut: boolean, entityName: string }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before a dependency is added
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyEdit} event.dependencyEdit The dependency edit feature
     * @param {SchedulerDependencyModel} event.dependencyRecord The dependency about to be added
     */
    onBeforeDependencyAdd: ((event: { source: Scheduler, dependencyEdit: SchedulerDependencyEdit, dependencyRecord: SchedulerDependencyModel }) => boolean|void)|string
    /**
     * Fired on the owning Scheduler/Gantt before a dependency creation drag operation starts. Return `false` to
     * prevent it
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     */
    onBeforeDependencyCreateDrag: ((event: { source: TimeSpan }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when a dependency drag creation operation is about to finalize
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {'start'|'end'|'top'|'bottom'} event.fromSide The from side (start / end / top / bottom)
     * @param {'start'|'end'|'top'|'bottom'} event.toSide The to side (start / end / top / bottom)
     */
    onBeforeDependencyCreateFinalize: ((event: { source: TimeSpan, target: TimeSpan, fromSide: 'start'|'end'|'top'|'bottom', toSide: 'start'|'end'|'top'|'bottom' }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before a dependency is deleted
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler instance
     * @param {SchedulerDependencyModel} event.dependencyRecord The dependency record about to be deleted
     */
    onBeforeDependencyDelete: ((event: { source: Scheduler, dependencyRecord: SchedulerDependencyModel }) => boolean|void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before an dependency is displayed in the editor.
     * This may be listened for to allow an application to take over dependency editing duties. Return `false` to
     * stop the default editing UI from being shown or a `Promise` yielding `true` or `false` for async vetoing.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyEdit} event.dependencyEdit The dependencyEdit feature
     * @param {SchedulerDependencyModel} event.dependencyRecord The record about to be shown in the editor.
     */
    onBeforeDependencyEdit: ((event: { source: Scheduler, dependencyEdit: SchedulerDependencyEdit, dependencyRecord: SchedulerDependencyModel }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Scheduler or Gantt widget when the editor for a dependency is available but before it is shown. Allows
     * manipulating fields before the widget is shown.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyEdit} event.dependencyEdit The dependencyEdit feature
     * @param {SchedulerDependencyModel} event.dependencyRecord The record about to be shown in the editor.
     * @param {Popup} event.editor The editor popup
     */
    onBeforeDependencyEditShow: ((event: { source: Scheduler, dependencyEdit: SchedulerDependencyEdit, dependencyRecord: SchedulerDependencyModel, editor: Popup }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before a dependency is saved
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler instance
     * @param {SchedulerDependencyModel} event.dependencyRecord The dependency about to be saved
     * @param {object} event.values The new values
     */
    onBeforeDependencySave: ((event: { source: Scheduler, dependencyRecord: SchedulerDependencyModel, values: object }) => boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires on the owning Scheduler at the beginning of the drag gesture. Returning `false` from a listener prevents
     * the drag create operation from starting.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-beforeDragCreate)
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {SchedulerResourceModel} event.resourceRecord
     * @param {Date} event.date The datetime associated with the drag start point.
     */
    onBeforeDragCreate: ((event: { source: Scheduler, resourceRecord: SchedulerResourceModel, date: Date }) => boolean|void)|string
    /**
     * Fires on the owning Scheduler to allow implementer to prevent immediate finalization by setting
     * `data.context.async = true` in the listener, to show a confirmation popup etc
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-beforeDragCreateFinalize)
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel} event.eventRecord The event record being created
     * @param {SchedulerResourceModel} event.resourceRecord The resource record
     * @param {HTMLElement} event.eventElement The element representing the new Event record
     * @param {object} event.context
     * @param {boolean} event.context.async Set true to handle drag create asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize drag create. This method accepts one argument: pass true to update records, or false, to ignore changes
     */
    onBeforeDragCreateFinalize: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, eventElement: HTMLElement, context: { async: boolean, finalize: Function } }) => void)|string
    /**
     * Fires before an event is added. Can be triggered by schedule double click or drag create action.
     * @param {object} event Event object
     * @param {Scheduler} event.source The Scheduler instance
     * @param {SchedulerEventModel} event.eventRecord The record about to be added
     * @param {SchedulerResourceModel[]} event.resourceRecords Resources that the record is assigned to
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords The assignment records
     */
    onBeforeEventAdd: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecords: SchedulerResourceModel[], assignmentRecords: SchedulerAssignmentModel[] }) => boolean|void)|string
    /**
     * Fires before an event is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or by the
     * event editor. Return `false` to immediately veto the removal (or a `Promise` yielding `true` or `false`
     * for async vetoing).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-beforeEventDelete)
     * @param {object} event Event object
     * @param {Scheduler|any} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeEventDelete: ((event: { source: Scheduler|any, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean|void>)|string
    /**
     * Fired on the owning Scheduler before event dragging starts. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel} event.eventRecord Event record the drag starts from
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the drag starts from
     * @param {SchedulerEventModel[]} event.eventRecords Event records being dragged
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords Assignment records being dragged
     * @param {MouseEvent} event.event Browser event DEPRECATED (replaced by domEvent)
     * @param {MouseEvent} event.domEvent Browser event
     */
    onBeforeEventDrag: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], event: MouseEvent, domEvent: MouseEvent }) => boolean|void)|string
    /**
     * Fires on the owning Scheduler before drag selection starts. Return false to prevent the operation.
     * @param {object} event Event object
     * @param {Event} event.event The native browser DOM event
     */
    onBeforeEventDragSelect: ((event: { event: Event }) => boolean|void)|string
    /**
     * This event is fired on the owning Scheduler after the event drag operation completes, but before changing any data.
     * It allows implementer to use asynchronous validation/finalization by setting `context.async = true`
     * in the listener, for example, to show a confirmation popup, make async data request etc.
     * In such case, implementer need to call the `context.finalize()` method manually:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-beforeEventDropFinalize)
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {object} event.context
     * @param {DropData} event.context.dropData Information about the drop points for dragged events/assignments.
     * @param {boolean} event.context.async Set to `true` to not finalize the drag-drop operation immediately (e.g. to wait for user confirmation)
     * @param {SchedulerEventModel[]} event.context.eventRecords Event records being dragged
     * @param {SchedulerAssignmentModel[]} event.context.assignmentRecords Assignment records being dragged
     * @param {SchedulerEventModel} event.context.targetEventRecord Event record for drop target
     * @param {SchedulerResourceModel} event.context.newResource Resource record for drop target
     * @param {boolean} event.context.valid Set this to `false` to abort the drop immediately.
     * @param {Function} event.context.finalize Call this method after an <strong>async</strong> finalization flow, to finalize the drag-drop operation. This method accepts one argument: pass `true` to update records, or `false` to ignore changes
     * @param {MouseEvent} event.domEvent Browser event
     */
    onBeforeEventDropFinalize: ((event: { source: Scheduler, context: { dropData: DropData, async: boolean, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], targetEventRecord: SchedulerEventModel, newResource: SchedulerResourceModel, valid: boolean, finalize: Function }, domEvent: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler before an event is displayed in an editor.
     * This may be listened for to allow an application to take over event editing duties. Returning `false`
     * stops the default editing UI from being shown.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {EventEdit} event.eventEdit The eventEdit feature
     * @param {SchedulerEventModel} event.eventRecord The record about to be shown in the event editor.
     * @param {SchedulerResourceModel} event.resourceRecord The Resource record for the event. If the event is being created, it will not contain a resource, so this parameter specifies the resource the event is being created for.
     * @param {HTMLElement} event.eventElement The element which represents the event in the scheduler display.
     */
    onBeforeEventEdit: ((event: { source: Scheduler, eventEdit: EventEdit, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, eventElement: HTMLElement }) => boolean|void)|string
    /**
     * Fires on the owning Scheduler when the editor for an event is available but before it is populated with
     * data and shown. Allows manipulating fields etc.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {EventEdit} event.eventEdit The eventEdit feature
     * @param {SchedulerEventModel} event.eventRecord The record about to be shown in the event editor.
     * @param {SchedulerResourceModel} event.resourceRecord The Resource record for the event. If the event is being created, it will not contain a resource, so this parameter specifies the resource the event is being created for.
     * @param {HTMLElement} event.eventElement The element which represents the event in the scheduler display.
     * @param {Popup} event.editor The editor
     */
    onBeforeEventEditShow: ((event: { source: Scheduler, eventEdit: EventEdit, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, eventElement: HTMLElement, editor: Popup }) => void)|string
    /**
     * Fired on the owning Scheduler before resizing starts. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel} event.eventRecord Event record being resized
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onBeforeEventResize: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => boolean|void)|string
    /**
     * Fired on the owning Scheduler to allow implementer to prevent immediate finalization by setting
     * `data.context.async = true` in the listener, to show a confirmation popup etc
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-beforeEventResizeFinalize)
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {object} event.context
     * @param {SchedulerEventModel} event.context.eventRecord Event record being resized
     * @param {Date} event.context.startDate New startDate (changed if resizing start side)
     * @param {Date} event.context.endDate New endDate (changed if resizing end side)
     * @param {Date} event.context.originalStartDate Start date before resize
     * @param {Date} event.context.originalEndDate End date before resize
     * @param {boolean} event.context.async Set true to handle resize asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize resize. This method accepts one argument: pass `true` to update records, or `false`, to ignore changes
     * @param {Event} event.event Browser event
     */
    onBeforeEventResizeFinalize: ((event: { source: Scheduler, context: { eventRecord: SchedulerEventModel, startDate: Date, endDate: Date, originalStartDate: Date, originalEndDate: Date, async: boolean, finalize: Function }, event: Event }) => void)|string
    /**
     * Fires on the owning Scheduler before an event is saved.
     * Return `false` to immediately prevent saving
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-beforeEventSave)
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler instance
     * @param {SchedulerEventModel} event.eventRecord The record about to be saved
     * @param {SchedulerResourceModel[]} event.resourceRecords The resources to which the event is assigned
     * @param {object} event.values The new values
     * @param {object} event.context Extended save context:
     * @param {boolean} event.context.async Set this to `true` in a listener to indicate that the listener will asynchronously decide to prevent or not the event save.
     * @param {Function} event.context.finalize Function to call to finalize the save. Used when `async` is `true`. Provide `false` to the function to prevent the save.
     */
    onBeforeEventSave: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecords: SchedulerResourceModel[], values: object, context: { async?: boolean, finalize: Function } }) => Promise<boolean|void>)|string
    /**
     * Fired on the owning Scheduler before event segment dragging starts. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords Segments to drag
     * @param {MouseEvent} event.event Browser event
     */
    onBeforeEventSegmentDrag: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], event: MouseEvent }) => boolean|void)|string
    /**
     * Fired on the owning Scheduler to allow implementer to use asynchronous finalization by setting
     * `context.async = true` in the listener, to show a confirmation popup etc.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-beforeEventSegmentDropFinalize)
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {object} event.context
     * @param {boolean} event.context.async Set true to not finalize the drag-drop operation immediately (e.g. to wait for user confirmation)
     * @param {SchedulerEventModel[]} event.context.eventRecords Dragged segments
     * @param {boolean} event.context.valid Set this to `false` to abort the drop immediately.
     * @param {Function} event.context.finalize Call this method after an <strong>async</strong> finalization flow, to finalize the drag-drop operation. This method accepts one argument: pass `true` to update records, or `false` to ignore changes
     */
    onBeforeEventSegmentDropFinalize: ((event: { source: Scheduler, context: { async: boolean, eventRecords: SchedulerEventModel[], valid: boolean, finalize: Function } }) => void)|string
    /**
     * Fired on the owning Scheduler Pro before resizing starts. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {EventModel} event.eventRecord Segment being resized
     * @param {ResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onBeforeEventSegmentResize: ((event: { source: SchedulerPro, eventRecord: EventModel, resourceRecord: ResourceModel, event: MouseEvent }) => boolean|void)|string
    /**
     * Fired on the owning Scheduler Pro to allow implementer to prevent immediate finalization by setting
     * `data.context.async = true` in the listener, to show a confirmation popup etc
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-beforeEventSegmentResizeFinalize)
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {object} event.context
     * @param {boolean} event.context.async Set true to handle resize asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize resize. This method accepts one argument: pass `true` to update records, or `false`, to ignore changes
     */
    onBeforeEventSegmentResizeFinalize: ((event: { source: SchedulerPro, context: { async: boolean, finalize: Function } }) => void)|string
    /**
     * Fired any time there is going to be a change to the events selected in the Scheduler.
     * Returning `false` prevents the change
     * @param {object} event Event object
     * @param {string} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {SchedulerEventModel[]} event.selected An array of events that will be added to the selection.
     * @param {SchedulerEventModel[]} event.deselected An array of events that will be removed from the selection.
     * @param {SchedulerEventModel[]} event.selection The currently selected events, before applying `selected` and `deselected`.
     */
    onBeforeEventSelectionChange: ((event: { action: string, selected: SchedulerEventModel[], deselected: SchedulerEventModel[], selection: SchedulerEventModel[] }) => boolean|void)|string
    /**
     * Fires on the owning Grid before the cell editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * @param {object} event Event object
     * @param {Grid} event.grid Target grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onBeforeFinishCellEdit: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before pan starts. Return `false` to prevent the operation.
     * @param {object} event Event object
     * @param {Event} event.event The native browser DOM event
     */
    onBeforePan: ((event: { event: Event }) => boolean|void)|string
    /**
     * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData about to be pasted
     * @param {Location} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other beforePaste events
     */
    onBeforePaste: ((event: { source: Grid, clipboardData: string, targetCell: Location, entityName: string }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Grid before export started. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {object} event.config Export config
     */
    onBeforePdfExport: ((event: { config: object }) => boolean|void)|string
    /**
     * Fired before the [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) is changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onBeforePresetChange: ((event: { source: Scheduler, startDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Fires before a row is rendered.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Row} event.row The row about to be rendered.
     * @param {Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    onBeforeRenderRow: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows are about to be rendered
     * @param {object} event Event object
     * @param {Grid} event.source This grid.
     */
    onBeforeRenderRows: ((event: { source: Grid }) => void)|string
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records to be deselected in this operation.
     * @param {Model[]} event.selected The records to be selected in this operation.
     * @param {Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Location[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Location[]} event.selectedCells The cells to be selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    onBeforeSelectionChange: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fired on the owning Scheduler/Gantt before showing dependency terminals on a task or event. Return `false` to
     * prevent it
     * @param {object} event Event object
     * @param {TimeSpan} event.source The hovered task
     */
    onBeforeShowTerminals: ((event: { source: TimeSpan }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before a task is deleted, return `false` to prevent it.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-beforeTaskDelete)
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance.
     * @param {EventModel} event.taskRecord The record about to be deleted
     * @param {TaskEditorBase} event.editor The editor widget
     */
    onBeforeTaskDelete: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Scheduler or Gantt widget instance before a task is displayed in the editor.
     * This may be listened to in order to take over the task editing flow. Returning `false`
     * stops the default editing UI from being shown.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-beforeTaskEdit)
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {TaskEdit} event.taskEdit The taskEdit feature
     * @param {EventModel} event.taskRecord The task about to be shown in the editor.
     * @param {HTMLElement} event.taskElement The element which represents the task
     */
    onBeforeTaskEdit: ((event: { source: SchedulerPro, taskEdit: TaskEdit, taskRecord: EventModel, taskElement: HTMLElement }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Scheduler or Gantt widget when the editor for an event is available but before it is shown. Allows
     * manipulating fields etc.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The SchedulerPro instance
     * @param {TaskEdit} event.taskEdit The taskEdit feature
     * @param {EventModel} event.taskRecord The task about to be shown in the editor.
     * @param {HTMLElement} event.eventElement The element which represents the task
     * @param {TaskEditorBase} event.editor The editor
     */
    onBeforeTaskEditShow: ((event: { source: SchedulerPro, taskEdit: TaskEdit, taskRecord: EventModel, eventElement: HTMLElement, editor: TaskEditorBase }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget instance before a task is saved, return `false` to prevent it.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-beforeTaskSave)
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {EventModel} event.taskRecord The task about to be saved
     * @param {TaskEditorBase} event.editor The editor widget
     */
    onBeforeTaskSave: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => Promise<boolean|void>)|string
    /**
     * Fired when a group is going to be expanded or collapsed using the UI.
     * Returning `false` from a listener prevents the operation
     * @param {object} event Event object
     * @param {Model} event.groupRecord Group record
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     * @param {Event} event.domEvent The user interaction event (eg a `click` event) if the toggle request was instigated by user interaction.
     */
    onBeforeToggleGroup: ((event: { groupRecord: Model, collapse: boolean, domEvent: Event }) => boolean|void)|string
    /**
     * Fired before a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    onBeforeToggleNode: ((event: { source: Grid, record: Model, collapse: boolean }) => void)|string
    /**
     * Fires on the owning Grid when editing is cancelled
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Event} event.event Included if the cancellation was triggered by a DOM event
     */
    onCancelCellEdit: ((event: { source: Grid, editorContext: Location, event: Event }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellContextMenu: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellDblClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * This event fires on the owning grid before the context menu is shown for a cell.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-cellMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuBeforeShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column, record: Model }) => boolean|void)|string
    /**
     * This event fires on the owning grid when an item is selected in the cell context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid after the context menu is shown for a cell.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid when a check item is toggled in the cell context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     * @param {boolean} event.checked Checked or not
     */
    onCellMenuToggleItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model, checked: boolean }) => void)|string
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOut: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOver: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onCollapse: ((event: { source: Panel }) => void)|string
    /**
     * Fired before a parent node record is collapsed.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record which has been collapsed.
     */
    onCollapseNode: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * This event is fired when a column is being dragged, and you can set the `valid` flag on t
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Event} event.event The browser event.
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     */
    onColumnDrag: ((event: { source: Grid, column: Column, insertBefore: Column, event: Event, context: { valid: boolean } }) => void)|string
    /**
     * This event is fired when a column drag gesture has started.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    onColumnDragStart: ((event: { source: Grid, column: Column, event: Event }) => void)|string
    /**
     * This event is always fired after a column is dropped. The `valid` param is true if the operation was not
     * vetoed and the column was moved in the column store.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Column} event.newParent The new parent column.
     * @param {boolean} event.valid true if the operation was not vetoed.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    onColumnDrop: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, valid: boolean, event: Event, region: string }) => boolean|void)|string
    /**
     * This event fires on the owning widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Widget} event.source The owning widget
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     */
    onContextMenuItem: ((event: { source: Widget, menu: Menu, item: MenuItem }) => void)|string
    /**
     * This event fires on the owning widget when a check item is toggled in the context menu.
     * @param {object} event Event object
     * @param {Widget} event.source The owning widget
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {boolean} event.checked Checked or not
     */
    onContextMenuToggleItem: ((event: { source: Widget, menu: Menu, item: MenuItem, checked: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a copy action is performed.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location[]} event.cells The cells about to be copied or cut
     * @param {string} event.copiedDataString The concatenated data string that was copied or cut
     * @param {boolean} event.isCut `true` if this was a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other copy events
     */
    onCopy: ((event: { source: Grid, cells: Location[], copiedDataString: string, isCut: boolean, entityName: string }) => void)|string
    /**
     * Fired when data in the store changes.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-dataChange)
     * @param {object} event Event object
     * @param {Grid} event.source Owning grid
     * @param {Store} event.store The originating store
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'updatemultiple'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onDataChange: ((event: { source: Grid, store: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired when the range of dates encapsulated by the UI changes. This will be when
     * moving a view in time by reconfiguring its [timeAxis](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-timeAxis). This will happen
     * when zooming, or changing [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-viewPreset).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-dateRangeChange)
     * @param {object} event Event object
     * @param {TimelineBase} event.source This Scheduler/Gantt instance.
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onDateRangeChange: ((event: { source: TimelineBase, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fired when dependencies are rendered
     */
    onDependenciesDrawn: (() => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when a click is registered on a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyClick: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when a context menu event is registered on a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyContextMenu: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when a dependency creation drag operation starts
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     */
    onDependencyCreateDragStart: ((event: { source: TimeSpan }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when a dependency drag creation operation succeeds
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {DependencyBaseModel} event.dependency The created dependency
     */
    onDependencyCreateDrop: ((event: { source: TimeSpan, target: TimeSpan, dependency: DependencyBaseModel }) => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when a double click is registered on a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyDblClick: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when the mouse moves out of a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyMouseOut: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when the mouse moves over a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyMouseOver: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when asynchronous dependency validation completes
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {number} event.dependencyType The dependency type, see [Type](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static)
     */
    onDependencyValidationComplete: ((event: { source: TimeSpan, target: TimeSpan, dependencyType: number }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when asynchronous dependency validation starts
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {number} event.dependencyType The dependency type, see [Type](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static)
     */
    onDependencyValidationStart: ((event: { source: TimeSpan, target: TimeSpan, dependencyType: number }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires on the owning Scheduler after the new event has been created.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {SchedulerEventModel} event.eventRecord The new `EventModel` record.
     * @param {SchedulerResourceModel} event.resourceRecord The resource for the row in which the event is being created.
     * @param {MouseEvent} event.event The ending mouseup event.
     * @param {HTMLElement} event.eventElement The DOM element representing the newly created event un the UI.
     */
    onDragCreateEnd: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, event: MouseEvent, eventElement: HTMLElement }) => void)|string
    /**
     * Fires on the owning Scheduler after the drag start has created a new Event record.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {SchedulerEventModel} event.eventRecord The event record being created
     * @param {SchedulerResourceModel} event.resourceRecord The resource record
     * @param {HTMLElement} event.eventElement The element representing the new event.
     */
    onDragCreateStart: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, eventElement: HTMLElement }) => void)|string
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid} event.source
     * @param {Model[]|object} event.selectedCells The cells that is currently being dragged over
     */
    onDragSelecting: ((event: { source: Grid, selectedCells: Model[]|object|Partial<ModelConfig> }) => void)|string
    /**
     * Fired when a double click or drag gesture has created a new event and added it to the event store.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler.
     * @param {SchedulerEventModel} event.eventRecord The new event record.
     * @param {SchedulerResourceModel} event.resourceRecord The resource assigned to the new event.
     */
    onEventAutoCreated: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel }) => void)|string
    /**
     * Triggered for click on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventClick: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for right-click on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventContextMenu: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for double-click on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventDblClick: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler when event is dragged
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords Event records being dragged
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords Assignment records being dragged
     * @param {Date} event.startDate Start date for the current location
     * @param {Date} event.endDate End date for the current location
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the drag started from
     * @param {SchedulerResourceModel} event.newResource Resource at the current location
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to `false` to signal that the current drop position is invalid.
     * @param {MouseEvent} event.domEvent Browser event
     */
    onEventDrag: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], startDate: Date, endDate: Date, resourceRecord: SchedulerResourceModel, newResource: SchedulerResourceModel, context: { valid: boolean }, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler after an event drag operation has been aborted
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords Event records being dragged
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords Assignment records being dragged
     * @param {MouseEvent} event.domEvent Browser event
     */
    onEventDragAbort: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], domEvent: MouseEvent }) => void)|string
    /**
     * Triggered when drag mode is changed, for example when copy key is
     * pressed or released while dragging.
     * @param {object} event Event object
     * @param {string} event.mode Drag mode, could be either 'move', 'copy', or 'auto'
     */
    onEventDragModeChange: ((event: { mode: string }) => void)|string
    /**
     * Fired on the owning Scheduler after an event drag operation regardless of the operation being cancelled or not
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     */
    onEventDragReset: ((event: { source: Scheduler }) => void)|string
    /**
     * Fired on the owning Scheduler when event dragging starts
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the drag starts from
     * @param {SchedulerEventModel[]} event.eventRecords Event records being dragged
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords Assignment records being dragged
     * @param {MouseEvent} event.event Browser event DEPRECATED (replaced by domEvent)
     * @param {MouseEvent} event.domEvent Browser event
     */
    onEventDragStart: ((event: { source: Scheduler, resourceRecord: SchedulerResourceModel, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], event: MouseEvent, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler when an event is dropped
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {SchedulerEventModel[]} event.eventRecords
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords
     * @param {HTMLElement} event.externalDropTarget The HTML element dropped upon, if drop happened on a valid external drop target
     * @param {boolean} event.isCopy
     * @param {object} event.context
     * @param {SchedulerEventModel} event.context.targetEventRecord Event record for drop target
     * @param {SchedulerResourceModel} event.context.newResource Resource record for drop target
     * @param {MouseEvent} event.domEvent Browser event
     */
    onEventDrop: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], externalDropTarget: HTMLElement, isCopy: boolean, context: { targetEventRecord: SchedulerEventModel, newResource: SchedulerResourceModel }, domEvent: MouseEvent }) => void)|string
    /**
     * Fired before the editor will load the event record data into its input fields. This is useful if you
     * want to modify the fields before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The editor widget
     * @param {SchedulerEventModel} event.record The record
     */
    onEventEditBeforeSetRecord: ((event: { source: Container, record: SchedulerEventModel }) => void)|string
    /**
     * Triggered when a keydown event is observed if there are selected events.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel[]} event.eventRecords The selected event records
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords The selected assignment records
     * @param {KeyboardEvent} event.event Browser event
     */
    onEventKeyDown: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], event: KeyboardEvent }) => void)|string
    /**
     * Triggered when a keyup event is observed if there are selected events.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel[]} event.eventRecords The selected event records
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords The selected assignment records
     * @param {KeyboardEvent} event.event Browser event
     */
    onEventKeyUp: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], event: KeyboardEvent }) => void)|string
    /**
     * This event fires on the owning Scheduler before the context menu is shown for an event. Allows manipulation of the items
     * to show in the same way as in `processItems`. Returning `false` from a listener prevents the menu from
     * being shown.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {SchedulerEventModel} event.eventRecord Event record for which the menu was triggered
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     * @param {MouseEvent} event.event Pointer event which triggered the context menu (if any)
     */
    onEventMenuBeforeShow: ((event: { source: Scheduler, items: Record<string, Partial<MenuItemConfig>>, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement, event?: MouseEvent }) => boolean|void)|string
    /**
     * This event fires on the owning Scheduler when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {MenuItem} event.item
     * @param {SchedulerEventModel} event.eventRecord
     * @param {SchedulerResourceModel} event.resourceRecord
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    onEventMenuItem: ((event: { source: Scheduler, item: MenuItem, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement }) => void)|string
    /**
     * This event fires on the owning Scheduler after showing the context menu for an event
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {Menu} event.menu The menu
     * @param {SchedulerEventModel} event.eventRecord Event record for which the menu was triggered
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    onEventMenuShow: ((event: { source: Scheduler, menu: Menu, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement }) => void)|string
    /**
     * Triggered for mouse down on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseDown: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the mouse enters an event bar.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseEnter: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the mouse leaves an event bar.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseLeave: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for mouse out events within and when moving out of an event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-eventMouseOut)
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseOut: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for mouse over events when moving into and within an event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-eventMouseOver)
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseOver: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for mouse up on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseUp: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler on each resize move event
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel} event.eventRecord Event record being resized
     * @param {Date} event.startDate
     * @param {Date} event.endDate
     * @param {HTMLElement} event.element
     */
    onEventPartialResize: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, startDate: Date, endDate: Date, element: HTMLElement }) => void)|string
    /**
     * Fires on the owning Scheduler after the resizing gesture has finished.
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {boolean} event.changed Shows if the record has been changed by the resize action
     * @param {SchedulerEventModel} event.eventRecord Event record being resized
     */
    onEventResizeEnd: ((event: { source: Scheduler, changed: boolean, eventRecord: SchedulerEventModel }) => void)|string
    /**
     * Fires on the owning Scheduler when event resizing starts
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel} event.eventRecord Event record being resized
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onEventResizeStart: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler when event segments are dragged
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords Dragged segments
     * @param {Date} event.startDate Start date for the current location
     * @param {Date} event.endDate End date for the current location
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to `false` to signal that the current drop position is invalid.
     */
    onEventSegmentDrag: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], startDate: Date, endDate: Date, context: { valid: boolean } }) => void)|string
    /**
     * Fired on the owning Scheduler after an event segment drag operation has been aborted
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords Dragged segments
     */
    onEventSegmentDragAbort: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[] }) => void)|string
    /**
     * Fired on the owning Scheduler after an event segment drag operation regardless of the operation being cancelled
     * or not
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     */
    onEventSegmentDragReset: ((event: { source: Scheduler }) => void)|string
    /**
     * Fired on the owning Scheduler when event segment dragging starts
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords Dragged segments
     * @param {MouseEvent} event.event Browser event
     */
    onEventSegmentDragStart: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], event: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler when an event segment is dropped
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {SchedulerEventModel[]} event.eventRecords Dropped segments
     */
    onEventSegmentDrop: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[] }) => void)|string
    /**
     * Fires on the owning Scheduler Pro on each segment resize move event
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {EventModel} event.eventRecord Segment being resized
     * @param {Date} event.startDate
     * @param {Date} event.endDate
     * @param {HTMLElement} event.element
     */
    onEventSegmentPartialResize: ((event: { source: SchedulerPro, eventRecord: EventModel, startDate: Date, endDate: Date, element: HTMLElement }) => void)|string
    /**
     * Fires on the owning Scheduler Pro after the resizing gesture has finished.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {boolean} event.changed Shows if the record has been changed by the resize action
     * @param {EventModel} event.eventRecord Segment being resized
     */
    onEventSegmentResizeEnd: ((event: { source: SchedulerPro, changed: boolean, eventRecord: EventModel }) => void)|string
    /**
     * Fires on the owning Scheduler Pro when segment resizing starts
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {EventModel} event.eventRecord Segment being resized
     * @param {ResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onEventSegmentResizeStart: ((event: { source: SchedulerPro, eventRecord: EventModel, resourceRecord: ResourceModel, event: MouseEvent }) => void)|string
    /**
     * Fired any time there is a change to the events selected in the Scheduler.
     * @param {object} event Event object
     * @param {'select'|'deselect'|'update'|'clear'} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {SchedulerEventModel[]} event.selected An array of the Events added to the selection.
     * @param {SchedulerEventModel[]} event.deselected An array of the Event removed from the selection.
     * @param {SchedulerEventModel[]} event.selection The new selection.
     */
    onEventSelectionChange: ((event: { action: 'select'|'deselect'|'update'|'clear', selected: SchedulerEventModel[], deselected: SchedulerEventModel[], selection: SchedulerEventModel[] }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onExpand: ((event: { source: Panel }) => void)|string
    /**
     * Fired after a parent node record is expanded.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record which has been expanded.
     */
    onExpandNode: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * Fired when a file is dropped on the widget element
     * @param {object} event Event object
     * @param {Grid} event.source The owning Grid instance
     * @param {DataTransferItem} event.file The dropped file descriptor
     * @param {DragEvent} event.domEvent The native DragEvent
     */
    onFileDrop: ((event: { source: Grid, file: DataTransferItem, domEvent: DragEvent }) => void)|string
    /**
     * Fires on the owning Grid when cell editing is finished
     * @param {object} event Event object
     * @param {Grid} event.grid Target grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onFinishCellEdit: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when a row drag operation is aborted
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {MouseEvent} event.event
     */
    onGridRowAbort: ((event: { source: DragHelper, context: object, event: MouseEvent }) => void)|string
    /**
     * Fired before dragging starts, return false to prevent the drag operation.
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent|TouchEvent} event.event
     */
    onGridRowBeforeDragStart: ((event: { source: DragHelper, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => boolean|void)|string
    /**
     * Fired before the row drop operation is finalized. You can return false to abort the drop operation, or a
     * Promise yielding `true` / `false` which allows for asynchronous abort (e.g. first show user a confirmation dialog).
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the `record`, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    onGridRowBeforeDropFinalize: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => Promise<boolean|void>)|string
    /**
     * Fired while the row is being dragged, in the listener function you have access to `context.insertBefore` a grid /
     * tree record, and additionally `context.parent` (a TreeNode) for trees. You can signal that the drop position is
     * valid or invalid by setting `context.valid = false;`
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent} event.event
     */
    onGridRowDrag: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[] }, event: MouseEvent }) => void)|string
    /**
     * Fired when dragging starts.
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent|TouchEvent} event.event
     */
    onGridRowDragStart: ((event: { source: DragHelper, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => void)|string
    /**
     * Fired after the row drop operation has completed, regardless of validity
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid true or false depending on whether the drop position was valid
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model} event.context.record [DEPRECATED] The dragged row record
     * @param {Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the record, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    onGridRowDrop: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, record: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => void)|string
    /**
     * This event fires on the owning Grid before the context menu is shown for a header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/HeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-headerMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     */
    onHeaderMenuBeforeShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => boolean|void)|string
    /**
     * This event fires on the owning Grid when an item is selected in the header context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     */
    onHeaderMenuItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid after the context menu is shown for a header
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     */
    onHeaderMenuShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid when a check item is toggled in the header context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {boolean} event.checked Checked or not
     */
    onHeaderMenuToggleItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, checked: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOut: ((event: { event: MouseEvent }) => void)|string
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOver: ((event: { event: MouseEvent }) => void)|string
    /**
     * Fired when a user gesture causes the active item to change.
     * @param {object} event Event object
     * @param {Event} event.event The browser event which instigated navigation. May be a click or key or focus event.
     * @param {HTMLElement|null} event.item The newly active item, or `null` if focus moved out.
     * @param {HTMLElement|null} event.oldItem The previously active item, or `null` if focus is moving in.
     */
    onNavigate: ((event: { event: Event, item: HTMLElement|null, oldItem: HTMLElement|null }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a paste action is performed.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData that was pasted
     * @param {Model[]} event.modifiedRecords The records which have been modified due to the paste action
     * @param {Location} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other paste events
     */
    onPaste: ((event: { source: Grid, clipboardData: string, modifiedRecords: Model[], targetCell: Location, entityName: string }) => void)|string
    /**
     * Fires on the owning Scheduler if a paste action is not allowed
     * @param {object} event Event object
     * @param {Scheduler} event.source Owner scheduler
     * @param {SchedulerEventModel[]} event.eventRecords
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords
     * @param {Date} event.date The paste date
     * @param {SchedulerResourceModel} event.resourceRecord The target resource record
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'event' to distinguish this event from other `pasteNotAllowed` events
     * @param {'overlappingEvents'|'resourceReadOnly'} event.reason A string id to use for displaying an error message to the user.
     */
    onPasteNotAllowed: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], date: Date, resourceRecord: SchedulerResourceModel, isCut: boolean, entityName: string, reason: 'overlappingEvents'|'resourceReadOnly' }) => void)|string
    /**
     * Fires on the owning Grid when export has finished
     * @param {object} event Event object
     * @param {Response} event.response Optional response, if received
     * @param {Error} event.error Optional error, if exception occurred
     */
    onPdfExport: ((event: { response?: Response, error?: Error }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when dragging the percent bar
     * @param {object} event Event object
     * @param {TimelineBase} event.source SchedulerPro or Gantt instance
     * @param {Model} event.taskRecord The task record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onPercentBarDrag: ((event: { source: TimelineBase, taskRecord: Model, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget if a percent bar drag-drop operation is aborted
     * @param {object} event Event object
     * @param {TimelineBase} event.source SchedulerPro instance
     * @param {Model} event.taskRecord The task record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onPercentBarDragAbort: ((event: { source: TimelineBase, taskRecord: Model, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when percent bar dragging starts
     * @param {object} event Event object
     * @param {TimelineBase} event.source SchedulerPro or Gantt instance
     * @param {Model} event.taskRecord The task record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onPercentBarDragStart: ((event: { source: TimelineBase, taskRecord: Model, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when dropping the percent bar
     * @param {object} event Event object
     * @param {TimelineBase} event.source SchedulerPro or Gantt instance
     * @param {Model} event.taskRecord The task record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onPercentBarDrop: ((event: { source: TimelineBase, taskRecord: Model, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => void)|string
    /**
     * Fired after the [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) has changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.centerDate The new center date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onPresetChange: ((event: { source: Scheduler, startDate: Date, centerDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired after releasing an event, useful to cleanup of custom content added on `renderEvent` or in `eventRenderer`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord The event record
     * @param {SchedulerResourceModel} event.resourceRecord The resource record
     * @param {SchedulerAssignmentModel} event.assignmentRecord The assignment record
     * @param {object} event.renderData An object containing details about the event rendering
     * @param {HTMLElement} event.element The event bar element
     */
    onReleaseEvent: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, renderData: object, element: HTMLElement }) => void)|string
    /**
     * Fired after rendering an event, when its element is available in DOM.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord The event record
     * @param {SchedulerResourceModel} event.resourceRecord The resource record
     * @param {SchedulerAssignmentModel} event.assignmentRecord The assignment record
     * @param {object} event.renderData An object containing details about the event rendering, see [eventRenderer](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer) for details
     * @param {boolean} event.isRepaint `true` if this render is a repaint of the event, updating its existing element
     * @param {boolean} event.isReusingElement `true` if this render lead to the event reusing a released events element
     * @param {HTMLElement} event.element The event bar element
     */
    onRenderEvent: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, renderData: object, isRepaint: boolean, isReusingElement: boolean, element: HTMLElement }) => void)|string
    /**
     * Fires after a row is rendered.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Row} event.row The row that has been rendered.
     * @param {Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    onRenderRow: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows have been rendered
     * @param {object} event Event object
     * @param {Grid} event.source This grid.
     */
    onRenderRows: ((event: { source: Grid }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Fired when clicking a resource header cell
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerResourceModel} event.resourceRecord The resource record
     * @param {Event} event.event The event
     */
    onResourceHeaderClick: ((event: { source: Scheduler, resourceRecord: SchedulerResourceModel, event: Event }) => void)|string
    /**
     * Fired when activating context menu on a resource header cell
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerResourceModel} event.resourceRecord The resource record
     * @param {Event} event.event The event
     */
    onResourceHeaderContextmenu: ((event: { source: Scheduler, resourceRecord: SchedulerResourceModel, event: Event }) => void)|string
    /**
     * Fired when double clicking a resource header cell
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerResourceModel} event.resourceRecord The resource record
     * @param {Event} event.event The event
     */
    onResourceHeaderDblclick: ((event: { source: Scheduler, resourceRecord: SchedulerResourceModel, event: Event }) => void)|string
    /**
     * This event fires on the owning scheduler before the context menu is shown for a resource.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ResourceMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-resourceMenuBeforeShow)
     * @param {object} event Event object
     * @param {Scheduler} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     * @param {SchedulerResourceModel} event.resourceRecord Record
     */
    onResourceMenuBeforeShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column, resourceRecord: SchedulerResourceModel }) => boolean|void)|string
    /**
     * This event fires on the owning scheduler when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {SchedulerResourceModel} event.record Record
     */
    onResourceMenuItem: ((event: { source: Scheduler, menu: Menu, item: MenuItem, record: SchedulerResourceModel }) => void)|string
    /**
     * This event fires on the owning scheduler after the context menu is shown for a resource.
     * @param {object} event Event object
     * @param {Scheduler} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {SchedulerResourceModel} event.record Record
     */
    onResourceMenuShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, record: SchedulerResourceModel }) => void)|string
    /**
     * This event fires on the owning grid when a check item is toggled in the context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {SchedulerResourceModel} event.resourceRecord Record
     * @param {boolean} event.checked Checked or not
     */
    onResourceMenuToggleItem: ((event: { source: Scheduler, menu: Menu, item: MenuItem, resourceRecord: SchedulerResourceModel, checked: boolean }) => void)|string
    /**
     * Triggered for click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured with
     * `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeClick: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for right-click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeContextMenu: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for double-click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeDblClick: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse down ona resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeMouseDown: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse out of a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeMouseOut: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse over on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeMouseOver: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse up ona resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeMouseUp: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for click on a resource time range. Only triggered if the ResourceTimeRange feature is configured with
     * `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeClick: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for right-click on a resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeContextMenu: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for double-click on a resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeDblClick: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse down ona resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeMouseDown: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse out of a resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeMouseOut: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse over on a resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeMouseOver: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse up ona resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeMouseUp: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    onResponsive: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string
    /**
     * Triggered when user clicks an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {TimeSpan} event.tick A record which encapsulates the time axis tick clicked on.
     * @param {number} event.tickIndex The index of the time axis tick clicked on.
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleClick: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when user right-clicks an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {TimeSpan} event.tick A record which encapsulates the time axis tick clicked on.
     * @param {number} event.tickIndex The index of the time axis tick clicked on.
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleContextMenu: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when user double-clicks an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {TimeSpan} event.tick A record which encapsulates the time axis tick clicked on.
     * @param {number} event.tickIndex The index of the time axis tick clicked on.
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Index of double-clicked resource
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleDblClick: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget before the context menu is shown for the schedule. Allows manipulation of the items
     * to show in the same way as in `processItems`. Returning `false` from a listener prevents the menu from
     * being shown.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {SchedulerEventModel} event.eventRecord Event record for which the menu was triggered
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    onScheduleMenuBeforeShow: ((event: { source: Scheduler, items: Record<string, Partial<MenuItemConfig>>, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, date: Date, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement }) => boolean|void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {MenuItem} event.item
     * @param {SchedulerResourceModel} event.resourceRecord
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {HTMLElement} event.element
     */
    onScheduleMenuItem: ((event: { source: Scheduler, item: MenuItem, resourceRecord: SchedulerResourceModel, date: Date, element: HTMLElement }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget after showing the context menu for the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Menu} event.menu The menu
     * @param {SchedulerResourceModel} event.resourceRecord
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {HTMLElement} event.targetElement
     */
    onScheduleMenuShow: ((event: { source: Scheduler, items: Record<string, Partial<MenuItemConfig>>, menu: Menu, resourceRecord: SchedulerResourceModel, date: Date, targetElement: HTMLElement }) => void)|string
    /**
     * Triggered when user mousedowns over an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseDown: ((event: { source: Scheduler, date: Date, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when mouse enters an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseEnter: ((event: { source: Scheduler, date: Date, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when mouse leaves an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseLeave: ((event: { source: Scheduler, event: MouseEvent }) => void)|string
    /**
     * Triggered when user moves mouse over an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {TimeSpan} event.tick A record which encapsulates the time axis tick clicked on.
     * @param {number} event.tickIndex The index of the time axis tick clicked on.
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseMove: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when user mouseups over an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseUp: ((event: { source: Scheduler, date: Date, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Grid has scrolled vertically
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {number} event.scrollTop The vertical scroll position.
     */
    onScroll: ((event: { source: Grid, scrollTop: number }) => void)|string
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select'|'deselect'} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records deselected in this operation.
     * @param {Model[]} event.selected The records selected in this operation.
     * @param {Model[]} event.selection The records in the new selection.
     * @param {Location[]} event.deselectedCells The cells deselected in this operation.
     * @param {Location[]} event.selectedCells The cells selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the new selection.
     */
    onSelectionChange: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => void)|string
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    onSelectionModeChange: ((event: { selectionMode: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * Fires when splitting the Grid.
     * @param {object} event Event object
     * @param {GridBase[]} event.subViews The sub views created by the split
     * @param {object} event.options The options passed to the split call
     * @param {'horizontal'|'vertical'|'both'} event.options.direction The direction of the split
     * @param {Column} event.options.atColumn The column to split at
     * @param {Model} event.options.atRecord The record to split at
     */
    onSplit: ((event: { subViews: GridBase[], options: { direction: 'horizontal'|'vertical'|'both', atColumn: Column, atRecord: Model } }) => void)|string
    /**
     * Fired by the Grid when the collapse icon is clicked. Return `false` to prevent the default collapse action,
     * if you want to implement your own behavior.
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterCollapseClick: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => boolean|void)|string
    /**
     * Fired by the Grid after a sub-grid has been resized using the splitter
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The resized subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterDragEnd: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fired by the Grid when a sub-grid resize gesture starts
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The subgrid about to be resized
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterDragStart: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fires on the owning Grid when editing starts
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onStartCellEdit: ((event: { source: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fires after a sub grid is collapsed.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance
     * @param {SubGrid} event.subGrid The sub grid instance
     */
    onSubGridCollapse: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Fires after a sub grid is expanded.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance
     * @param {SubGrid} event.subGrid The sub grid instance
     */
    onSubGridExpand: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget when the editor for an event is canceled.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {EventModel} event.taskRecord the task about the shown in the editor
     * @param {TaskEditorBase} event.editor The editor
     */
    onTaskEditCanceled: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => void)|string
    /**
     * Fired when the timeaxis has changed, for example by zooming or configuring a new time span.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {object} event.config Config object used to reconfigure the time axis.
     * @param {Date} event.config.startDate New start date (if supplied)
     * @param {Date} event.config.endDate New end date (if supplied)
     */
    onTimeAxisChange: ((event: { source: Scheduler, config: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fires after a click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderClick: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a right click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderContextMenu: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a double click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderDblClick: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget before the context menu is shown for the time axis header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeAxisHeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-timeAxisHeaderMenuBeforeShow)
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Time axis column
     */
    onTimeAxisHeaderMenuBeforeShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => boolean|void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget when an item is selected in the header context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Time axis column
     */
    onTimeAxisHeaderMenuItem: ((event: { source: Scheduler, menu: Menu, item: MenuItem, column: Column }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget after the context menu is shown for a header
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Time axis column
     */
    onTimeAxisHeaderMenuShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.event DEPRECATED 5.3.0 Use `domEvent` instead
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTimeRangeHeaderClick: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, event: MouseEvent, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a right click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.event DEPRECATED 5.3.0 Use `domEvent` instead
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTimeRangeHeaderContextMenu: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, event: MouseEvent, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a double click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.event DEPRECATED 5.3.0 Use `domEvent` instead
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTimeRangeHeaderDblClick: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, event: MouseEvent, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered when time selection changes
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Date} event.startDate The selected range start date, or `undefined`
     * @param {Date} event.endDate The selected range end date, or `undefined`
     */
    onTimeSelectionChange: ((event: { source: Scheduler, startDate: Date, endDate: Date }) => void)|string
    /**
     * Triggered when clicking the time selection header element
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Date} event.startDate The selected range start date
     * @param {Date} event.endDate The selected range end date
     * @param {Event} event.domEvent The raw DOM event
     */
    onTimeSelectionElementClick: ((event: { source: Scheduler, startDate: Date, endDate: Date, domEvent: Event }) => void)|string
    /**
     * Fired when the pointer-activated [timelineContext](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineDomEvents#property-timelineContext) has changed.
     * @param {object} event Event object
     * @param {TimelineContext} event.oldContext The tick/resource context being deactivated.
     * @param {TimelineContext} event.context The tick/resource context being activated.
     */
    onTimelineContextChange: ((event: { oldContext: TimelineContext, context: TimelineContext }) => void)|string
    /**
     * Fired when the *scheduler* viewport (not the overall Scheduler element) changes size.
     * This happens when the grid changes height, or when the subgrid which encapsulates the
     * scheduler column changes width.
     * @param {object} event Event object
     * @param {Widget} event.source This Scheduler
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onTimelineViewportResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Group expanded or collapsed
     * @param {object} event Event object
     * @param {Model} event.groupRecord Group record
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     */
    onToggleGroup: ((event: { groupRecord: Model, collapse: boolean }) => void)|string
    /**
     * Fired after a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    onToggleNode: ((event: { record: Model, collapse: boolean }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Tool} event.source This Panel.
     * @param {Tool} event.tool The tool which is being clicked.
     */
    onToolClick: ((event: { source: Tool, tool: Tool }) => void)|string
    /**
     * <strong>Note that this event fires on the owning [SchedulerPro](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro).</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-transactionChange)
     * @param {object} event Event object
     * @param {boolean} event.hasChanges Whether any changes are recorded that are not yet attached to a version.
     */
    onTransactionChange: ((event: { hasChanges: boolean }) => void)|string
    /**
     * Fires when un-splitting the Grid.
     */
    onUnsplit: (() => void)|string
    /**
     * Fired when the range of dates visible within the viewport changes. This will be when
     * scrolling along a time axis.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-visibleDateRangeChange)
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onVisibleDateRangeChange: ((event: { source: Scheduler, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
}

/**
 * A thin base class for [SchedulerPro](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro). Includes fewer features by default, allowing smaller
 * custom-built bundles if used in place of [SchedulerPro](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro).
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase)
 */
export class SchedulerProBase extends SchedulerBase {
    /**
     * `false` to require a drop on a target event bar side circle to define the dependency type.
     * If dropped on the event bar, the `defaultValue` of the DependencyModel `type` field will be used to
     * determine the target task side.
     */
    allowDropOnEventBar: boolean
    /**
     * Get/set the event store instance of the backing project.
     */
    assignmentStore: AssignmentStore
    /**
     * Get/set assignments, applies to the backing project's AssignmentStore.
     */
    assignments: AssignmentModel[]|Partial<AssignmentModelConfig>[]
    /**
     * Get/set calendars, applies to the backing projects CalendarManagerStore.
     */
    calendars: CalendarModel[]|Partial<CalendarModelConfig>[]
    /**
     * A template function that will be called to generate the HTML contents of the dependency creation tooltip.
     * You can return either an HTML string or a [DomConfig](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DomHelper#typedef-DomConfig) object.
     */
    creationTooltipTemplate: Function
    /**
     * Get/set dependencies, applies to the backing projects DependencyStore.
     */
    dependencies: DependencyModel[]|Partial<DependencyModelConfig>[]
    /**
     * Get/set the dependencies store instance of the backing project.
     */
    dependencyStore: DependencyStore
    /**
     * This config defines how to handle overlapping events. Valid values are:
     */
    eventLayout: 'stack'|'pack'|'mixed'|'none'|Partial<EventLayoutConfig>
    /**
     * Get/set the event store instance of the backing project.
     */
    eventStore: EventStore
    /**
     * Get/set events, applies to the backing project's EventStore.
     */
    events: EventModel[]|Partial<EventModelConfig>[]
    /**
     * Get the global LocaleHelper
     */
    readonly localeHelper: typeof LocaleHelper
    /**
     * Get the global LocaleManager
     */
    readonly localeManager: typeof LocaleManager
    /**
     * Get mode (horizontal/vertical)
     */
    readonly mode: 'horizontal'|'vertical'
    /**
     * Get/set ProjectModel instance, containing the data visualized by the SchedulerPro.
     */
    project: ProjectModel
    /**
     * Get/set the resource store instance of the backing project
     */
    resourceStore: ResourceStore
    /**
     * Get/set resources, applies to the backing project's ResourceStore.
     */
    resources: ResourceModel[]|Partial<ResourceModelConfig>[]
    /**
     * Delay in ms before hiding the terminals when the mouse leaves an event bar or terminal.
     */
    terminalHideDelay: number
    /**
     * Terminal offset from their initial position, in px. Positive values move terminals further away from the
     * event bar, negative values inside the event bar.
     */
    terminalOffset: number
    /**
     * Delay in ms before showing the terminals when hovering over an event bar.
     */
    terminalShowDelay: number
    /**
     * Terminal diameter in px, overrides the default CSS value for it (which might depend on theme).
     */
    terminalSize: number|string
    /**
     * A template function allowing you to configure the contents of the tooltip shown when hovering a
     * dependency line. You can return either an HTML string or a [DomConfig](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DomHelper#typedef-DomConfig) object.
     */
    tooltipTemplate: Function
    /**
     * An object containing Features
     */
    features: SchedulerProBaseFeaturesType
    /**
     * Fired on the owning Scheduler after an event segment is dropped
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {SchedulerEventModel[]} event.eventRecords Dropped segments
     * @param {boolean} event.valid
     * @param {object} event.context
     */
    onAfterEventSegmentDrop: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], valid: boolean, context: object }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget instance after task editing is finished by applying changes, cancelling them
     * or deleting the task record.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {EventModel} event.taskRecord Task record used in the task editor
     * @param {TaskEditorBase} event.editor The editor widget
     */
    onAfterTaskEdit: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget instance after a task is saved
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {EventModel} event.taskRecord The task about to be saved
     * @param {TaskEditorBase} event.editor The editor widget
     */
    onAfterTaskSave: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => void)|string
    /**
     * Fired any time there is a change to the assignments selected in the Scheduler.
     * @param {object} event Event object
     * @param {'select'|'deselect'|'update'|'clear'} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {SchedulerAssignmentModel[]} event.selected An array of the Assignments added to the selection.
     * @param {SchedulerAssignmentModel[]} event.deselected An array of the Assignments removed from the selection.
     * @param {SchedulerAssignmentModel[]} event.selection The new selection.
     */
    onAssignmentSelectionChange: ((event: { action: 'select'|'deselect'|'update'|'clear', selected: SchedulerAssignmentModel[], deselected: SchedulerAssignmentModel[], selection: SchedulerAssignmentModel[] }) => void)|string
    /**
     * Fires before an assignment is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or
     * by the event editor. Can for example be used to display a custom dialog to confirm deletion, in which
     * case records should be "manually" removed after confirmation:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-beforeAssignmentDelete)
     * @param {object} event Event object
     * @param {Scheduler} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeAssignmentDelete: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => boolean|void)|string
    /**
     * Fired any time there is going to be a change to the assignments selected in the Scheduler.
     * Returning `false` prevents the change
     * @param {object} event Event object
     * @param {string} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {SchedulerEventModel[]} event.selected An array of assignments that will be added to the selection.
     * @param {SchedulerEventModel[]} event.deselected An array of assignments that will be removed from the selection.
     * @param {SchedulerEventModel[]} event.selection The currently selected assignments, before applying `selected` and `deselected`.
     */
    onBeforeAssignmentSelectionChange: ((event: { action: string, selected: SchedulerEventModel[], deselected: SchedulerEventModel[], selection: SchedulerEventModel[] }) => boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before an event is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or by the
     * event editor. Return `false` to immediately veto the removal (or a `Promise` yielding `true` or `false`
     * for async vetoing).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-beforeEventDelete)
     * @param {object} event Event object
     * @param {Scheduler|any} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeEventDelete: ((event: { source: Scheduler|any, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean|void>)|string
    /**
     * Fired on the owning Scheduler before event segment dragging starts. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords Segments to drag
     * @param {MouseEvent} event.event Browser event
     */
    onBeforeEventSegmentDrag: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], event: MouseEvent }) => boolean|void)|string
    /**
     * Fired on the owning Scheduler to allow implementer to use asynchronous finalization by setting
     * `context.async = true` in the listener, to show a confirmation popup etc.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-beforeEventSegmentDropFinalize)
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {object} event.context
     * @param {boolean} event.context.async Set true to not finalize the drag-drop operation immediately (e.g. to wait for user confirmation)
     * @param {SchedulerEventModel[]} event.context.eventRecords Dragged segments
     * @param {boolean} event.context.valid Set this to `false` to abort the drop immediately.
     * @param {Function} event.context.finalize Call this method after an <strong>async</strong> finalization flow, to finalize the drag-drop operation. This method accepts one argument: pass `true` to update records, or `false` to ignore changes
     */
    onBeforeEventSegmentDropFinalize: ((event: { source: Scheduler, context: { async: boolean, eventRecords: SchedulerEventModel[], valid: boolean, finalize: Function } }) => void)|string
    /**
     * Fired on the owning Scheduler Pro before resizing starts. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {EventModel} event.eventRecord Segment being resized
     * @param {ResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onBeforeEventSegmentResize: ((event: { source: SchedulerPro, eventRecord: EventModel, resourceRecord: ResourceModel, event: MouseEvent }) => boolean|void)|string
    /**
     * Fired on the owning Scheduler Pro to allow implementer to prevent immediate finalization by setting
     * `data.context.async = true` in the listener, to show a confirmation popup etc
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-beforeEventSegmentResizeFinalize)
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {object} event.context
     * @param {boolean} event.context.async Set true to handle resize asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize resize. This method accepts one argument: pass `true` to update records, or `false`, to ignore changes
     */
    onBeforeEventSegmentResizeFinalize: ((event: { source: SchedulerPro, context: { async: boolean, finalize: Function } }) => void)|string
    /**
     * Fired any time there is going to be a change to the events selected in the Scheduler.
     * Returning `false` prevents the change
     * @param {object} event Event object
     * @param {string} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {SchedulerEventModel[]} event.selected An array of events that will be added to the selection.
     * @param {SchedulerEventModel[]} event.deselected An array of events that will be removed from the selection.
     * @param {SchedulerEventModel[]} event.selection The currently selected events, before applying `selected` and `deselected`.
     */
    onBeforeEventSelectionChange: ((event: { action: string, selected: SchedulerEventModel[], deselected: SchedulerEventModel[], selection: SchedulerEventModel[] }) => boolean|void)|string
    /**
     * Fired before the [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) is changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onBeforePresetChange: ((event: { source: Scheduler, startDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records to be deselected in this operation.
     * @param {Model[]} event.selected The records to be selected in this operation.
     * @param {Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Location[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Location[]} event.selectedCells The cells to be selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    onBeforeSelectionChange: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => boolean|void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before a task is deleted, return `false` to prevent it.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-beforeTaskDelete)
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance.
     * @param {EventModel} event.taskRecord The record about to be deleted
     * @param {TaskEditorBase} event.editor The editor widget
     */
    onBeforeTaskDelete: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Scheduler or Gantt widget instance before a task is displayed in the editor.
     * This may be listened to in order to take over the task editing flow. Returning `false`
     * stops the default editing UI from being shown.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-beforeTaskEdit)
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {TaskEdit} event.taskEdit The taskEdit feature
     * @param {EventModel} event.taskRecord The task about to be shown in the editor.
     * @param {HTMLElement} event.taskElement The element which represents the task
     */
    onBeforeTaskEdit: ((event: { source: SchedulerPro, taskEdit: TaskEdit, taskRecord: EventModel, taskElement: HTMLElement }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Scheduler or Gantt widget when the editor for an event is available but before it is shown. Allows
     * manipulating fields etc.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The SchedulerPro instance
     * @param {TaskEdit} event.taskEdit The taskEdit feature
     * @param {EventModel} event.taskRecord The task about to be shown in the editor.
     * @param {HTMLElement} event.eventElement The element which represents the task
     * @param {TaskEditorBase} event.editor The editor
     */
    onBeforeTaskEditShow: ((event: { source: SchedulerPro, taskEdit: TaskEdit, taskRecord: EventModel, eventElement: HTMLElement, editor: TaskEditorBase }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget instance before a task is saved, return `false` to prevent it.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-beforeTaskSave)
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {EventModel} event.taskRecord The task about to be saved
     * @param {TaskEditorBase} event.editor The editor widget
     */
    onBeforeTaskSave: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellContextMenu: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellDblClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOut: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOver: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid} event.source
     * @param {Model[]|object} event.selectedCells The cells that is currently being dragged over
     */
    onDragSelecting: ((event: { source: Grid, selectedCells: Model[]|object|Partial<ModelConfig> }) => void)|string
    /**
     * Triggered for click on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventClick: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for right-click on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventContextMenu: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for double-click on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventDblClick: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for mouse down on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseDown: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the mouse enters an event bar.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseEnter: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the mouse leaves an event bar.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseLeave: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for mouse out events within and when moving out of an event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-eventMouseOut)
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseOut: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for mouse over events when moving into and within an event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-eventMouseOver)
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseOver: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for mouse up on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseUp: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler when event segments are dragged
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords Dragged segments
     * @param {Date} event.startDate Start date for the current location
     * @param {Date} event.endDate End date for the current location
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to `false` to signal that the current drop position is invalid.
     */
    onEventSegmentDrag: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], startDate: Date, endDate: Date, context: { valid: boolean } }) => void)|string
    /**
     * Fired on the owning Scheduler after an event segment drag operation has been aborted
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords Dragged segments
     */
    onEventSegmentDragAbort: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[] }) => void)|string
    /**
     * Fired on the owning Scheduler after an event segment drag operation regardless of the operation being cancelled
     * or not
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     */
    onEventSegmentDragReset: ((event: { source: Scheduler }) => void)|string
    /**
     * Fired on the owning Scheduler when event segment dragging starts
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords Dragged segments
     * @param {MouseEvent} event.event Browser event
     */
    onEventSegmentDragStart: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], event: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler when an event segment is dropped
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {SchedulerEventModel[]} event.eventRecords Dropped segments
     */
    onEventSegmentDrop: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[] }) => void)|string
    /**
     * Fires on the owning Scheduler Pro on each segment resize move event
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {EventModel} event.eventRecord Segment being resized
     * @param {Date} event.startDate
     * @param {Date} event.endDate
     * @param {HTMLElement} event.element
     */
    onEventSegmentPartialResize: ((event: { source: SchedulerPro, eventRecord: EventModel, startDate: Date, endDate: Date, element: HTMLElement }) => void)|string
    /**
     * Fires on the owning Scheduler Pro after the resizing gesture has finished.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {boolean} event.changed Shows if the record has been changed by the resize action
     * @param {EventModel} event.eventRecord Segment being resized
     */
    onEventSegmentResizeEnd: ((event: { source: SchedulerPro, changed: boolean, eventRecord: EventModel }) => void)|string
    /**
     * Fires on the owning Scheduler Pro when segment resizing starts
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {EventModel} event.eventRecord Segment being resized
     * @param {ResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onEventSegmentResizeStart: ((event: { source: SchedulerPro, eventRecord: EventModel, resourceRecord: ResourceModel, event: MouseEvent }) => void)|string
    /**
     * Fired any time there is a change to the events selected in the Scheduler.
     * @param {object} event Event object
     * @param {'select'|'deselect'|'update'|'clear'} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {SchedulerEventModel[]} event.selected An array of the Events added to the selection.
     * @param {SchedulerEventModel[]} event.deselected An array of the Event removed from the selection.
     * @param {SchedulerEventModel[]} event.selection The new selection.
     */
    onEventSelectionChange: ((event: { action: 'select'|'deselect'|'update'|'clear', selected: SchedulerEventModel[], deselected: SchedulerEventModel[], selection: SchedulerEventModel[] }) => void)|string
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOut: ((event: { event: MouseEvent }) => void)|string
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOver: ((event: { event: MouseEvent }) => void)|string
    /**
     * Fired when a user gesture causes the active item to change.
     * @param {object} event Event object
     * @param {Event} event.event The browser event which instigated navigation. May be a click or key or focus event.
     * @param {HTMLElement|null} event.item The newly active item, or `null` if focus moved out.
     * @param {HTMLElement|null} event.oldItem The previously active item, or `null` if focus is moving in.
     */
    onNavigate: ((event: { event: Event, item: HTMLElement|null, oldItem: HTMLElement|null }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when dragging the percent bar
     * @param {object} event Event object
     * @param {TimelineBase} event.source SchedulerPro or Gantt instance
     * @param {Model} event.taskRecord The task record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onPercentBarDrag: ((event: { source: TimelineBase, taskRecord: Model, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget if a percent bar drag-drop operation is aborted
     * @param {object} event Event object
     * @param {TimelineBase} event.source SchedulerPro instance
     * @param {Model} event.taskRecord The task record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onPercentBarDragAbort: ((event: { source: TimelineBase, taskRecord: Model, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when percent bar dragging starts
     * @param {object} event Event object
     * @param {TimelineBase} event.source SchedulerPro or Gantt instance
     * @param {Model} event.taskRecord The task record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onPercentBarDragStart: ((event: { source: TimelineBase, taskRecord: Model, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when dropping the percent bar
     * @param {object} event Event object
     * @param {TimelineBase} event.source SchedulerPro or Gantt instance
     * @param {Model} event.taskRecord The task record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onPercentBarDrop: ((event: { source: TimelineBase, taskRecord: Model, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => void)|string
    /**
     * Fired after the [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) has changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.centerDate The new center date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onPresetChange: ((event: { source: Scheduler, startDate: Date, centerDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Triggered for click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured with
     * `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeClick: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for right-click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeContextMenu: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for double-click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeDblClick: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse down ona resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeMouseDown: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse out of a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeMouseOut: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse over on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeMouseOver: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse up ona resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source This Scheduler
     * @param {ResourceNonWorkingTime} event.feature The ResourceNonWorkingTime feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceNonWorkingTimeMouseUp: ((event: { source: SchedulerPro, feature: ResourceNonWorkingTime, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    onResponsive: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string
    /**
     * Triggered when user clicks an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {TimeSpan} event.tick A record which encapsulates the time axis tick clicked on.
     * @param {number} event.tickIndex The index of the time axis tick clicked on.
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleClick: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when user right-clicks an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {TimeSpan} event.tick A record which encapsulates the time axis tick clicked on.
     * @param {number} event.tickIndex The index of the time axis tick clicked on.
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleContextMenu: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when user double-clicks an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {TimeSpan} event.tick A record which encapsulates the time axis tick clicked on.
     * @param {number} event.tickIndex The index of the time axis tick clicked on.
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Index of double-clicked resource
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleDblClick: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when user mousedowns over an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseDown: ((event: { source: Scheduler, date: Date, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when mouse enters an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseEnter: ((event: { source: Scheduler, date: Date, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when mouse leaves an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseLeave: ((event: { source: Scheduler, event: MouseEvent }) => void)|string
    /**
     * Triggered when user moves mouse over an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {TimeSpan} event.tick A record which encapsulates the time axis tick clicked on.
     * @param {number} event.tickIndex The index of the time axis tick clicked on.
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseMove: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when user mouseups over an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseUp: ((event: { source: Scheduler, date: Date, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select'|'deselect'} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records deselected in this operation.
     * @param {Model[]} event.selected The records selected in this operation.
     * @param {Model[]} event.selection The records in the new selection.
     * @param {Location[]} event.deselectedCells The cells deselected in this operation.
     * @param {Location[]} event.selectedCells The cells selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the new selection.
     */
    onSelectionChange: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => void)|string
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    onSelectionModeChange: ((event: { selectionMode: object }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget when the editor for an event is canceled.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {EventModel} event.taskRecord the task about the shown in the editor
     * @param {TaskEditorBase} event.editor The editor
     */
    onTaskEditCanceled: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => void)|string
    /**
     * Fires after a click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderClick: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a right click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderContextMenu: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a double click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderDblClick: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fired when the pointer-activated [timelineContext](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineDomEvents#property-timelineContext) has changed.
     * @param {object} event Event object
     * @param {TimelineContext} event.oldContext The tick/resource context being deactivated.
     * @param {TimelineContext} event.context The tick/resource context being activated.
     */
    onTimelineContextChange: ((event: { oldContext: TimelineContext, context: TimelineContext }) => void)|string
    /**
     * <strong>Note that this event fires on the owning [SchedulerPro](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro).</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerProBase#event-transactionChange)
     * @param {object} event Event object
     * @param {boolean} event.hasChanges Whether any changes are recorded that are not yet attached to a version.
     */
    onTransactionChange: ((event: { hasChanges: boolean }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<SchedulerProBaseConfig>} config
     */
    constructor(config?: Partial<SchedulerProBaseConfig>);
    /**
     * Get localized string, returns value of `text` if no localized string found.
     * @param {string} text String key
     * @param {object} templateData Data to supply to template if localized string is a function
     */
    static L(text: string, templateData?: object): string;
    /**
     * Convenience function to get an optional translation. The difference compared to `L()` is that it won't throw
     * an error when the translation is missing even if configured with `throwOnMissingLocale`
     * @param {string} text String key
     * @param {object} templateData Data to supply to template if localized string is a function
     */
    static optionalL(text: string, templateData?: object): string;
    /**
     * Convenience function that can be called directly on the class that mixes Localizable in
     * @param {string} text String key
     * @param {object} templateData Data to supply to template if localized string is a function
     */
    L(text: string, templateData?: object): string;
    /**
     * Aborts dependency creation, removes proxy and cleans up listeners
     */
    abort(): void;
    /**
     * Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig|string} config An object containing listener definitions, or the event name to listen for
     * @param {object|Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    addListener(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Cancel editing, destroys the editor
     * This function is exposed on Grid and can thus be called as `grid.cancelEditing(...)`
     * @param {boolean} silent Pass true to prevent method from firing event
     */
    cancelEditing(silent?: boolean): void;
    /**
     * Finish editing, update the underlying record and destroy the editor
     * This function is exposed on Grid and can thus be called as `grid.finishEditing(...)`
     */
    finishEditing(): Promise<any>;
    /**
     * Check if any listener is registered for the specified eventName
     * @param {string} eventName
     */
    hasListener(eventName: string): boolean;
    /**
     * Hide terminals for specified event
     * @param {HTMLElement} eventElement Event element
     */
    hideTerminals(eventElement: HTMLElement): void;
    /**
     * Highlights the time spans representing the calendars of the passed event records, and resource records.
     * @param {SchedulerEventModel[]} eventRecords The event records
     * @param {SchedulerResourceModel[]} resourceRecords The resource records
     * @param {boolean} clearExisting Provide `false` to leave previous highlight elements
     */
    highlightEventCalendars(eventRecords: SchedulerEventModel[], resourceRecords?: SchedulerResourceModel[], clearExisting?: boolean): void;
    /**
     * Highlights the time spans representing the working time calendars of the passed resource records.
     * @param {SchedulerResourceModel[]} resourceRecords The resource records
     * @param {boolean} clearExisting Provide `false` to leave previous highlight elements
     */
    highlightResourceCalendars(resourceRecords: SchedulerResourceModel[], clearExisting?: boolean): void;
    /**
     * Highlights the region representing the passed time span and optionally for a single certain resource.
     * @param {HighlightTimeSpan} options A single options object describing the time span to highlight.
     */
    highlightTimeSpan(options: HighlightTimeSpan): void;
    /**
     * Highlights the regions representing the passed time spans.
     * @param {HighlightTimeSpan[]} timeSpans An array of objects with start/end dates describing the rectangle to highlight.
     * @param {object} options A single options object
     */
    highlightTimeSpans(timeSpans: HighlightTimeSpan[], options?: {
        clearExisting?: boolean
    }): void;
    /**
     * Alias for [addListener](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/Events#function-addListener). Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig|string} config An object containing listener definitions, or the event name to listen for
     * @param {object|Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    on(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name
     * before relaying, for example add -&gt; storeAdd
     * @param {EventsClass} through Object to relay the events through, needs to mix Events mixin in
     * @param {string} prefix Prefix to add to event name
     * @param {boolean} transformCase Specify false to prevent making first letter of event name uppercase
     */
    relayAll(through: EventsClass, prefix: string, transformCase?: boolean): void;
    /**
     * Removes all listeners registered to this object by the application.
     */
    removeAllListeners(): void;
    /**
     * Removes an event listener. Same API signature as [addListener](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/Events#function-addListener)
     * @param {object|string} config A config object or the event name
     * @param {object|Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    removeListener(config: object|string, thisObj: object|Function, oldThisObj: object): void;
    /**
     * Resume event triggering after a call to [suspendEvents()](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/Events#function-suspendEvents). If any triggered events were queued they will be triggered.
     */
    resumeEvents(): boolean;
    /**
     * Show terminals for specified event at sides defined in #terminalSides.
     * @param {TimeSpan} timeSpanRecord Event/task to show terminals for
     * @param {HTMLElement} element Event/task element, defaults to using the first element found for the task
     */
    showTerminals(timeSpanRecord: TimeSpan, element?: HTMLElement): void;
    /**
     * Start editing specified cell. If no cellContext is given it starts with the first cell in the first row.
     * This function is exposed on Grid and can thus be called as `grid.startEditing(...)`
     * @param {object} cellContext Cell specified in format { id: 'x', columnId/column/field: 'xxx' }. See [getCell](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/Grid#function-getCell) for details.
     */
    startEditing(cellContext: object): Promise<any>;
    /**
     * Prevents events from being triggered until [resumeEvents()](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/Events#function-resumeEvents) is called. Optionally queues events that are triggered while
     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.
     * @param {boolean} queue Specify true to queue events triggered while suspended
     */
    suspendEvents(queue?: boolean): void;
    /**
     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener
     * makes function return false.
     * @param {string} eventName Event name for which to trigger listeners
     * @param {{bubbles?: boolean, [key: string]: any}} param Single parameter passed on to listeners, source property will be added to it (this)
     */
    trigger(eventName: string, param?: {bubbles?: boolean, [key: string]: any}): Promise<boolean|any>;
    /**
     * Shorthand for [removeListener](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/Events#function-removeListener)
     * @param {object|string} config A config object or the event name
     * @param {object|Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    un(config: object|string, thisObj?: object|Function, oldThisObj?: object): void;
    /**
     * Removes all highlight elements.
     */
    unhighlightCalendars(): void;
    /**
     * Removes any highlighting elements.
     * @param {boolean} fadeOut `true` to fade out the highlight elements before removing
     */
    unhighlightTimeSpans(fadeOut?: boolean): Promise<void>;
    /**
     * Method that is triggered when applying a locale to the instance
     * (happens on the instance construction steps and when switching to another locale).
     */
    updateLocalization(): void;
}

/**
 * Type with configuration options for [ProjectProgressMixin](https://bryntum.com/products/grid/docs/api/SchedulerPro/view/mixin/ProjectProgressMixin) class.
 */
type ProjectProgressMixinClassConfig = {
    /**
     * Accepts the following values:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/mixin/ProjectProgressMixin#config-projectProgressReporting)
     */
    projectProgressReporting: string|null
}

export class ProjectProgressMixinClass {
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ProjectProgressMixinClassConfig>} config
     */
    constructor(config?: Partial<ProjectProgressMixinClassConfig>);
}

export const ProjectProgressMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & ProjectProgressMixinClass>

/**
 * Type with configuration options for [SchedulerProEventRendering](https://bryntum.com/products/grid/docs/api/SchedulerPro/view/mixin/SchedulerProEventRendering) class.
 */
type SchedulerProEventRenderingClassConfig = {
    /**
     * This config defines how to handle overlapping events. Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/mixin/SchedulerProEventRendering#config-eventLayout)
     */
    eventLayout: 'stack'|'pack'|'mixed'|'none'|Partial<EventLayoutConfig>
}

export class SchedulerProEventRenderingClass {
    /**
     * This config defines how to handle overlapping events. Valid values are:
     */
    eventLayout: 'stack'|'pack'|'mixed'|'none'|Partial<EventLayoutConfig>
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<SchedulerProEventRenderingClassConfig>} config
     */
    constructor(config?: Partial<SchedulerProEventRenderingClassConfig>);
}

export const SchedulerProEventRendering : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & SchedulerProEventRenderingClass>

/**
 * Type with configuration options for [SchedulingIssueResolution](https://bryntum.com/products/grid/docs/api/SchedulerPro/view/mixin/SchedulingIssueResolution) class.
 */
type SchedulingIssueResolutionClassConfig = {
    /**
     * Class implementing the popup resolving *scheduling cycles*.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/mixin/SchedulingIssueResolution#config-cycleResolutionPopupClass)
     */
    cycleResolutionPopupClass: typeof CycleResolutionPopup
    /**
     * Set to `true` to display special popups allowing user
     * to resolve [scheduling conflicts](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup),
     * [cycles](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup) or calendar misconfigurations.
     * The popup will suggest user ways to resolve the corresponding case.
     */
    displaySchedulingIssueResolutionPopup: boolean
    /**
     * Class implementing the popup resolving *scheduling conflicts* and *calendar misconfigurations*.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/mixin/SchedulingIssueResolution#config-schedulingIssueResolutionPopupClass)
     */
    schedulingIssueResolutionPopupClass: typeof SchedulingIssueResolutionPopup
}

export class SchedulingIssueResolutionClass {
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<SchedulingIssueResolutionClassConfig>} config
     */
    constructor(config?: Partial<SchedulingIssueResolutionClassConfig>);
}

export const SchedulingIssueResolution : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & SchedulingIssueResolutionClass>

/**
 * Type with configuration options for [CalendarField](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/CalendarField) class.
 */
type CalendarFieldConfig = InputFieldConfig & ContainerItemConfig & {
    type: 'calendarfield'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * By default PickerField's picker is transient, and will [hidePicker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/PickerField#function-hidePicker) when the user clicks or
     * taps outside or when focus moves outside picker.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-autoClose)
     * @deprecated This will be removed in 6.0
     */
    autoClose: boolean
    /**
     * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autoComplete: string
    /**
     * Configure as `true` to have the picker expand upon focus enter.
     */
    autoExpand: boolean
    /**
     * Specify `true` to auto select field contents on focus
     */
    autoSelect: boolean
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Configure as `true` to force case matching when filtering the dropdown list based upon the typed value.
     */
    caseSensitive: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * A config object to configure the [ChipView](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/ChipView) to display the
     * selected value set when [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-chipView)
     */
    chipView: Partial<ChipViewConfig>
    /**
     * `true` to clear value typed to a multiselect combo when picker is collapsed
     */
    clearTextOnPickerHide: boolean
    /**
     * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is
     * not [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-readOnly). The trigger is available in the [triggers](#Core/widget/Field#property-triggers) object
     * under the name `clear`. May also be an object which configures the `clear`
     * [trigger](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers).
     */
    clearable: boolean|Partial<FieldTriggerConfig>
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The config controls how the value of nested items are handled when a parent container gets or sets its
     * [values](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-containValues)
     * @param {Field} field Field instance
     * @returns {boolean}
     */
    containValues: boolean|string|((field: Field) => boolean)
    /**
     * The configuration for additional items associated to this field. This is typically used to add contextual
     * fields related to a [checkbox](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Checkbox) or [radio button](#Core/widget/Radio). See
     * these classes for examples of nested fields.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-container)
     */
    container: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Partial<FieldContainerConfig>|FieldContainer
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * If configured as `true`, this means that when an unmatched string is typed into the
     * combo's input field, and `ENTER`, or the [multiValueSeparator](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiValueSeparator) is typed,
     * a new record will be created using the typed string as the [displayField](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-displayField).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-createOnUnmatched)
     * @param {string} name Record name
     * @param {Combo} combo Combo instance
     * @returns {Model} New record
     */
    createOnUnmatched: ((name: string, combo: Combo) => Model)|string|boolean
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Field used for item text when populating from store
     */
    displayField: string
    /**
     * Template function that can be used to customize the displayed value
     * @param {Model} record The record to provide a textual value for
     * @param {Combo} combo A reference to this Combo
     * @returns {string|void}
     */
    displayValueRenderer: (record: Model, combo: Combo) => string|void
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * User can edit text in text field (otherwise only pick from attached picker)
     */
    editable: boolean
    /**
     * Text to display in the drop down when there are no items in the underlying store
     */
    emptyText: string
    /**
     * A function which creates an array of values for the {#config-filterParamName} to pass
     * any filters to the server upon load.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-encodeFilterParams)
     * @param {<Object>} filters filters
     * @returns {<Object>} array of values
     */
    encodeFilterParams: (filters: object[]) => object[]
    /**
     * If `false`, filtering will be triggered once you exceed [minChars](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-minChars). To filter only when
     * hitting Enter key, set this to `true`;
     */
    filterOnEnter: boolean
    /**
     * The name of an operator type as implemented in [operator](https://bryntum.com/products/schedulerpro/docs/api/Core/util/CollectionFilter#config-operator)
     * to use when filtering the dropdown list based upon the typed value.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-filterOperator)
     */
    filterOperator: '='|'!='|'>'|'>='|'<'|'<='|'*'|'startsWith'|'endsWith'|'isIncludedIn'
    /**
     * If the dropdown is to be populated with a filtered query to a remote server, specify the
     * name of the parameter to pass the typed string here. By default, the string is simply sent
     * as the value of the parameter. For special encoding, configure the combo with [encodeFilterParams](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-encodeFilterParams)
     */
    filterParamName: string
    /**
     * When [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`, you may configure `filterSelected` as
     * `true` to hide items in the dropdown when they are added to the selection.
     * It will appear as if the requested item has "moved" into the field's
     * [ChipView](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-chipView).
     */
    filterSelected: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * By default, the picker is hidden on selection in single select mode, and
     * remains to allow more selections when [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * Setting this to a `Boolean` value can override that default.
     */
    hidePickerOnSelect: boolean
    /**
     * Configure as `true` to hide the expand trigger. This is automatically set to `true` if
     * remote filtering is enabled by setting the [filterParamName](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-filterParamName) config.
     */
    hideTrigger: boolean
    /**
     * Specify `false` to prevent field from being highlighted when on external value changes
     */
    highlightExternalChange: boolean
    /**
     * An optional string to display inside the input field as an overlay. This can be useful for displaying
     * a field's units.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-hint)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hint: string|((data: { source: Field, value: any }) => string)
    /**
     * This config is similar to [hint](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-hint) except that this config is used to display HTML content.
     * Since this can allow malicious content to be executed, be sure not to include user-entered data or to
     * encode such data (see [encodeHtml](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/StringHelper#function-encodeHtml-static)).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-hintHtml)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hintHtml: string|((data: { source: Field, value: any }) => string)
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set this config to `true` to always display items horizontally along with this field. This assigns an
     * [hbox](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/layout/Box) as the [layout](#Core/widget/Container#config-layout) to the
     * [container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-container).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-inline)
     */
    inline: boolean
    /**
     * Configure this as `true` to render the dropdown list as a permanently visible list
     * in the document flow immediately below the input area instead of as a popup.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-inlinePicker)
     */
    inlinePicker: boolean
    /**
     * Text alignment for the input field.
     */
    inputAlign: string
    /**
     * Sets custom attributes of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)
     */
    inputAttributes: object
    /**
     * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc).
     */
    inputType: string
    /**
     * The width to apply to the `&lt;input&gt;` element. If a number is specified, `px` will be used.
     */
    inputWidth: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * Rows to display in the dropdown (list items).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-items)
     */
    items: object[]|string[]|object
    /**
     * The delay in milliseconds to wait after the last keystroke before triggering a change event.
     * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
     * immediate feedback, change will still be triggered on blur).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-keyStrokeChangeDelay)
     */
    keyStrokeChangeDelay: number
    /**
     * The delay in milliseconds to wait after the last keystroke before filtering the list.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-keyStrokeFilterDelay)
     */
    keyStrokeFilterDelay: number
    /**
     * Label, prepended to field
     */
    label: string
    /**
     * CSS class name or class names to add to any configured [label](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Labelable#config-label)
     */
    labelCls: string|object
    /**
     * Label position, either 'before' the field or 'above' the field
     */
    labelPosition: 'before'|'above'
    /**
     * The width to apply to the `&lt;label&gt;` element. If a number is specified, `px` will be used.
     */
    labelWidth: string|number
    /**
     * The labels to add either before or after the input field.
     * Each label may have the following properties:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-labels)
     */
    labels: object[]
    /**
     * CSS class to add to picker
     */
    listCls: string
    /**
     * Template string used to render the list items in the dropdown list
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-listItemTpl)
     * @param {Model} record The record representing the item being rendered
     * @returns {string|void}
     */
    listItemTpl: (record: Model) => string|void
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The max number of characters for the input field
     */
    maxLength: number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The minimum string length to trigger the filtering, only relevant when [editable](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-editable) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-minChars)
     */
    minChars: number
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The min number of characters for the input field
     */
    minLength: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Configure as `true` to allow selection of multiple values from the dropdown list.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-multiSelect)
     */
    multiSelect: boolean
    /**
     * A key value which, when typed in a [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) Combo, selects the
     * currently active item in the picker, and clears the input field ready for another
     * match to be typed.
     */
    multiValueSeparator: string
    /**
     * Name of the field which is used as a key to get/set values from/to the field.
     * Used prior to [ref](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-ref) and [id](#Core/widget/Widget#config-id) in
     * [Container.values](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-name)
     */
    name: string
    /**
     * This implies that the picker will display an anchor pointer, but also means that the picker will align closer
     * to the input field so that the pointer pierces the [pickerAlignElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-pickerAlignElement)
     */
    overlayAnchor: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-owner)
     */
    owner: Widget
    /**
     * Configuration object for the [picker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/List) on initialization. Returns the
     * [picker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/List) instance at runtime.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-picker)
     */
    picker: Partial<ListConfig>|List
    /**
     * The name of the element property to which the picker should size and align itself.
     */
    pickerAlignElement: string
    /**
     * Width of picker, defaults to this combo's [pickerAlignElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-pickerAlignElement) width
     */
    pickerWidth: number
    /**
     * Text to display in empty field.
     */
    placeholder: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Optionally a [Filter](https://bryntum.com/products/schedulerpro/docs/api/Core/util/CollectionFilter) config object which the combo should use for
     * filtering using the typed value.
     * This may use a `filterBy` property to test its `value` against any field in the passed record.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-primaryFilter)
     */
    primaryFilter: Partial<CollectionFilterConfig>
    /**
     * Makes the field unmodifiable by user action. The input area is not editable, and triggers
     * are unresponsive.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
     */
    required: boolean
    /**
     * If this field is not [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-readOnly), then setting this option means that pressing
     * the `ESCAPE` key after editing the field will revert the field to the value it had when
     * the user focused the field. If the field is *not* changed from when focused, the [clearable](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated.
     */
    revertOnEscape: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)
     */
    spellCheck: boolean
    /**
     * The store containing the calendars
     */
    store: CalendarManagerStore
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tab index of the input field
     */
    tabIndex: number
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * How to query the store upon click of the expand trigger. Specify one of these values:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-triggerAction)
     */
    triggerAction: 'all'|'last'|null
    /**
     * The triggers to add either before or after the input field. Each property name is the reference by which
     * an instantiated Trigger Widget may be retrieved from the live `[triggers](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-triggers)
     */
    triggers: Record<string, FieldTriggerConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-ui)
     */
    ui: string|object
    /**
     * `true` to cause the field to be in an invalid state while the typed filter string does not match a record in the store.
     */
    validateFilter: boolean
    /**
     * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press
     * or similar.
     */
    validateOnInput: boolean
    /**
     * The initial value of this Combo box. In single select mode (default) it's a simple string value, for
     * [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) mode, it should be an array of record ids.
     */
    value: string|number|string[]|number[]
    /**
     * Field used for item value when populating from store. Setting this to `null` will
     * yield the selected record as the Combo's [value](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#property-value).
     */
    valueField: string|null
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#config-y)
     */
    y: number
    /**
     * The default action was performed (an item in the list was selected)
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {any} event.value The [value](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-valueField) of the selected record
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onAction: ((event: { source: Combo, value: any, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when this field's value changes.
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onChange: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fired when this field is [cleared](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#function-clear).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#event-clear)
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     */
    onClear: ((event: { source: Field|any }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * User typed into the field. Please note that the value attached to this event is the raw input field value and
     * not the combos value
     * @param {object} event Event object
     * @param {Combo} event.source The combo.
     * @param {string} event.value Raw input value
     * @param {Event} event.event The triggering DOM event if any.
     */
    onInput: ((event: { source: Combo, value: string, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * An item in the list was selected
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onSelect: ((event: { source: Combo, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * User clicked one of this field's [triggers](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers)
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {Widget} event.trigger The trigger activated by click or touch tap.
     */
    onTrigger: ((event: { source: Field|any, trigger: Widget }) => void)|string
}

/**
 * A combo used to select the calendar for an event. This field can be seen in the [AdvancedTab](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab)
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField)
 */
export class CalendarField extends ModelCombo {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CalendarField#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<CalendarFieldConfig>} config
     */
    constructor(config?: Partial<CalendarFieldConfig>);
}

/**
 * Type with configuration options for [ConstraintTypePicker](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/ConstraintTypePicker) class.
 */
type ConstraintTypePickerConfig = InputFieldConfig & ContainerItemConfig & {
    type: 'constrainttypepicker'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * By default PickerField's picker is transient, and will [hidePicker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/PickerField#function-hidePicker) when the user clicks or
     * taps outside or when focus moves outside picker.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-autoClose)
     * @deprecated This will be removed in 6.0
     */
    autoClose: boolean
    /**
     * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autoComplete: string
    /**
     * Configure as `true` to have the picker expand upon focus enter.
     */
    autoExpand: boolean
    /**
     * Specify `true` to auto select field contents on focus
     */
    autoSelect: boolean
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Configure as `true` to force case matching when filtering the dropdown list based upon the typed value.
     */
    caseSensitive: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * A config object to configure the [ChipView](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/ChipView) to display the
     * selected value set when [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-chipView)
     */
    chipView: Partial<ChipViewConfig>
    /**
     * `true` to clear value typed to a multiselect combo when picker is collapsed
     */
    clearTextOnPickerHide: boolean
    /**
     * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is
     * not [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-readOnly). The trigger is available in the [triggers](#Core/widget/Field#property-triggers) object
     * under the name `clear`. May also be an object which configures the `clear`
     * [trigger](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers).
     */
    clearable: boolean|Partial<FieldTriggerConfig>
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The config controls how the value of nested items are handled when a parent container gets or sets its
     * [values](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-containValues)
     * @param {Field} field Field instance
     * @returns {boolean}
     */
    containValues: boolean|string|((field: Field) => boolean)
    /**
     * The configuration for additional items associated to this field. This is typically used to add contextual
     * fields related to a [checkbox](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Checkbox) or [radio button](#Core/widget/Radio). See
     * these classes for examples of nested fields.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-container)
     */
    container: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Partial<FieldContainerConfig>|FieldContainer
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * If configured as `true`, this means that when an unmatched string is typed into the
     * combo's input field, and `ENTER`, or the [multiValueSeparator](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiValueSeparator) is typed,
     * a new record will be created using the typed string as the [displayField](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-displayField).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-createOnUnmatched)
     * @param {string} name Record name
     * @param {Combo} combo Combo instance
     * @returns {Model} New record
     */
    createOnUnmatched: ((name: string, combo: Combo) => Model)|string|boolean
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Field used for item text when populating from store
     */
    displayField: string
    /**
     * Template function that can be used to customize the displayed value
     * @param {Model} record The record to provide a textual value for
     * @param {Combo} combo A reference to this Combo
     * @returns {string|void}
     */
    displayValueRenderer: (record: Model, combo: Combo) => string|void
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * User can edit text in text field (otherwise only pick from attached picker)
     */
    editable: boolean
    /**
     * Text to display in the drop down when there are no items in the underlying store
     */
    emptyText: string
    /**
     * A function which creates an array of values for the {#config-filterParamName} to pass
     * any filters to the server upon load.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-encodeFilterParams)
     * @param {<Object>} filters filters
     * @returns {<Object>} array of values
     */
    encodeFilterParams: (filters: object[]) => object[]
    /**
     * If `false`, filtering will be triggered once you exceed [minChars](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-minChars). To filter only when
     * hitting Enter key, set this to `true`;
     */
    filterOnEnter: boolean
    /**
     * The name of an operator type as implemented in [operator](https://bryntum.com/products/schedulerpro/docs/api/Core/util/CollectionFilter#config-operator)
     * to use when filtering the dropdown list based upon the typed value.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-filterOperator)
     */
    filterOperator: '='|'!='|'>'|'>='|'<'|'<='|'*'|'startsWith'|'endsWith'|'isIncludedIn'
    /**
     * If the dropdown is to be populated with a filtered query to a remote server, specify the
     * name of the parameter to pass the typed string here. By default, the string is simply sent
     * as the value of the parameter. For special encoding, configure the combo with [encodeFilterParams](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-encodeFilterParams)
     */
    filterParamName: string
    /**
     * When [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`, you may configure `filterSelected` as
     * `true` to hide items in the dropdown when they are added to the selection.
     * It will appear as if the requested item has "moved" into the field's
     * [ChipView](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-chipView).
     */
    filterSelected: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * By default, the picker is hidden on selection in single select mode, and
     * remains to allow more selections when [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * Setting this to a `Boolean` value can override that default.
     */
    hidePickerOnSelect: boolean
    /**
     * Configure as `true` to hide the expand trigger. This is automatically set to `true` if
     * remote filtering is enabled by setting the [filterParamName](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-filterParamName) config.
     */
    hideTrigger: boolean
    /**
     * Specify `false` to prevent field from being highlighted when on external value changes
     */
    highlightExternalChange: boolean
    /**
     * An optional string to display inside the input field as an overlay. This can be useful for displaying
     * a field's units.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-hint)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hint: string|((data: { source: Field, value: any }) => string)
    /**
     * This config is similar to [hint](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-hint) except that this config is used to display HTML content.
     * Since this can allow malicious content to be executed, be sure not to include user-entered data or to
     * encode such data (see [encodeHtml](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/StringHelper#function-encodeHtml-static)).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-hintHtml)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hintHtml: string|((data: { source: Field, value: any }) => string)
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set this config to `true` to always display items horizontally along with this field. This assigns an
     * [hbox](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/layout/Box) as the [layout](#Core/widget/Container#config-layout) to the
     * [container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-container).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-inline)
     */
    inline: boolean
    /**
     * Configure this as `true` to render the dropdown list as a permanently visible list
     * in the document flow immediately below the input area instead of as a popup.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-inlinePicker)
     */
    inlinePicker: boolean
    /**
     * Text alignment for the input field.
     */
    inputAlign: string
    /**
     * Sets custom attributes of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)
     */
    inputAttributes: object
    /**
     * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc).
     */
    inputType: string
    /**
     * The width to apply to the `&lt;input&gt;` element. If a number is specified, `px` will be used.
     */
    inputWidth: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * Rows to display in the dropdown (list items).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-items)
     */
    items: object[]|string[]|object
    /**
     * The delay in milliseconds to wait after the last keystroke before triggering a change event.
     * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
     * immediate feedback, change will still be triggered on blur).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-keyStrokeChangeDelay)
     */
    keyStrokeChangeDelay: number
    /**
     * The delay in milliseconds to wait after the last keystroke before filtering the list.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-keyStrokeFilterDelay)
     */
    keyStrokeFilterDelay: number
    /**
     * Label, prepended to field
     */
    label: string
    /**
     * CSS class name or class names to add to any configured [label](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Labelable#config-label)
     */
    labelCls: string|object
    /**
     * Label position, either 'before' the field or 'above' the field
     */
    labelPosition: 'before'|'above'
    /**
     * The width to apply to the `&lt;label&gt;` element. If a number is specified, `px` will be used.
     */
    labelWidth: string|number
    /**
     * The labels to add either before or after the input field.
     * Each label may have the following properties:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-labels)
     */
    labels: object[]
    /**
     * CSS class to add to picker
     */
    listCls: string
    /**
     * Template string used to render the list items in the dropdown list
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-listItemTpl)
     * @param {Model} record The record representing the item being rendered
     * @returns {string|void}
     */
    listItemTpl: (record: Model) => string|void
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The max number of characters for the input field
     */
    maxLength: number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The minimum string length to trigger the filtering, only relevant when [editable](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-editable) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-minChars)
     */
    minChars: number
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The min number of characters for the input field
     */
    minLength: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Configure as `true` to allow selection of multiple values from the dropdown list.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-multiSelect)
     */
    multiSelect: boolean
    /**
     * A key value which, when typed in a [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) Combo, selects the
     * currently active item in the picker, and clears the input field ready for another
     * match to be typed.
     */
    multiValueSeparator: string
    /**
     * Name of the field which is used as a key to get/set values from/to the field.
     * Used prior to [ref](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-ref) and [id](#Core/widget/Widget#config-id) in
     * [Container.values](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-name)
     */
    name: string
    /**
     * This implies that the picker will display an anchor pointer, but also means that the picker will align closer
     * to the input field so that the pointer pierces the [pickerAlignElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-pickerAlignElement)
     */
    overlayAnchor: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-owner)
     */
    owner: Widget
    /**
     * Configuration object for the [picker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/List) on initialization. Returns the
     * [picker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/List) instance at runtime.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-picker)
     */
    picker: Partial<ListConfig>|List
    /**
     * The name of the element property to which the picker should size and align itself.
     */
    pickerAlignElement: string
    /**
     * Width of picker, defaults to this combo's [pickerAlignElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-pickerAlignElement) width
     */
    pickerWidth: number
    /**
     * Text to display in empty field.
     */
    placeholder: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Optionally a [Filter](https://bryntum.com/products/schedulerpro/docs/api/Core/util/CollectionFilter) config object which the combo should use for
     * filtering using the typed value.
     * This may use a `filterBy` property to test its `value` against any field in the passed record.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-primaryFilter)
     */
    primaryFilter: Partial<CollectionFilterConfig>
    /**
     * Makes the field unmodifiable by user action. The input area is not editable, and triggers
     * are unresponsive.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
     */
    required: boolean
    /**
     * If this field is not [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-readOnly), then setting this option means that pressing
     * the `ESCAPE` key after editing the field will revert the field to the value it had when
     * the user focused the field. If the field is *not* changed from when focused, the [clearable](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated.
     */
    revertOnEscape: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)
     */
    spellCheck: boolean
    /**
     * Store used to populate items. Also accepts a Store config object
     */
    store: Store|Partial<StoreConfig>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tab index of the input field
     */
    tabIndex: number
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * How to query the store upon click of the expand trigger. Specify one of these values:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-triggerAction)
     */
    triggerAction: 'all'|'last'|null
    /**
     * The triggers to add either before or after the input field. Each property name is the reference by which
     * an instantiated Trigger Widget may be retrieved from the live `[triggers](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-triggers)
     */
    triggers: Record<string, FieldTriggerConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-ui)
     */
    ui: string|object
    /**
     * `true` to cause the field to be in an invalid state while the typed filter string does not match a record in the store.
     */
    validateFilter: boolean
    /**
     * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press
     * or similar.
     */
    validateOnInput: boolean
    /**
     * The initial value of this Combo box. In single select mode (default) it's a simple string value, for
     * [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) mode, it should be an array of record ids.
     */
    value: string|number|string[]|number[]
    /**
     * Field used for item value when populating from store. Setting this to `null` will
     * yield the selected record as the Combo's [value](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#property-value).
     */
    valueField: string|null
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#config-y)
     */
    y: number
    /**
     * The default action was performed (an item in the list was selected)
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {any} event.value The [value](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-valueField) of the selected record
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onAction: ((event: { source: Combo, value: any, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when this field's value changes.
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onChange: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fired when this field is [cleared](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#function-clear).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#event-clear)
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     */
    onClear: ((event: { source: Field|any }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * User typed into the field. Please note that the value attached to this event is the raw input field value and
     * not the combos value
     * @param {object} event Event object
     * @param {Combo} event.source The combo.
     * @param {string} event.value Raw input value
     * @param {Event} event.event The triggering DOM event if any.
     */
    onInput: ((event: { source: Combo, value: string, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * An item in the list was selected
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onSelect: ((event: { source: Combo, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * User clicked one of this field's [triggers](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers)
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {Widget} event.trigger The trigger activated by click or touch tap.
     */
    onTrigger: ((event: { source: Field|any, trigger: Widget }) => void)|string
}

/**
 * Combo box preconfigured with possible constraint type values.
 * This picker doesn't support [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect).
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker)
 */
export class ConstraintTypePicker extends Combo {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ConstraintTypePicker#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ConstraintTypePickerConfig>} config
     */
    constructor(config?: Partial<ConstraintTypePickerConfig>);
}

/**
 * Type with configuration options for [CycleResolutionPopup](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/CycleResolutionPopup) class.
 */
type CycleResolutionPopupConfig = {
    type: 'cycleresolutionpopup'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * By default, a Popup is transient, and will [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) when the user clicks or
     * taps outside its owned widgets and when focus moves outside its owned widgets.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-autoClose)
     */
    autoClose: boolean
    /**
     * Auto show flag for Popup.
     * If truthy then Popup is shown automatically upon hover.
     */
    autoShow: boolean
    /**
     * Update assigned [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-bbar)
     */
    bbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-bodyCls)
     */
    bodyCls: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Show a tool in the header to close this Popup, and allow `ESC` close it.
     * The tool is available in the [tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Toolable#property-tools) object
     * under the name `close`. It uses the CSS class `b-popup-close` to apply a
     * default close icon. This may be customized with your own CSS rules.
     */
    closable: boolean
    /**
     * The action to take when calling the [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) method.
     * By default, the popup is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-closeAction)
     */
    closeAction: 'hide'|'destroy'
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-cls)
     */
    cls: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-collapsible)
     */
    collapsible: boolean|Partial<PanelCollapserConfig>|Partial<PanelCollapserOverlayConfig>
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * By default a Popup is focused when it is shown.
     * Configure this as `false` to prevent automatic focus on show.
     */
    focusOnToFront: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-footer)
     */
    footer: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * DOM element to attach popup.
     */
    forElement: HTMLElement
    /**
     * A config [object](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-header)
     */
    header: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * Show a tool in the header to maximize this popup
     */
    maximizable: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized: boolean
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * Optionally show an opaque mask below this Popup when shown.
     * Configure this as `true` to show the mask.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-modal)
     */
    modal: boolean|{
        closeOnMaskTap?: boolean
        transparent?: boolean
    }
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover
     */
    showOnClick: boolean
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-stateId)
     */
    stateId: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/schedulerpro/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-stateProvider)
     */
    stateProvider: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-stateful)
     */
    stateful: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-statefulEvents)
     */
    statefulEvents: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar). If the value assigned to a strip is an array, it is converted to
     * the toolbar's [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-strips)
     */
    strips: Record<string, Partial<ContainerItemConfig>>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-tbar)
     */
    tbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display in the header. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-title)
     */
    title: string
    /**
     * The [tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-tools)
     */
    tools: Record<string, Partial<ToolConfig>>
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * By default, tabbing within a Popup is circular - that is it does not exit.
     * Configure this as `false` to allow tabbing out of the Popup.
     */
    trapFocus: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#config-y)
     */
    y: number
    /**
     * Fired when the [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Popup} event.source This Popup
     */
    onBeforeClose: ((event: { source: Popup }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onCollapse: ((event: { source: Panel }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onExpand: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Tool} event.source This Panel.
     * @param {Tool} event.tool The tool which is being clicked.
     */
    onToolClick: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * Class implementing a dialog informing user of an infinite cycle in the data.
 * The dialog displays tasks and dependencies causing the cycle and allows
 * to pick one of the dependencies and either deactivate or remove it.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup)
 */
export class CycleResolutionPopup extends SchedulingIssueResolutionPopup {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/CycleResolutionPopup#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<CycleResolutionPopupConfig>} config
     */
    constructor(config?: Partial<CycleResolutionPopupConfig>);
}

/**
 * Type with configuration options for [DependencyTypePicker](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/DependencyTypePicker) class.
 */
type DependencyTypePickerConfig = InputFieldConfig & ContainerItemConfig & {
    type: 'dependencytypepicker'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * By default PickerField's picker is transient, and will [hidePicker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/PickerField#function-hidePicker) when the user clicks or
     * taps outside or when focus moves outside picker.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-autoClose)
     * @deprecated This will be removed in 6.0
     */
    autoClose: boolean
    /**
     * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autoComplete: string
    /**
     * Configure as `true` to have the picker expand upon focus enter.
     */
    autoExpand: boolean
    /**
     * Specify `true` to auto select field contents on focus
     */
    autoSelect: boolean
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Configure as `true` to force case matching when filtering the dropdown list based upon the typed value.
     */
    caseSensitive: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * A config object to configure the [ChipView](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/ChipView) to display the
     * selected value set when [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-chipView)
     */
    chipView: Partial<ChipViewConfig>
    /**
     * `true` to clear value typed to a multiselect combo when picker is collapsed
     */
    clearTextOnPickerHide: boolean
    /**
     * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is
     * not [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-readOnly). The trigger is available in the [triggers](#Core/widget/Field#property-triggers) object
     * under the name `clear`. May also be an object which configures the `clear`
     * [trigger](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers).
     */
    clearable: boolean|Partial<FieldTriggerConfig>
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The config controls how the value of nested items are handled when a parent container gets or sets its
     * [values](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-containValues)
     * @param {Field} field Field instance
     * @returns {boolean}
     */
    containValues: boolean|string|((field: Field) => boolean)
    /**
     * The configuration for additional items associated to this field. This is typically used to add contextual
     * fields related to a [checkbox](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Checkbox) or [radio button](#Core/widget/Radio). See
     * these classes for examples of nested fields.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-container)
     */
    container: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Partial<FieldContainerConfig>|FieldContainer
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * If configured as `true`, this means that when an unmatched string is typed into the
     * combo's input field, and `ENTER`, or the [multiValueSeparator](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiValueSeparator) is typed,
     * a new record will be created using the typed string as the [displayField](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-displayField).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-createOnUnmatched)
     * @param {string} name Record name
     * @param {Combo} combo Combo instance
     * @returns {Model} New record
     */
    createOnUnmatched: ((name: string, combo: Combo) => Model)|string|boolean
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Field used for item text when populating from store
     */
    displayField: string
    /**
     * Template function that can be used to customize the displayed value
     * @param {Model} record The record to provide a textual value for
     * @param {Combo} combo A reference to this Combo
     * @returns {string|void}
     */
    displayValueRenderer: (record: Model, combo: Combo) => string|void
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * User can edit text in text field (otherwise only pick from attached picker)
     */
    editable: boolean
    /**
     * Text to display in the drop down when there are no items in the underlying store
     */
    emptyText: string
    /**
     * A function which creates an array of values for the {#config-filterParamName} to pass
     * any filters to the server upon load.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-encodeFilterParams)
     * @param {<Object>} filters filters
     * @returns {<Object>} array of values
     */
    encodeFilterParams: (filters: object[]) => object[]
    /**
     * If `false`, filtering will be triggered once you exceed [minChars](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-minChars). To filter only when
     * hitting Enter key, set this to `true`;
     */
    filterOnEnter: boolean
    /**
     * The name of an operator type as implemented in [operator](https://bryntum.com/products/schedulerpro/docs/api/Core/util/CollectionFilter#config-operator)
     * to use when filtering the dropdown list based upon the typed value.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-filterOperator)
     */
    filterOperator: '='|'!='|'>'|'>='|'<'|'<='|'*'|'startsWith'|'endsWith'|'isIncludedIn'
    /**
     * If the dropdown is to be populated with a filtered query to a remote server, specify the
     * name of the parameter to pass the typed string here. By default, the string is simply sent
     * as the value of the parameter. For special encoding, configure the combo with [encodeFilterParams](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-encodeFilterParams)
     */
    filterParamName: string
    /**
     * When [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`, you may configure `filterSelected` as
     * `true` to hide items in the dropdown when they are added to the selection.
     * It will appear as if the requested item has "moved" into the field's
     * [ChipView](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-chipView).
     */
    filterSelected: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * By default, the picker is hidden on selection in single select mode, and
     * remains to allow more selections when [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * Setting this to a `Boolean` value can override that default.
     */
    hidePickerOnSelect: boolean
    /**
     * Configure as `true` to hide the expand trigger. This is automatically set to `true` if
     * remote filtering is enabled by setting the [filterParamName](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-filterParamName) config.
     */
    hideTrigger: boolean
    /**
     * Specify `false` to prevent field from being highlighted when on external value changes
     */
    highlightExternalChange: boolean
    /**
     * An optional string to display inside the input field as an overlay. This can be useful for displaying
     * a field's units.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-hint)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hint: string|((data: { source: Field, value: any }) => string)
    /**
     * This config is similar to [hint](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-hint) except that this config is used to display HTML content.
     * Since this can allow malicious content to be executed, be sure not to include user-entered data or to
     * encode such data (see [encodeHtml](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/StringHelper#function-encodeHtml-static)).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-hintHtml)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hintHtml: string|((data: { source: Field, value: any }) => string)
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set this config to `true` to always display items horizontally along with this field. This assigns an
     * [hbox](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/layout/Box) as the [layout](#Core/widget/Container#config-layout) to the
     * [container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-container).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-inline)
     */
    inline: boolean
    /**
     * Configure this as `true` to render the dropdown list as a permanently visible list
     * in the document flow immediately below the input area instead of as a popup.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-inlinePicker)
     */
    inlinePicker: boolean
    /**
     * Text alignment for the input field.
     */
    inputAlign: string
    /**
     * Sets custom attributes of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)
     */
    inputAttributes: object
    /**
     * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc).
     */
    inputType: string
    /**
     * The width to apply to the `&lt;input&gt;` element. If a number is specified, `px` will be used.
     */
    inputWidth: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * Rows to display in the dropdown (list items).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-items)
     */
    items: object[]|string[]|object
    /**
     * The delay in milliseconds to wait after the last keystroke before triggering a change event.
     * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
     * immediate feedback, change will still be triggered on blur).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-keyStrokeChangeDelay)
     */
    keyStrokeChangeDelay: number
    /**
     * The delay in milliseconds to wait after the last keystroke before filtering the list.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-keyStrokeFilterDelay)
     */
    keyStrokeFilterDelay: number
    /**
     * Label, prepended to field
     */
    label: string
    /**
     * CSS class name or class names to add to any configured [label](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Labelable#config-label)
     */
    labelCls: string|object
    /**
     * Label position, either 'before' the field or 'above' the field
     */
    labelPosition: 'before'|'above'
    /**
     * The width to apply to the `&lt;label&gt;` element. If a number is specified, `px` will be used.
     */
    labelWidth: string|number
    /**
     * The labels to add either before or after the input field.
     * Each label may have the following properties:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-labels)
     */
    labels: object[]
    /**
     * CSS class to add to picker
     */
    listCls: string
    /**
     * Template string used to render the list items in the dropdown list
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-listItemTpl)
     * @param {Model} record The record representing the item being rendered
     * @returns {string|void}
     */
    listItemTpl: (record: Model) => string|void
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The max number of characters for the input field
     */
    maxLength: number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The minimum string length to trigger the filtering, only relevant when [editable](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-editable) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-minChars)
     */
    minChars: number
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The min number of characters for the input field
     */
    minLength: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Configure as `true` to allow selection of multiple values from the dropdown list.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-multiSelect)
     */
    multiSelect: boolean
    /**
     * A key value which, when typed in a [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) Combo, selects the
     * currently active item in the picker, and clears the input field ready for another
     * match to be typed.
     */
    multiValueSeparator: string
    /**
     * Name of the field which is used as a key to get/set values from/to the field.
     * Used prior to [ref](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-ref) and [id](#Core/widget/Widget#config-id) in
     * [Container.values](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-name)
     */
    name: string
    /**
     * This implies that the picker will display an anchor pointer, but also means that the picker will align closer
     * to the input field so that the pointer pierces the [pickerAlignElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-pickerAlignElement)
     */
    overlayAnchor: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-owner)
     */
    owner: Widget
    /**
     * Configuration object for the [picker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/List) on initialization. Returns the
     * [picker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/List) instance at runtime.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-picker)
     */
    picker: Partial<ListConfig>|List
    /**
     * The name of the element property to which the picker should size and align itself.
     */
    pickerAlignElement: string
    /**
     * Width of picker, defaults to this combo's [pickerAlignElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-pickerAlignElement) width
     */
    pickerWidth: number
    /**
     * Text to display in empty field.
     */
    placeholder: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Optionally a [Filter](https://bryntum.com/products/schedulerpro/docs/api/Core/util/CollectionFilter) config object which the combo should use for
     * filtering using the typed value.
     * This may use a `filterBy` property to test its `value` against any field in the passed record.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-primaryFilter)
     */
    primaryFilter: Partial<CollectionFilterConfig>
    /**
     * Makes the field unmodifiable by user action. The input area is not editable, and triggers
     * are unresponsive.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
     */
    required: boolean
    /**
     * If this field is not [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-readOnly), then setting this option means that pressing
     * the `ESCAPE` key after editing the field will revert the field to the value it had when
     * the user focused the field. If the field is *not* changed from when focused, the [clearable](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated.
     */
    revertOnEscape: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)
     */
    spellCheck: boolean
    /**
     * Store used to populate items. Also accepts a Store config object
     */
    store: Store|Partial<StoreConfig>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tab index of the input field
     */
    tabIndex: number
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * How to query the store upon click of the expand trigger. Specify one of these values:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-triggerAction)
     */
    triggerAction: 'all'|'last'|null
    /**
     * The triggers to add either before or after the input field. Each property name is the reference by which
     * an instantiated Trigger Widget may be retrieved from the live `[triggers](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-triggers)
     */
    triggers: Record<string, FieldTriggerConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-ui)
     */
    ui: string|object
    /**
     * `true` to cause the field to be in an invalid state while the typed filter string does not match a record in the store.
     */
    validateFilter: boolean
    /**
     * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press
     * or similar.
     */
    validateOnInput: boolean
    /**
     * The initial value of this Combo box. In single select mode (default) it's a simple string value, for
     * [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) mode, it should be an array of record ids.
     */
    value: string|number|string[]|number[]
    /**
     * Field used for item value when populating from store. Setting this to `null` will
     * yield the selected record as the Combo's [value](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#property-value).
     */
    valueField: string|null
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#config-y)
     */
    y: number
    /**
     * The default action was performed (an item in the list was selected)
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {any} event.value The [value](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-valueField) of the selected record
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onAction: ((event: { source: Combo, value: any, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when this field's value changes.
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onChange: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fired when this field is [cleared](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#function-clear).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#event-clear)
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     */
    onClear: ((event: { source: Field|any }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * User typed into the field. Please note that the value attached to this event is the raw input field value and
     * not the combos value
     * @param {object} event Event object
     * @param {Combo} event.source The combo.
     * @param {string} event.value Raw input value
     * @param {Event} event.event The triggering DOM event if any.
     */
    onInput: ((event: { source: Combo, value: string, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * An item in the list was selected
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onSelect: ((event: { source: Combo, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * User clicked one of this field's [triggers](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers)
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {Widget} event.trigger The trigger activated by click or touch tap.
     */
    onTrigger: ((event: { source: Field|any, trigger: Widget }) => void)|string
}

/**
 * A combo box field used to select the link type for a [Dependency](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/DependencyModel) between two tasks.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker)
 */
export class DependencyTypePicker extends Combo {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/DependencyTypePicker#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<DependencyTypePickerConfig>} config
     */
    constructor(config?: Partial<DependencyTypePickerConfig>);
}

/**
 * Type with configuration options for [EffortField](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/EffortField) class.
 */
type EffortFieldConfig = InputFieldConfig & ContainerItemConfig & {
    type: 'effort'|'effortfield'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * Set to `true` to allow negative duration
     */
    allowNegative: boolean
    /**
     * Comma-separated list of units to allow in this field, e.g. "day,hour,year". Leave blank to allow all
     * valid units (the default)
     */
    allowedUnits: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autoComplete: string
    /**
     * Specify `true` to auto select field contents on focus
     */
    autoSelect: boolean
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is
     * not [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-readOnly). The trigger is available in the [triggers](#Core/widget/Field#property-triggers) object
     * under the name `clear`. May also be an object which configures the `clear`
     * [trigger](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers).
     */
    clearable: boolean|Partial<FieldTriggerConfig>
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The config controls how the value of nested items are handled when a parent container gets or sets its
     * [values](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-containValues)
     * @param {Field} field Field instance
     * @returns {boolean}
     */
    containValues: boolean|string|((field: Field) => boolean)
    /**
     * The configuration for additional items associated to this field. This is typically used to add contextual
     * fields related to a [checkbox](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Checkbox) or [radio button](#Core/widget/Radio). See
     * these classes for examples of nested fields.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-container)
     */
    container: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Partial<FieldContainerConfig>|FieldContainer
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The number of decimal places to allow. Defaults to no constraint.
     */
    decimalPrecision: number
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * Set to false to prevent user from editing the field. For TextFields it is basically the same as setting
     * [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-readOnly), but for PickerFields there is a distinction where it allows you to pick a value
     * but not to type one in the field.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-editable)
     */
    editable: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `false` to prevent field from being highlighted when on external value changes
     */
    highlightExternalChange: boolean
    /**
     * An optional string to display inside the input field as an overlay. This can be useful for displaying
     * a field's units.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-hint)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hint: string|((data: { source: Field, value: any }) => string)
    /**
     * This config is similar to [hint](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-hint) except that this config is used to display HTML content.
     * Since this can allow malicious content to be executed, be sure not to include user-entered data or to
     * encode such data (see [encodeHtml](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/StringHelper#function-encodeHtml-static)).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-hintHtml)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hintHtml: string|((data: { source: Field, value: any }) => string)
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set this config to `true` to always display items horizontally along with this field. This assigns an
     * [hbox](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/layout/Box) as the [layout](#Core/widget/Container#config-layout) to the
     * [container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-container).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-inline)
     */
    inline: boolean
    /**
     * Text alignment for the input field.
     */
    inputAlign: string
    /**
     * Sets custom attributes of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)
     */
    inputAttributes: object
    /**
     * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc).
     */
    inputType: string
    /**
     * The width to apply to the `&lt;input&gt;` element. If a number is specified, `px` will be used.
     */
    inputWidth: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * The delay in milliseconds to wait after the last keystroke before triggering a change event.
     * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
     * immediate feedback, change will still be triggered on blur).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-keyStrokeChangeDelay)
     */
    keyStrokeChangeDelay: number
    /**
     * Label, prepended to field
     */
    label: string
    /**
     * CSS class name or class names to add to any configured [label](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Labelable#config-label)
     */
    labelCls: string|object
    /**
     * Label position, either 'before' the field or 'above' the field
     */
    labelPosition: 'before'|'above'
    /**
     * The width to apply to the `&lt;label&gt;` element. If a number is specified, `px` will be used.
     */
    labelWidth: string|number
    /**
     * The labels to add either before or after the input field.
     * Each label may have the following properties:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-labels)
     */
    labels: object[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * The duration magnitude to use with the current unit value. Can be either an integer or a float value.
     * Both "," and "." are valid decimal separators.
     */
    magnitude: number
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * Max duration value (e.g. 10d)
     */
    max: string
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The max number of characters for the input field
     */
    maxLength: number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * Minimum duration value (e.g. 1d)
     */
    min: string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The min number of characters for the input field
     */
    minLength: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Name of the field which is used as a key to get/set values from/to the field.
     * Used prior to [ref](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-ref) and [id](#Core/widget/Widget#config-id) in
     * [Container.values](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-name)
     */
    name: string
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-owner)
     */
    owner: Widget
    /**
     * Text to display in empty field.
     */
    placeholder: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Makes the field unmodifiable by user action. The input area is not editable, and triggers
     * are unresponsive.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
     */
    required: boolean
    /**
     * If this field is not [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-readOnly), then setting this option means that pressing
     * the `ESCAPE` key after editing the field will revert the field to the value it had when
     * the user focused the field. If the field is *not* changed from when focused, the [clearable](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated.
     */
    revertOnEscape: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)
     */
    spellCheck: boolean
    /**
     * Step size for spin button clicks.
     */
    step: number
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tab index of the input field
     */
    tabIndex: number
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * The triggers to add either before or after the input field. Each property name is the reference by which
     * an instantiated Trigger Widget may be retrieved from the live `[triggers](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-triggers)
     */
    triggers: Record<string, FieldTriggerConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-ui)
     */
    ui: string|object
    /**
     * The duration unit to use with the current magnitude value.
     */
    unit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * When set to `true` the field will use short names of unit durations
     * (as returned by [getShortNameOfUnit](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DateHelper#function-getShortNameOfUnit-static)) when creating the
     * input field's display value.
     */
    useAbbreviation: boolean
    /**
     * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press
     * or similar.
     */
    validateOnInput: boolean
    /**
     * The `value` config may be set in Object form specifying two properties,
     * `magnitude`, a Number, and `unit`, a String.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-value)
     */
    value: Partial<DurationConfig>|string
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#config-y)
     */
    y: number
    /**
     * User performed default action (typed into this field or hit the triggers).
     * @param {object} event Event object
     * @param {Duration} event.value This field's value
     * @param {Duration} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state.
     * @param {Event} event.event The triggering DOM event if any.
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {DurationField} event.source This field
     */
    onAction: ((event: { value: Duration, oldValue: Duration, valid: boolean, event?: Event, userAction: boolean, source: DurationField }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when this field's value changes.
     * @param {object} event Event object
     * @param {Duration} event.value This field's value
     * @param {Duration} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state.
     * @param {Event} event.event The triggering DOM event if any.
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {DurationField} event.source This field
     */
    onChange: ((event: { value: Duration, oldValue: Duration, valid: boolean, event?: Event, userAction: boolean, source: DurationField }) => void)|string
    /**
     * Fired when this field is [cleared](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#function-clear).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#event-clear)
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     */
    onClear: ((event: { source: Field|any }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Fired when the user types into this field.
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {Event} event.event The triggering DOM event
     */
    onInput: ((event: { source: Field|any, value: string|number|boolean|any, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * User clicked one of this field's [triggers](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers)
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {Widget} event.trigger The trigger activated by click or touch tap.
     */
    onTrigger: ((event: { source: Field|any, trigger: Widget }) => void)|string
}

/**
 * A specialized field allowing a user to also specify duration unit when editing the effort value.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField)
 */
export class EffortField extends DurationField {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EffortField#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<EffortFieldConfig>} config
     */
    constructor(config?: Partial<EffortFieldConfig>);
}

/**
 * Type with configuration options for [EndDateField](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/EndDateField) class.
 */
type EndDateFieldConfig = InputFieldConfig & ContainerItemConfig & {
    type: 'enddatefield'|'enddate'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * By default PickerField's picker is transient, and will [hidePicker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/PickerField#function-hidePicker) when the user clicks or
     * taps outside or when focus moves outside picker.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-autoClose)
     * @deprecated This will be removed in 6.0
     */
    autoClose: boolean
    /**
     * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autoComplete: string
    /**
     * Configure as `true` to have the picker expand upon focus enter.
     */
    autoExpand: boolean
    /**
     * Specify `true` to auto select field contents on focus
     */
    autoSelect: boolean
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is
     * not [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-readOnly). The trigger is available in the [triggers](#Core/widget/Field#property-triggers) object
     * under the name `clear`. May also be an object which configures the `clear`
     * [trigger](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers).
     */
    clearable: boolean|Partial<FieldTriggerConfig>
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The config controls how the value of nested items are handled when a parent container gets or sets its
     * [values](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-containValues)
     * @param {Field} field Field instance
     * @returns {boolean}
     */
    containValues: boolean|string|((field: Field) => boolean)
    /**
     * The configuration for additional items associated to this field. This is typically used to add contextual
     * fields related to a [checkbox](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Checkbox) or [radio button](#Core/widget/Radio). See
     * these classes for examples of nested fields.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-container)
     */
    container: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Partial<FieldContainerConfig>|FieldContainer
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * User can edit text in text field (otherwise only pick from attached picker)
     */
    editable: boolean
    /**
     * The Event model defining the calendar to be used by the field.
     */
    eventRecord: EventModel
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Format for date displayed in field. Defaults to using long date format, as defined by current locale (`L`)
     */
    format: string
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `false` to prevent field from being highlighted when on external value changes
     */
    highlightExternalChange: boolean
    /**
     * An optional string to display inside the input field as an overlay. This can be useful for displaying
     * a field's units.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-hint)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hint: string|((data: { source: Field, value: any }) => string)
    /**
     * This config is similar to [hint](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-hint) except that this config is used to display HTML content.
     * Since this can allow malicious content to be executed, be sure not to include user-entered data or to
     * encode such data (see [encodeHtml](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/StringHelper#function-encodeHtml-static)).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-hintHtml)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hintHtml: string|((data: { source: Field, value: any }) => string)
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set this config to `true` to always display items horizontally along with this field. This assigns an
     * [hbox](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/layout/Box) as the [layout](#Core/widget/Container#config-layout) to the
     * [container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-container).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-inline)
     */
    inline: boolean
    /**
     * Text alignment for the input field.
     */
    inputAlign: string
    /**
     * Sets custom attributes of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)
     */
    inputAttributes: object
    /**
     * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc).
     */
    inputType: string
    /**
     * The width to apply to the `&lt;input&gt;` element. If a number is specified, `px` will be used.
     */
    inputWidth: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * A flag which indicates what time should be used for selected date.
     * `false` by default which means time is reset to midnight.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-keepTime)
     */
    keepTime: boolean|Date|string
    /**
     * The delay in milliseconds to wait after the last keystroke before triggering a change event.
     * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
     * immediate feedback, change will still be triggered on blur).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-keyStrokeChangeDelay)
     */
    keyStrokeChangeDelay: number
    /**
     * Label, prepended to field
     */
    label: string
    /**
     * CSS class name or class names to add to any configured [label](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Labelable#config-label)
     */
    labelCls: string|object
    /**
     * Label position, either 'before' the field or 'above' the field
     */
    labelPosition: 'before'|'above'
    /**
     * The width to apply to the `&lt;label&gt;` element. If a number is specified, `px` will be used.
     */
    labelWidth: string|number
    /**
     * The labels to add either before or after the input field.
     * Each label may have the following properties:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-labels)
     */
    labels: object[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * Max value
     */
    max: string|Date
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The max number of characters for the input field
     */
    maxLength: number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * Min value
     */
    min: string|Date
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The min number of characters for the input field
     */
    minLength: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Name of the field which is used as a key to get/set values from/to the field.
     * Used prior to [ref](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-ref) and [id](#Core/widget/Widget#config-id) in
     * [Container.values](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-name)
     */
    name: string
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-owner)
     */
    owner: Widget
    /**
     * A config object used to configure the [datePicker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/DatePicker).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-picker)
     */
    picker: Partial<DatePickerConfig>
    /**
     * The name of the element property to which the picker should size and align itself.
     */
    pickerAlignElement: string
    /**
     * Format for date in the [picker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/DateField#config-picker). Uses localized format per default
     */
    pickerFormat: string
    /**
     * Text to display in empty field.
     */
    placeholder: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Project model calendar of which should be used by the field.
     */
    project: ProjectModel
    /**
     * Makes the field unmodifiable by user action. The input area is not editable, and triggers
     * are unresponsive.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
     */
    required: boolean
    /**
     * If this field is not [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-readOnly), then setting this option means that pressing
     * the `ESCAPE` key after editing the field will revert the field to the value it had when
     * the user focused the field. If the field is *not* changed from when focused, the [clearable](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated.
     */
    revertOnEscape: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)
     */
    spellCheck: boolean
    /**
     * Time increment duration value. If specified, `forward` and `back` triggers are displayed.
     * The value is taken to be a string consisting of the numeric magnitude and the units.
     * The units may be a recognised unit abbreviation of this locale or the full local unit name.
     * For example `'1d'` or `'1w'` or `'1 week'`. This may be specified as an object containing
     * two properties: `magnitude`, a Number, and `unit`, a String
     */
    step: string|number|Partial<DurationConfig>
    /**
     * A flag which indicates whether the date parsing should be strict - meaning if the date
     * is missing a year/month/day part - parsing fails.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-strictParsing)
     */
    strictParsing: boolean
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tab index of the input field
     */
    tabIndex: number
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * The triggers to add either before or after the input field. Each property name is the reference by which
     * an instantiated Trigger Widget may be retrieved from the live `[triggers](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-triggers)
     */
    triggers: Record<string, FieldTriggerConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-ui)
     */
    ui: string|object
    /**
     * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press
     * or similar.
     */
    validateOnInput: boolean
    /**
     * Value, which can be a Date or a string. If a string is specified, it will be converted using the
     * specified [format](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/DateField#config-format)
     */
    value: string|Date
    /**
     * The week start day in the [picker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/DateField#config-picker), 0 meaning Sunday, 6 meaning Saturday.
     * Uses localized value per default.
     */
    weekStartDay: number
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#config-y)
     */
    y: number
    /**
     * User performed default action (typed into this field).
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {Model} event.record Selected record. Available for fields with records selection functionality
     * @param {Model[]} event.records Selected records as an array. Available for fields with records selection functionality
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onAction: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, record: Model, records: Model[], userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when this field's value changes.
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onChange: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fired when this field is [cleared](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#function-clear).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#event-clear)
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     */
    onClear: ((event: { source: Field|any }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Fired when the user types into this field.
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {Event} event.event The triggering DOM event
     */
    onInput: ((event: { source: Field|any, value: string|number|boolean|any, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * User clicked one of this field's [triggers](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers)
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {Widget} event.trigger The trigger activated by click or touch tap.
     */
    onTrigger: ((event: { source: Field|any, trigger: Widget }) => void)|string
}

/**
 * Date field widget (text field + date picker) to be used together with Scheduling Engine.
 * This field adjusts time to the latest possible time of the day based on either:
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField)
 */
export class EndDateField extends DateField {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/EndDateField#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<EndDateFieldConfig>} config
     */
    constructor(config?: Partial<EndDateFieldConfig>);
}

/**
 * Type with configuration options for [GanttTaskEditor](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/GanttTaskEditor) class.
 */
type GanttTaskEditorConfig = {
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * By default, a Popup is transient, and will [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) when the user clicks or
     * taps outside its owned widgets and when focus moves outside its owned widgets.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-autoClose)
     */
    autoClose: boolean
    /**
     * Auto show flag for Popup.
     * If truthy then Popup is shown automatically upon hover.
     */
    autoShow: boolean
    /**
     * Update assigned [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-bbar)
     */
    bbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-bodyCls)
     */
    bodyCls: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * A message to be shown when Engine is performing task scheduling. Localizable text is 'L{calculateMask}'. Disabled by default.
     */
    calculateMask: string|null
    /**
     * A delay before the [mask](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-calculateMask) becomes visible. This config is needed to avoid UI blinking when calculating is relatively fast.
     * Note, the mask is applied immediately and blocks the content anyway. However if the delay is set, it will be transparent. If `null`, the mask is visible immediately.
     */
    calculateMaskDelay: number|null
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Show a tool in the header to close this Popup, and allow `ESC` close it.
     * The tool is available in the [tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Toolable#property-tools) object
     * under the name `close`. It uses the CSS class `b-popup-close` to apply a
     * default close icon. This may be customized with your own CSS rules.
     */
    closable: boolean
    /**
     * The action to take when calling the [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) method.
     * By default, the popup is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-closeAction)
     */
    closeAction: 'hide'|'destroy'
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-cls)
     */
    cls: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-collapsible)
     */
    collapsible: boolean|Partial<PanelCollapserConfig>|Partial<PanelCollapserOverlayConfig>
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked tasks. Defaults to Gantt `dependencyIdField`
     */
    dependencyIdField: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * The decimal precision to use for Duration field / columns, normally provided by the owning Scheduler´s [durationDisplayPrecision](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-durationDisplayPrecision)
     */
    durationDisplayPrecision: number
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * By default a Popup is focused when it is shown.
     * Configure this as `false` to prevent automatic focus on show.
     */
    focusOnToFront: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-footer)
     */
    footer: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * DOM element to attach popup.
     */
    forElement: HTMLElement
    /**
     * A config [object](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-header)
     */
    header: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * Show a tool in the header to maximize this popup
     */
    maximizable: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized: boolean
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * Optionally show an opaque mask below this Popup when shown.
     * Configure this as `true` to show the mask.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-modal)
     */
    modal: boolean|{
        closeOnMaskTap?: boolean
        transparent?: boolean
    }
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover
     */
    showOnClick: boolean
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-stateId)
     */
    stateId: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/schedulerpro/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-stateProvider)
     */
    stateProvider: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-stateful)
     */
    stateful: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-statefulEvents)
     */
    statefulEvents: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar). If the value assigned to a strip is an array, it is converted to
     * the toolbar's [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-strips)
     */
    strips: Record<string, Partial<ContainerItemConfig>>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-tbar)
     */
    tbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display in the header. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-title)
     */
    title: string
    /**
     * The [tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-tools)
     */
    tools: Record<string, Partial<ToolConfig>>
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * By default, tabbing within a Popup is circular - that is it does not exit.
     * Configure this as `false` to allow tabbing out of the Popup.
     */
    trapFocus: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#config-y)
     */
    y: number
    /**
     * Fired when the [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Popup} event.source This Popup
     */
    onBeforeClose: ((event: { source: Popup }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onCollapse: ((event: { source: Panel }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onExpand: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Tool} event.source This Panel.
     * @param {Tool} event.tool The tool which is being clicked.
     */
    onToolClick: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * A subclass of [TaskEditorBase](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase) for Gantt projects which SchedulerPro can handle as well.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor)
 */
export class GanttTaskEditor extends TaskEditorBase {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<GanttTaskEditorConfig>} config
     */
    constructor(config?: Partial<GanttTaskEditorConfig>);
}

/**
 * Type with configuration options for [ModelCombo](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/ModelCombo) class.
 */
type ModelComboConfig = InputFieldConfig & ContainerItemConfig & {
    type: 'modelcombo'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * By default PickerField's picker is transient, and will [hidePicker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/PickerField#function-hidePicker) when the user clicks or
     * taps outside or when focus moves outside picker.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-autoClose)
     * @deprecated This will be removed in 6.0
     */
    autoClose: boolean
    /**
     * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autoComplete: string
    /**
     * Configure as `true` to have the picker expand upon focus enter.
     */
    autoExpand: boolean
    /**
     * Specify `true` to auto select field contents on focus
     */
    autoSelect: boolean
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Configure as `true` to force case matching when filtering the dropdown list based upon the typed value.
     */
    caseSensitive: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * A config object to configure the [ChipView](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/ChipView) to display the
     * selected value set when [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-chipView)
     */
    chipView: Partial<ChipViewConfig>
    /**
     * `true` to clear value typed to a multiselect combo when picker is collapsed
     */
    clearTextOnPickerHide: boolean
    /**
     * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is
     * not [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-readOnly). The trigger is available in the [triggers](#Core/widget/Field#property-triggers) object
     * under the name `clear`. May also be an object which configures the `clear`
     * [trigger](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers).
     */
    clearable: boolean|Partial<FieldTriggerConfig>
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The config controls how the value of nested items are handled when a parent container gets or sets its
     * [values](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-containValues)
     * @param {Field} field Field instance
     * @returns {boolean}
     */
    containValues: boolean|string|((field: Field) => boolean)
    /**
     * The configuration for additional items associated to this field. This is typically used to add contextual
     * fields related to a [checkbox](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Checkbox) or [radio button](#Core/widget/Radio). See
     * these classes for examples of nested fields.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-container)
     */
    container: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Partial<FieldContainerConfig>|FieldContainer
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * If configured as `true`, this means that when an unmatched string is typed into the
     * combo's input field, and `ENTER`, or the [multiValueSeparator](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiValueSeparator) is typed,
     * a new record will be created using the typed string as the [displayField](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-displayField).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-createOnUnmatched)
     * @param {string} name Record name
     * @param {Combo} combo Combo instance
     * @returns {Model} New record
     */
    createOnUnmatched: ((name: string, combo: Combo) => Model)|string|boolean
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Field used for item text when populating from store
     */
    displayField: string
    /**
     * Template function that can be used to customize the displayed value
     * @param {Model} record The record to provide a textual value for
     * @param {Combo} combo A reference to this Combo
     * @returns {string|void}
     */
    displayValueRenderer: (record: Model, combo: Combo) => string|void
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * User can edit text in text field (otherwise only pick from attached picker)
     */
    editable: boolean
    /**
     * Text to display in the drop down when there are no items in the underlying store
     */
    emptyText: string
    /**
     * A function which creates an array of values for the {#config-filterParamName} to pass
     * any filters to the server upon load.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-encodeFilterParams)
     * @param {<Object>} filters filters
     * @returns {<Object>} array of values
     */
    encodeFilterParams: (filters: object[]) => object[]
    /**
     * If `false`, filtering will be triggered once you exceed [minChars](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-minChars). To filter only when
     * hitting Enter key, set this to `true`;
     */
    filterOnEnter: boolean
    /**
     * The name of an operator type as implemented in [operator](https://bryntum.com/products/schedulerpro/docs/api/Core/util/CollectionFilter#config-operator)
     * to use when filtering the dropdown list based upon the typed value.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-filterOperator)
     */
    filterOperator: '='|'!='|'>'|'>='|'<'|'<='|'*'|'startsWith'|'endsWith'|'isIncludedIn'
    /**
     * If the dropdown is to be populated with a filtered query to a remote server, specify the
     * name of the parameter to pass the typed string here. By default, the string is simply sent
     * as the value of the parameter. For special encoding, configure the combo with [encodeFilterParams](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-encodeFilterParams)
     */
    filterParamName: string
    /**
     * When [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`, you may configure `filterSelected` as
     * `true` to hide items in the dropdown when they are added to the selection.
     * It will appear as if the requested item has "moved" into the field's
     * [ChipView](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-chipView).
     */
    filterSelected: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * By default, the picker is hidden on selection in single select mode, and
     * remains to allow more selections when [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * Setting this to a `Boolean` value can override that default.
     */
    hidePickerOnSelect: boolean
    /**
     * Configure as `true` to hide the expand trigger. This is automatically set to `true` if
     * remote filtering is enabled by setting the [filterParamName](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-filterParamName) config.
     */
    hideTrigger: boolean
    /**
     * Specify `false` to prevent field from being highlighted when on external value changes
     */
    highlightExternalChange: boolean
    /**
     * An optional string to display inside the input field as an overlay. This can be useful for displaying
     * a field's units.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-hint)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hint: string|((data: { source: Field, value: any }) => string)
    /**
     * This config is similar to [hint](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-hint) except that this config is used to display HTML content.
     * Since this can allow malicious content to be executed, be sure not to include user-entered data or to
     * encode such data (see [encodeHtml](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/StringHelper#function-encodeHtml-static)).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-hintHtml)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hintHtml: string|((data: { source: Field, value: any }) => string)
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set this config to `true` to always display items horizontally along with this field. This assigns an
     * [hbox](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/layout/Box) as the [layout](#Core/widget/Container#config-layout) to the
     * [container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-container).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-inline)
     */
    inline: boolean
    /**
     * Configure this as `true` to render the dropdown list as a permanently visible list
     * in the document flow immediately below the input area instead of as a popup.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-inlinePicker)
     */
    inlinePicker: boolean
    /**
     * Text alignment for the input field.
     */
    inputAlign: string
    /**
     * Sets custom attributes of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)
     */
    inputAttributes: object
    /**
     * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc).
     */
    inputType: string
    /**
     * The width to apply to the `&lt;input&gt;` element. If a number is specified, `px` will be used.
     */
    inputWidth: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * Rows to display in the dropdown (list items).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-items)
     */
    items: object[]|string[]|object
    /**
     * The delay in milliseconds to wait after the last keystroke before triggering a change event.
     * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
     * immediate feedback, change will still be triggered on blur).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-keyStrokeChangeDelay)
     */
    keyStrokeChangeDelay: number
    /**
     * The delay in milliseconds to wait after the last keystroke before filtering the list.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-keyStrokeFilterDelay)
     */
    keyStrokeFilterDelay: number
    /**
     * Label, prepended to field
     */
    label: string
    /**
     * CSS class name or class names to add to any configured [label](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Labelable#config-label)
     */
    labelCls: string|object
    /**
     * Label position, either 'before' the field or 'above' the field
     */
    labelPosition: 'before'|'above'
    /**
     * The width to apply to the `&lt;label&gt;` element. If a number is specified, `px` will be used.
     */
    labelWidth: string|number
    /**
     * The labels to add either before or after the input field.
     * Each label may have the following properties:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-labels)
     */
    labels: object[]
    /**
     * CSS class to add to picker
     */
    listCls: string
    /**
     * Template string used to render the list items in the dropdown list
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-listItemTpl)
     * @param {Model} record The record representing the item being rendered
     * @returns {string|void}
     */
    listItemTpl: (record: Model) => string|void
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The max number of characters for the input field
     */
    maxLength: number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The minimum string length to trigger the filtering, only relevant when [editable](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-editable) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-minChars)
     */
    minChars: number
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The min number of characters for the input field
     */
    minLength: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Configure as `true` to allow selection of multiple values from the dropdown list.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-multiSelect)
     */
    multiSelect: boolean
    /**
     * A key value which, when typed in a [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) Combo, selects the
     * currently active item in the picker, and clears the input field ready for another
     * match to be typed.
     */
    multiValueSeparator: string
    /**
     * Name of the field which is used as a key to get/set values from/to the field.
     * Used prior to [ref](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-ref) and [id](#Core/widget/Widget#config-id) in
     * [Container.values](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-name)
     */
    name: string
    /**
     * This implies that the picker will display an anchor pointer, but also means that the picker will align closer
     * to the input field so that the pointer pierces the [pickerAlignElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-pickerAlignElement)
     */
    overlayAnchor: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-owner)
     */
    owner: Widget
    /**
     * Configuration object for the [picker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/List) on initialization. Returns the
     * [picker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/List) instance at runtime.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-picker)
     */
    picker: Partial<ListConfig>|List
    /**
     * The name of the element property to which the picker should size and align itself.
     */
    pickerAlignElement: string
    /**
     * Width of picker, defaults to this combo's [pickerAlignElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-pickerAlignElement) width
     */
    pickerWidth: number
    /**
     * Text to display in empty field.
     */
    placeholder: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Optionally a [Filter](https://bryntum.com/products/schedulerpro/docs/api/Core/util/CollectionFilter) config object which the combo should use for
     * filtering using the typed value.
     * This may use a `filterBy` property to test its `value` against any field in the passed record.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-primaryFilter)
     */
    primaryFilter: Partial<CollectionFilterConfig>
    /**
     * Makes the field unmodifiable by user action. The input area is not editable, and triggers
     * are unresponsive.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
     */
    required: boolean
    /**
     * If this field is not [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-readOnly), then setting this option means that pressing
     * the `ESCAPE` key after editing the field will revert the field to the value it had when
     * the user focused the field. If the field is *not* changed from when focused, the [clearable](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated.
     */
    revertOnEscape: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)
     */
    spellCheck: boolean
    /**
     * Store used to populate items. Also accepts a Store config object
     */
    store: Store|Partial<StoreConfig>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tab index of the input field
     */
    tabIndex: number
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * How to query the store upon click of the expand trigger. Specify one of these values:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-triggerAction)
     */
    triggerAction: 'all'|'last'|null
    /**
     * The triggers to add either before or after the input field. Each property name is the reference by which
     * an instantiated Trigger Widget may be retrieved from the live `[triggers](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-triggers)
     */
    triggers: Record<string, FieldTriggerConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-ui)
     */
    ui: string|object
    /**
     * `true` to cause the field to be in an invalid state while the typed filter string does not match a record in the store.
     */
    validateFilter: boolean
    /**
     * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press
     * or similar.
     */
    validateOnInput: boolean
    /**
     * The initial value of this Combo box. In single select mode (default) it's a simple string value, for
     * [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) mode, it should be an array of record ids.
     */
    value: string|number|string[]|number[]
    /**
     * Field used for item value when populating from store. Setting this to `null` will
     * yield the selected record as the Combo's [value](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#property-value).
     */
    valueField: string|null
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#config-y)
     */
    y: number
    /**
     * The default action was performed (an item in the list was selected)
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {any} event.value The [value](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-valueField) of the selected record
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onAction: ((event: { source: Combo, value: any, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when this field's value changes.
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onChange: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fired when this field is [cleared](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#function-clear).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#event-clear)
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     */
    onClear: ((event: { source: Field|any }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * User typed into the field. Please note that the value attached to this event is the raw input field value and
     * not the combos value
     * @param {object} event Event object
     * @param {Combo} event.source The combo.
     * @param {string} event.value Raw input value
     * @param {Event} event.event The triggering DOM event if any.
     */
    onInput: ((event: { source: Combo, value: string, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * An item in the list was selected
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onSelect: ((event: { source: Combo, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * User clicked one of this field's [triggers](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers)
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {Widget} event.trigger The trigger activated by click or touch tap.
     */
    onTrigger: ((event: { source: Field|any, trigger: Widget }) => void)|string
}

/**
 * A special [Combo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo) subclass returning a [Model](#Core/data/Model) instance from its store as the value
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo)
 */
export class ModelCombo extends Combo {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/ModelCombo#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ModelComboConfig>} config
     */
    constructor(config?: Partial<ModelComboConfig>);
}

/**
 * Type with configuration options for [SchedulerTaskEditor](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/SchedulerTaskEditor) class.
 */
type SchedulerTaskEditorConfig = {
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * By default, a Popup is transient, and will [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) when the user clicks or
     * taps outside its owned widgets and when focus moves outside its owned widgets.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-autoClose)
     */
    autoClose: boolean
    /**
     * Auto show flag for Popup.
     * If truthy then Popup is shown automatically upon hover.
     */
    autoShow: boolean
    /**
     * Update assigned [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-bbar)
     */
    bbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-bodyCls)
     */
    bodyCls: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * A message to be shown when Engine is performing task scheduling. Localizable text is 'L{calculateMask}'. Disabled by default.
     */
    calculateMask: string|null
    /**
     * A delay before the [mask](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-calculateMask) becomes visible. This config is needed to avoid UI blinking when calculating is relatively fast.
     * Note, the mask is applied immediately and blocks the content anyway. However if the delay is set, it will be transparent. If `null`, the mask is visible immediately.
     */
    calculateMaskDelay: number|null
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Show a tool in the header to close this Popup, and allow `ESC` close it.
     * The tool is available in the [tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Toolable#property-tools) object
     * under the name `close`. It uses the CSS class `b-popup-close` to apply a
     * default close icon. This may be customized with your own CSS rules.
     */
    closable: boolean
    /**
     * The action to take when calling the [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) method.
     * By default, the popup is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-closeAction)
     */
    closeAction: 'hide'|'destroy'
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-cls)
     */
    cls: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-collapsible)
     */
    collapsible: boolean|Partial<PanelCollapserConfig>|Partial<PanelCollapserOverlayConfig>
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked tasks. Defaults to Gantt `dependencyIdField`
     */
    dependencyIdField: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * The decimal precision to use for Duration field / columns, normally provided by the owning Scheduler´s [durationDisplayPrecision](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-durationDisplayPrecision)
     */
    durationDisplayPrecision: number
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * By default a Popup is focused when it is shown.
     * Configure this as `false` to prevent automatic focus on show.
     */
    focusOnToFront: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-footer)
     */
    footer: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * DOM element to attach popup.
     */
    forElement: HTMLElement
    /**
     * A config [object](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-header)
     */
    header: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * Show a tool in the header to maximize this popup
     */
    maximizable: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized: boolean
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * Optionally show an opaque mask below this Popup when shown.
     * Configure this as `true` to show the mask.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-modal)
     */
    modal: boolean|{
        closeOnMaskTap?: boolean
        transparent?: boolean
    }
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover
     */
    showOnClick: boolean
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-stateId)
     */
    stateId: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/schedulerpro/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-stateProvider)
     */
    stateProvider: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-stateful)
     */
    stateful: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-statefulEvents)
     */
    statefulEvents: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar). If the value assigned to a strip is an array, it is converted to
     * the toolbar's [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-strips)
     */
    strips: Record<string, Partial<ContainerItemConfig>>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-tbar)
     */
    tbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display in the header. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-title)
     */
    title: string
    /**
     * The [tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-tools)
     */
    tools: Record<string, Partial<ToolConfig>>
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * By default, tabbing within a Popup is circular - that is it does not exit.
     * Configure this as `false` to allow tabbing out of the Popup.
     */
    trapFocus: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#config-y)
     */
    y: number
    /**
     * Fired when the [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Popup} event.source This Popup
     */
    onBeforeClose: ((event: { source: Popup }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onCollapse: ((event: { source: Panel }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onExpand: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Tool} event.source This Panel.
     * @param {Tool} event.tool The tool which is being clicked.
     */
    onToolClick: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * [TaskEditorBase](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase) subclass for SchedulerPro projects. Provides a UI to edit tasks in a
 * dialog.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor)
 */
export class SchedulerTaskEditor extends TaskEditorBase {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<SchedulerTaskEditorConfig>} config
     */
    constructor(config?: Partial<SchedulerTaskEditorConfig>);
}

/**
 * Type with configuration options for [SchedulingDirectionPicker](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/SchedulingDirectionPicker) class.
 */
type SchedulingDirectionPickerConfig = InputFieldConfig & ContainerItemConfig & {
    type: 'schedulingdirectionpicker'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * By default PickerField's picker is transient, and will [hidePicker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/PickerField#function-hidePicker) when the user clicks or
     * taps outside or when focus moves outside picker.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-autoClose)
     * @deprecated This will be removed in 6.0
     */
    autoClose: boolean
    /**
     * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autoComplete: string
    /**
     * Configure as `true` to have the picker expand upon focus enter.
     */
    autoExpand: boolean
    /**
     * Specify `true` to auto select field contents on focus
     */
    autoSelect: boolean
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Configure as `true` to force case matching when filtering the dropdown list based upon the typed value.
     */
    caseSensitive: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * A config object to configure the [ChipView](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/ChipView) to display the
     * selected value set when [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-chipView)
     */
    chipView: Partial<ChipViewConfig>
    /**
     * `true` to clear value typed to a multiselect combo when picker is collapsed
     */
    clearTextOnPickerHide: boolean
    /**
     * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is
     * not [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-readOnly). The trigger is available in the [triggers](#Core/widget/Field#property-triggers) object
     * under the name `clear`. May also be an object which configures the `clear`
     * [trigger](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers).
     */
    clearable: boolean|Partial<FieldTriggerConfig>
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The config controls how the value of nested items are handled when a parent container gets or sets its
     * [values](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-containValues)
     * @param {Field} field Field instance
     * @returns {boolean}
     */
    containValues: boolean|string|((field: Field) => boolean)
    /**
     * The configuration for additional items associated to this field. This is typically used to add contextual
     * fields related to a [checkbox](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Checkbox) or [radio button](#Core/widget/Radio). See
     * these classes for examples of nested fields.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-container)
     */
    container: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Partial<FieldContainerConfig>|FieldContainer
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * If configured as `true`, this means that when an unmatched string is typed into the
     * combo's input field, and `ENTER`, or the [multiValueSeparator](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiValueSeparator) is typed,
     * a new record will be created using the typed string as the [displayField](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-displayField).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-createOnUnmatched)
     * @param {string} name Record name
     * @param {Combo} combo Combo instance
     * @returns {Model} New record
     */
    createOnUnmatched: ((name: string, combo: Combo) => Model)|string|boolean
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Field used for item text when populating from store
     */
    displayField: string
    /**
     * Template function that can be used to customize the displayed value
     * @param {Model} record The record to provide a textual value for
     * @param {Combo} combo A reference to this Combo
     * @returns {string|void}
     */
    displayValueRenderer: (record: Model, combo: Combo) => string|void
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * User can edit text in text field (otherwise only pick from attached picker)
     */
    editable: boolean
    /**
     * Text to display in the drop down when there are no items in the underlying store
     */
    emptyText: string
    /**
     * A function which creates an array of values for the {#config-filterParamName} to pass
     * any filters to the server upon load.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-encodeFilterParams)
     * @param {<Object>} filters filters
     * @returns {<Object>} array of values
     */
    encodeFilterParams: (filters: object[]) => object[]
    /**
     * If `false`, filtering will be triggered once you exceed [minChars](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-minChars). To filter only when
     * hitting Enter key, set this to `true`;
     */
    filterOnEnter: boolean
    /**
     * The name of an operator type as implemented in [operator](https://bryntum.com/products/schedulerpro/docs/api/Core/util/CollectionFilter#config-operator)
     * to use when filtering the dropdown list based upon the typed value.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-filterOperator)
     */
    filterOperator: '='|'!='|'>'|'>='|'<'|'<='|'*'|'startsWith'|'endsWith'|'isIncludedIn'
    /**
     * If the dropdown is to be populated with a filtered query to a remote server, specify the
     * name of the parameter to pass the typed string here. By default, the string is simply sent
     * as the value of the parameter. For special encoding, configure the combo with [encodeFilterParams](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-encodeFilterParams)
     */
    filterParamName: string
    /**
     * When [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`, you may configure `filterSelected` as
     * `true` to hide items in the dropdown when they are added to the selection.
     * It will appear as if the requested item has "moved" into the field's
     * [ChipView](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-chipView).
     */
    filterSelected: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * By default, the picker is hidden on selection in single select mode, and
     * remains to allow more selections when [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * Setting this to a `Boolean` value can override that default.
     */
    hidePickerOnSelect: boolean
    /**
     * Configure as `true` to hide the expand trigger. This is automatically set to `true` if
     * remote filtering is enabled by setting the [filterParamName](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-filterParamName) config.
     */
    hideTrigger: boolean
    /**
     * Specify `false` to prevent field from being highlighted when on external value changes
     */
    highlightExternalChange: boolean
    /**
     * An optional string to display inside the input field as an overlay. This can be useful for displaying
     * a field's units.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-hint)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hint: string|((data: { source: Field, value: any }) => string)
    /**
     * This config is similar to [hint](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-hint) except that this config is used to display HTML content.
     * Since this can allow malicious content to be executed, be sure not to include user-entered data or to
     * encode such data (see [encodeHtml](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/StringHelper#function-encodeHtml-static)).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-hintHtml)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hintHtml: string|((data: { source: Field, value: any }) => string)
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set this config to `true` to always display items horizontally along with this field. This assigns an
     * [hbox](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/layout/Box) as the [layout](#Core/widget/Container#config-layout) to the
     * [container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-container).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-inline)
     */
    inline: boolean
    /**
     * Configure this as `true` to render the dropdown list as a permanently visible list
     * in the document flow immediately below the input area instead of as a popup.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-inlinePicker)
     */
    inlinePicker: boolean
    /**
     * Text alignment for the input field.
     */
    inputAlign: string
    /**
     * Sets custom attributes of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)
     */
    inputAttributes: object
    /**
     * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc).
     */
    inputType: string
    /**
     * The width to apply to the `&lt;input&gt;` element. If a number is specified, `px` will be used.
     */
    inputWidth: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * Rows to display in the dropdown (list items).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-items)
     */
    items: object[]|string[]|object
    /**
     * The delay in milliseconds to wait after the last keystroke before triggering a change event.
     * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
     * immediate feedback, change will still be triggered on blur).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-keyStrokeChangeDelay)
     */
    keyStrokeChangeDelay: number
    /**
     * The delay in milliseconds to wait after the last keystroke before filtering the list.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-keyStrokeFilterDelay)
     */
    keyStrokeFilterDelay: number
    /**
     * Label, prepended to field
     */
    label: string
    /**
     * CSS class name or class names to add to any configured [label](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Labelable#config-label)
     */
    labelCls: string|object
    /**
     * Label position, either 'before' the field or 'above' the field
     */
    labelPosition: 'before'|'above'
    /**
     * The width to apply to the `&lt;label&gt;` element. If a number is specified, `px` will be used.
     */
    labelWidth: string|number
    /**
     * The labels to add either before or after the input field.
     * Each label may have the following properties:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-labels)
     */
    labels: object[]
    /**
     * CSS class to add to picker
     */
    listCls: string
    /**
     * Template string used to render the list items in the dropdown list
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-listItemTpl)
     * @param {Model} record The record representing the item being rendered
     * @returns {string|void}
     */
    listItemTpl: (record: Model) => string|void
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The max number of characters for the input field
     */
    maxLength: number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The minimum string length to trigger the filtering, only relevant when [editable](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-editable) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-minChars)
     */
    minChars: number
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The min number of characters for the input field
     */
    minLength: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Configure as `true` to allow selection of multiple values from the dropdown list.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-multiSelect)
     */
    multiSelect: boolean
    /**
     * A key value which, when typed in a [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) Combo, selects the
     * currently active item in the picker, and clears the input field ready for another
     * match to be typed.
     */
    multiValueSeparator: string
    /**
     * Name of the field which is used as a key to get/set values from/to the field.
     * Used prior to [ref](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-ref) and [id](#Core/widget/Widget#config-id) in
     * [Container.values](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-name)
     */
    name: string
    /**
     * This implies that the picker will display an anchor pointer, but also means that the picker will align closer
     * to the input field so that the pointer pierces the [pickerAlignElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-pickerAlignElement)
     */
    overlayAnchor: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-owner)
     */
    owner: Widget
    /**
     * Configuration object for the [picker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/List) on initialization. Returns the
     * [picker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/List) instance at runtime.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-picker)
     */
    picker: Partial<ListConfig>|List
    /**
     * The name of the element property to which the picker should size and align itself.
     */
    pickerAlignElement: string
    /**
     * Width of picker, defaults to this combo's [pickerAlignElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-pickerAlignElement) width
     */
    pickerWidth: number
    /**
     * Text to display in empty field.
     */
    placeholder: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Optionally a [Filter](https://bryntum.com/products/schedulerpro/docs/api/Core/util/CollectionFilter) config object which the combo should use for
     * filtering using the typed value.
     * This may use a `filterBy` property to test its `value` against any field in the passed record.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-primaryFilter)
     */
    primaryFilter: Partial<CollectionFilterConfig>
    /**
     * Makes the field unmodifiable by user action. The input area is not editable, and triggers
     * are unresponsive.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
     */
    required: boolean
    /**
     * If this field is not [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-readOnly), then setting this option means that pressing
     * the `ESCAPE` key after editing the field will revert the field to the value it had when
     * the user focused the field. If the field is *not* changed from when focused, the [clearable](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated.
     */
    revertOnEscape: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)
     */
    spellCheck: boolean
    /**
     * Store used to populate items. Also accepts a Store config object
     */
    store: Store|Partial<StoreConfig>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tab index of the input field
     */
    tabIndex: number
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * How to query the store upon click of the expand trigger. Specify one of these values:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-triggerAction)
     */
    triggerAction: 'all'|'last'|null
    /**
     * The triggers to add either before or after the input field. Each property name is the reference by which
     * an instantiated Trigger Widget may be retrieved from the live `[triggers](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-triggers)
     */
    triggers: Record<string, FieldTriggerConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-ui)
     */
    ui: string|object
    /**
     * `true` to cause the field to be in an invalid state while the typed filter string does not match a record in the store.
     */
    validateFilter: boolean
    /**
     * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press
     * or similar.
     */
    validateOnInput: boolean
    /**
     * The initial value of this Combo box. In single select mode (default) it's a simple string value, for
     * [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) mode, it should be an array of record ids.
     */
    value: string|number|string[]|number[]
    /**
     * Field used for item value when populating from store. Setting this to `null` will
     * yield the selected record as the Combo's [value](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#property-value).
     */
    valueField: string|null
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#config-y)
     */
    y: number
    /**
     * The default action was performed (an item in the list was selected)
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {any} event.value The [value](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-valueField) of the selected record
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onAction: ((event: { source: Combo, value: any, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when this field's value changes.
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onChange: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fired when this field is [cleared](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#function-clear).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#event-clear)
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     */
    onClear: ((event: { source: Field|any }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * User typed into the field. Please note that the value attached to this event is the raw input field value and
     * not the combos value
     * @param {object} event Event object
     * @param {Combo} event.source The combo.
     * @param {string} event.value Raw input value
     * @param {Event} event.event The triggering DOM event if any.
     */
    onInput: ((event: { source: Combo, value: string, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * An item in the list was selected
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onSelect: ((event: { source: Combo, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * User clicked one of this field's [triggers](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers)
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {Widget} event.trigger The trigger activated by click or touch tap.
     */
    onTrigger: ((event: { source: Field|any, trigger: Widget }) => void)|string
}

/**
 * Combo box preconfigured with possible [scheduling direction](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-direction) values.
 * This picker doesn't support [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect).
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker)
 */
export class SchedulingDirectionPicker extends Combo {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingDirectionPicker#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<SchedulingDirectionPickerConfig>} config
     */
    constructor(config?: Partial<SchedulingDirectionPickerConfig>);
}

/**
 * Type with configuration options for [SchedulingIssueResolutionPopup](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup) class.
 */
type SchedulingIssueResolutionPopupConfig = {
    type: 'schedulingissueresolutionpopup'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * By default, a Popup is transient, and will [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) when the user clicks or
     * taps outside its owned widgets and when focus moves outside its owned widgets.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-autoClose)
     */
    autoClose: boolean
    /**
     * Auto show flag for Popup.
     * If truthy then Popup is shown automatically upon hover.
     */
    autoShow: boolean
    /**
     * Update assigned [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-bbar)
     */
    bbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-bodyCls)
     */
    bodyCls: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Show a tool in the header to close this Popup, and allow `ESC` close it.
     * The tool is available in the [tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Toolable#property-tools) object
     * under the name `close`. It uses the CSS class `b-popup-close` to apply a
     * default close icon. This may be customized with your own CSS rules.
     */
    closable: boolean
    /**
     * The action to take when calling the [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) method.
     * By default, the popup is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-closeAction)
     */
    closeAction: 'hide'|'destroy'
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-cls)
     */
    cls: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-collapsible)
     */
    collapsible: boolean|Partial<PanelCollapserConfig>|Partial<PanelCollapserOverlayConfig>
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * By default a Popup is focused when it is shown.
     * Configure this as `false` to prevent automatic focus on show.
     */
    focusOnToFront: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-footer)
     */
    footer: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * DOM element to attach popup.
     */
    forElement: HTMLElement
    /**
     * A config [object](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-header)
     */
    header: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * Show a tool in the header to maximize this popup
     */
    maximizable: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized: boolean
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * Optionally show an opaque mask below this Popup when shown.
     * Configure this as `true` to show the mask.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-modal)
     */
    modal: boolean|{
        closeOnMaskTap?: boolean
        transparent?: boolean
    }
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover
     */
    showOnClick: boolean
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-stateId)
     */
    stateId: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/schedulerpro/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-stateProvider)
     */
    stateProvider: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-stateful)
     */
    stateful: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-statefulEvents)
     */
    statefulEvents: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar). If the value assigned to a strip is an array, it is converted to
     * the toolbar's [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-strips)
     */
    strips: Record<string, Partial<ContainerItemConfig>>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-tbar)
     */
    tbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display in the header. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-title)
     */
    title: string
    /**
     * The [tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-tools)
     */
    tools: Record<string, Partial<ToolConfig>>
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * By default, tabbing within a Popup is circular - that is it does not exit.
     * Configure this as `false` to allow tabbing out of the Popup.
     */
    trapFocus: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#config-y)
     */
    y: number
    /**
     * Fired when the [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Popup} event.source This Popup
     */
    onBeforeClose: ((event: { source: Popup }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onCollapse: ((event: { source: Panel }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onExpand: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Tool} event.source This Panel.
     * @param {Tool} event.tool The tool which is being clicked.
     */
    onToolClick: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * A Popup informing user of a scheduling issue that needs manual resolution.
 * Examples of such cases could be an infinite cycle, a scheduling conflict or a calendar misconfiguration.
 * The dialog displays the case description and lets the user pick one of the possible resolutions.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup)
 */
export class SchedulingIssueResolutionPopup extends Popup {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<SchedulingIssueResolutionPopupConfig>} config
     */
    constructor(config?: Partial<SchedulingIssueResolutionPopupConfig>);
    /**
     * Returns parameters for the provided resolution that should be
     * passed to its `resolve` method.
     * @param {object} resolution Scheduling exception resolution
     */
    getResolutionParameters(resolution: object): any[];
    /**
     * Resolves a scheduling conflict happened on the project (a scheduling conflict or a calendar misconfiguration).
     * @param {object} event The scheduling exception event data:
     */
    resolve(event: {
        source: ProjectModel
        schedulingIssue: any
        continueWithResolutionResult: Function
    }): Promise<any>;
}

/**
 * Type with configuration options for [SchedulingModePicker](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/SchedulingModePicker) class.
 */
type SchedulingModePickerConfig = InputFieldConfig & ContainerItemConfig & {
    type: 'schedulingmodecombo'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * Specifies a list of allowed scheduling modes to be shown in the picker.
     * Supports either a string of comma separated values:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-allowedModes)
     */
    allowedModes: string|any[]
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * By default PickerField's picker is transient, and will [hidePicker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/PickerField#function-hidePicker) when the user clicks or
     * taps outside or when focus moves outside picker.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-autoClose)
     * @deprecated This will be removed in 6.0
     */
    autoClose: boolean
    /**
     * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autoComplete: string
    /**
     * Configure as `true` to have the picker expand upon focus enter.
     */
    autoExpand: boolean
    /**
     * Specify `true` to auto select field contents on focus
     */
    autoSelect: boolean
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Configure as `true` to force case matching when filtering the dropdown list based upon the typed value.
     */
    caseSensitive: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * A config object to configure the [ChipView](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/ChipView) to display the
     * selected value set when [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-chipView)
     */
    chipView: Partial<ChipViewConfig>
    /**
     * `true` to clear value typed to a multiselect combo when picker is collapsed
     */
    clearTextOnPickerHide: boolean
    /**
     * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is
     * not [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-readOnly). The trigger is available in the [triggers](#Core/widget/Field#property-triggers) object
     * under the name `clear`. May also be an object which configures the `clear`
     * [trigger](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers).
     */
    clearable: boolean|Partial<FieldTriggerConfig>
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The config controls how the value of nested items are handled when a parent container gets or sets its
     * [values](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-containValues)
     * @param {Field} field Field instance
     * @returns {boolean}
     */
    containValues: boolean|string|((field: Field) => boolean)
    /**
     * The configuration for additional items associated to this field. This is typically used to add contextual
     * fields related to a [checkbox](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Checkbox) or [radio button](#Core/widget/Radio). See
     * these classes for examples of nested fields.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-container)
     */
    container: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Partial<FieldContainerConfig>|FieldContainer
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * If configured as `true`, this means that when an unmatched string is typed into the
     * combo's input field, and `ENTER`, or the [multiValueSeparator](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiValueSeparator) is typed,
     * a new record will be created using the typed string as the [displayField](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-displayField).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-createOnUnmatched)
     * @param {string} name Record name
     * @param {Combo} combo Combo instance
     * @returns {Model} New record
     */
    createOnUnmatched: ((name: string, combo: Combo) => Model)|string|boolean
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Field used for item text when populating from store
     */
    displayField: string
    /**
     * Template function that can be used to customize the displayed value
     * @param {Model} record The record to provide a textual value for
     * @param {Combo} combo A reference to this Combo
     * @returns {string|void}
     */
    displayValueRenderer: (record: Model, combo: Combo) => string|void
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * User can edit text in text field (otherwise only pick from attached picker)
     */
    editable: boolean
    /**
     * Text to display in the drop down when there are no items in the underlying store
     */
    emptyText: string
    /**
     * A function which creates an array of values for the {#config-filterParamName} to pass
     * any filters to the server upon load.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-encodeFilterParams)
     * @param {<Object>} filters filters
     * @returns {<Object>} array of values
     */
    encodeFilterParams: (filters: object[]) => object[]
    /**
     * If `false`, filtering will be triggered once you exceed [minChars](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-minChars). To filter only when
     * hitting Enter key, set this to `true`;
     */
    filterOnEnter: boolean
    /**
     * The name of an operator type as implemented in [operator](https://bryntum.com/products/schedulerpro/docs/api/Core/util/CollectionFilter#config-operator)
     * to use when filtering the dropdown list based upon the typed value.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-filterOperator)
     */
    filterOperator: '='|'!='|'>'|'>='|'<'|'<='|'*'|'startsWith'|'endsWith'|'isIncludedIn'
    /**
     * If the dropdown is to be populated with a filtered query to a remote server, specify the
     * name of the parameter to pass the typed string here. By default, the string is simply sent
     * as the value of the parameter. For special encoding, configure the combo with [encodeFilterParams](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-encodeFilterParams)
     */
    filterParamName: string
    /**
     * When [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`, you may configure `filterSelected` as
     * `true` to hide items in the dropdown when they are added to the selection.
     * It will appear as if the requested item has "moved" into the field's
     * [ChipView](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-chipView).
     */
    filterSelected: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * By default, the picker is hidden on selection in single select mode, and
     * remains to allow more selections when [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * Setting this to a `Boolean` value can override that default.
     */
    hidePickerOnSelect: boolean
    /**
     * Configure as `true` to hide the expand trigger. This is automatically set to `true` if
     * remote filtering is enabled by setting the [filterParamName](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-filterParamName) config.
     */
    hideTrigger: boolean
    /**
     * Specify `false` to prevent field from being highlighted when on external value changes
     */
    highlightExternalChange: boolean
    /**
     * An optional string to display inside the input field as an overlay. This can be useful for displaying
     * a field's units.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-hint)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hint: string|((data: { source: Field, value: any }) => string)
    /**
     * This config is similar to [hint](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-hint) except that this config is used to display HTML content.
     * Since this can allow malicious content to be executed, be sure not to include user-entered data or to
     * encode such data (see [encodeHtml](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/StringHelper#function-encodeHtml-static)).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-hintHtml)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hintHtml: string|((data: { source: Field, value: any }) => string)
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set this config to `true` to always display items horizontally along with this field. This assigns an
     * [hbox](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/layout/Box) as the [layout](#Core/widget/Container#config-layout) to the
     * [container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-container).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-inline)
     */
    inline: boolean
    /**
     * Configure this as `true` to render the dropdown list as a permanently visible list
     * in the document flow immediately below the input area instead of as a popup.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-inlinePicker)
     */
    inlinePicker: boolean
    /**
     * Text alignment for the input field.
     */
    inputAlign: string
    /**
     * Sets custom attributes of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)
     */
    inputAttributes: object
    /**
     * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc).
     */
    inputType: string
    /**
     * The width to apply to the `&lt;input&gt;` element. If a number is specified, `px` will be used.
     */
    inputWidth: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * Rows to display in the dropdown (list items).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-items)
     */
    items: object[]|string[]|object
    /**
     * The delay in milliseconds to wait after the last keystroke before triggering a change event.
     * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
     * immediate feedback, change will still be triggered on blur).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-keyStrokeChangeDelay)
     */
    keyStrokeChangeDelay: number
    /**
     * The delay in milliseconds to wait after the last keystroke before filtering the list.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-keyStrokeFilterDelay)
     */
    keyStrokeFilterDelay: number
    /**
     * Label, prepended to field
     */
    label: string
    /**
     * CSS class name or class names to add to any configured [label](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Labelable#config-label)
     */
    labelCls: string|object
    /**
     * Label position, either 'before' the field or 'above' the field
     */
    labelPosition: 'before'|'above'
    /**
     * The width to apply to the `&lt;label&gt;` element. If a number is specified, `px` will be used.
     */
    labelWidth: string|number
    /**
     * The labels to add either before or after the input field.
     * Each label may have the following properties:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-labels)
     */
    labels: object[]
    /**
     * CSS class to add to picker
     */
    listCls: string
    /**
     * Template string used to render the list items in the dropdown list
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-listItemTpl)
     * @param {Model} record The record representing the item being rendered
     * @returns {string|void}
     */
    listItemTpl: (record: Model) => string|void
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The max number of characters for the input field
     */
    maxLength: number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The minimum string length to trigger the filtering, only relevant when [editable](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-editable) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-minChars)
     */
    minChars: number
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The min number of characters for the input field
     */
    minLength: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Configure as `true` to allow selection of multiple values from the dropdown list.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-multiSelect)
     */
    multiSelect: boolean
    /**
     * A key value which, when typed in a [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) Combo, selects the
     * currently active item in the picker, and clears the input field ready for another
     * match to be typed.
     */
    multiValueSeparator: string
    /**
     * Name of the field which is used as a key to get/set values from/to the field.
     * Used prior to [ref](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-ref) and [id](#Core/widget/Widget#config-id) in
     * [Container.values](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-name)
     */
    name: string
    /**
     * This implies that the picker will display an anchor pointer, but also means that the picker will align closer
     * to the input field so that the pointer pierces the [pickerAlignElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-pickerAlignElement)
     */
    overlayAnchor: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-owner)
     */
    owner: Widget
    /**
     * Configuration object for the [picker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/List) on initialization. Returns the
     * [picker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/List) instance at runtime.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-picker)
     */
    picker: Partial<ListConfig>|List
    /**
     * The name of the element property to which the picker should size and align itself.
     */
    pickerAlignElement: string
    /**
     * Width of picker, defaults to this combo's [pickerAlignElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-pickerAlignElement) width
     */
    pickerWidth: number
    /**
     * Text to display in empty field.
     */
    placeholder: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Optionally a [Filter](https://bryntum.com/products/schedulerpro/docs/api/Core/util/CollectionFilter) config object which the combo should use for
     * filtering using the typed value.
     * This may use a `filterBy` property to test its `value` against any field in the passed record.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-primaryFilter)
     */
    primaryFilter: Partial<CollectionFilterConfig>
    /**
     * Makes the field unmodifiable by user action. The input area is not editable, and triggers
     * are unresponsive.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
     */
    required: boolean
    /**
     * If this field is not [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-readOnly), then setting this option means that pressing
     * the `ESCAPE` key after editing the field will revert the field to the value it had when
     * the user focused the field. If the field is *not* changed from when focused, the [clearable](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated.
     */
    revertOnEscape: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)
     */
    spellCheck: boolean
    /**
     * Store used to populate items. Also accepts a Store config object
     */
    store: Store|Partial<StoreConfig>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tab index of the input field
     */
    tabIndex: number
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * How to query the store upon click of the expand trigger. Specify one of these values:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-triggerAction)
     */
    triggerAction: 'all'|'last'|null
    /**
     * The triggers to add either before or after the input field. Each property name is the reference by which
     * an instantiated Trigger Widget may be retrieved from the live `[triggers](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-triggers)
     */
    triggers: Record<string, FieldTriggerConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-ui)
     */
    ui: string|object
    /**
     * `true` to cause the field to be in an invalid state while the typed filter string does not match a record in the store.
     */
    validateFilter: boolean
    /**
     * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press
     * or similar.
     */
    validateOnInput: boolean
    /**
     * The initial value of this Combo box. In single select mode (default) it's a simple string value, for
     * [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) mode, it should be an array of record ids.
     */
    value: string|number|string[]|number[]
    /**
     * Field used for item value when populating from store. Setting this to `null` will
     * yield the selected record as the Combo's [value](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#property-value).
     */
    valueField: string|null
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#config-y)
     */
    y: number
    /**
     * The default action was performed (an item in the list was selected)
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {any} event.value The [value](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-valueField) of the selected record
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onAction: ((event: { source: Combo, value: any, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when this field's value changes.
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onChange: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fired when this field is [cleared](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#function-clear).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#event-clear)
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     */
    onClear: ((event: { source: Field|any }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * User typed into the field. Please note that the value attached to this event is the raw input field value and
     * not the combos value
     * @param {object} event Event object
     * @param {Combo} event.source The combo.
     * @param {string} event.value Raw input value
     * @param {Event} event.event The triggering DOM event if any.
     */
    onInput: ((event: { source: Combo, value: string, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * An item in the list was selected
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onSelect: ((event: { source: Combo, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * User clicked one of this field's [triggers](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers)
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {Widget} event.trigger The trigger activated by click or touch tap.
     */
    onTrigger: ((event: { source: Field|any, trigger: Widget }) => void)|string
}

/**
 * Combo box preconfigured with possible scheduling mode values.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker)
 */
export class SchedulingModePicker extends Combo {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulingModePicker#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<SchedulingModePickerConfig>} config
     */
    constructor(config?: Partial<SchedulingModePickerConfig>);
}

/**
 * Type with configuration options for [StartDateField](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/StartDateField) class.
 */
type StartDateFieldConfig = InputFieldConfig & ContainerItemConfig & {
    type: 'startdatefield'|'startdate'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * By default PickerField's picker is transient, and will [hidePicker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/PickerField#function-hidePicker) when the user clicks or
     * taps outside or when focus moves outside picker.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-autoClose)
     * @deprecated This will be removed in 6.0
     */
    autoClose: boolean
    /**
     * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autoComplete: string
    /**
     * Configure as `true` to have the picker expand upon focus enter.
     */
    autoExpand: boolean
    /**
     * Specify `true` to auto select field contents on focus
     */
    autoSelect: boolean
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is
     * not [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-readOnly). The trigger is available in the [triggers](#Core/widget/Field#property-triggers) object
     * under the name `clear`. May also be an object which configures the `clear`
     * [trigger](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers).
     */
    clearable: boolean|Partial<FieldTriggerConfig>
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The config controls how the value of nested items are handled when a parent container gets or sets its
     * [values](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-containValues)
     * @param {Field} field Field instance
     * @returns {boolean}
     */
    containValues: boolean|string|((field: Field) => boolean)
    /**
     * The configuration for additional items associated to this field. This is typically used to add contextual
     * fields related to a [checkbox](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Checkbox) or [radio button](#Core/widget/Radio). See
     * these classes for examples of nested fields.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-container)
     */
    container: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Partial<FieldContainerConfig>|FieldContainer
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * User can edit text in text field (otherwise only pick from attached picker)
     */
    editable: boolean
    /**
     * Event model calendars of which should be used by the field.
     */
    eventRecord: EventModel
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Format for date displayed in field. Defaults to using long date format, as defined by current locale (`L`)
     */
    format: string
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `false` to prevent field from being highlighted when on external value changes
     */
    highlightExternalChange: boolean
    /**
     * An optional string to display inside the input field as an overlay. This can be useful for displaying
     * a field's units.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-hint)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hint: string|((data: { source: Field, value: any }) => string)
    /**
     * This config is similar to [hint](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-hint) except that this config is used to display HTML content.
     * Since this can allow malicious content to be executed, be sure not to include user-entered data or to
     * encode such data (see [encodeHtml](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/StringHelper#function-encodeHtml-static)).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-hintHtml)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hintHtml: string|((data: { source: Field, value: any }) => string)
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set this config to `true` to always display items horizontally along with this field. This assigns an
     * [hbox](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/layout/Box) as the [layout](#Core/widget/Container#config-layout) to the
     * [container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-container).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-inline)
     */
    inline: boolean
    /**
     * Text alignment for the input field.
     */
    inputAlign: string
    /**
     * Sets custom attributes of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)
     */
    inputAttributes: object
    /**
     * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc).
     */
    inputType: string
    /**
     * The width to apply to the `&lt;input&gt;` element. If a number is specified, `px` will be used.
     */
    inputWidth: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * A flag which indicates what time should be used for selected date.
     * `false` by default which means time is reset to midnight.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-keepTime)
     */
    keepTime: boolean|Date|string
    /**
     * The delay in milliseconds to wait after the last keystroke before triggering a change event.
     * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
     * immediate feedback, change will still be triggered on blur).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-keyStrokeChangeDelay)
     */
    keyStrokeChangeDelay: number
    /**
     * Label, prepended to field
     */
    label: string
    /**
     * CSS class name or class names to add to any configured [label](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Labelable#config-label)
     */
    labelCls: string|object
    /**
     * Label position, either 'before' the field or 'above' the field
     */
    labelPosition: 'before'|'above'
    /**
     * The width to apply to the `&lt;label&gt;` element. If a number is specified, `px` will be used.
     */
    labelWidth: string|number
    /**
     * The labels to add either before or after the input field.
     * Each label may have the following properties:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-labels)
     */
    labels: object[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * Max value
     */
    max: string|Date
    /**
     * Number of milliseconds to add to the project's start date. Then, during editing,
     * the resulting date is assigned to the [max](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-max) property of the field,
     * preventing the user from entering too high values.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-maxDateDelta)
     */
    maxDateDelta: number|string
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The max number of characters for the input field
     */
    maxLength: number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * Min value
     */
    min: string|Date
    /**
     * Number of milliseconds to add to the project's start date (should be negative). Then, during editing,
     * the resulting date is assigned to the [min](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-min) property of the field,
     * preventing the user from entering too low values.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-minDateDelta)
     */
    minDateDelta: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The min number of characters for the input field
     */
    minLength: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Name of the field which is used as a key to get/set values from/to the field.
     * Used prior to [ref](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-ref) and [id](#Core/widget/Widget#config-id) in
     * [Container.values](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-name)
     */
    name: string
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-owner)
     */
    owner: Widget
    /**
     * A config object used to configure the [datePicker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/DatePicker).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-picker)
     */
    picker: Partial<DatePickerConfig>
    /**
     * The name of the element property to which the picker should size and align itself.
     */
    pickerAlignElement: string
    /**
     * Format for date in the [picker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/DateField#config-picker). Uses localized format per default
     */
    pickerFormat: string
    /**
     * Text to display in empty field.
     */
    placeholder: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Project model calendar of which should be used by the field.
     */
    project: ProjectModel
    /**
     * Makes the field unmodifiable by user action. The input area is not editable, and triggers
     * are unresponsive.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
     */
    required: boolean
    /**
     * If this field is not [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-readOnly), then setting this option means that pressing
     * the `ESCAPE` key after editing the field will revert the field to the value it had when
     * the user focused the field. If the field is *not* changed from when focused, the [clearable](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated.
     */
    revertOnEscape: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)
     */
    spellCheck: boolean
    /**
     * Time increment duration value. If specified, `forward` and `back` triggers are displayed.
     * The value is taken to be a string consisting of the numeric magnitude and the units.
     * The units may be a recognised unit abbreviation of this locale or the full local unit name.
     * For example `'1d'` or `'1w'` or `'1 week'`. This may be specified as an object containing
     * two properties: `magnitude`, a Number, and `unit`, a String
     */
    step: string|number|Partial<DurationConfig>
    /**
     * A flag which indicates whether the date parsing should be strict - meaning if the date
     * is missing a year/month/day part - parsing fails.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-strictParsing)
     */
    strictParsing: boolean
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tab index of the input field
     */
    tabIndex: number
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * The triggers to add either before or after the input field. Each property name is the reference by which
     * an instantiated Trigger Widget may be retrieved from the live `[triggers](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-triggers)
     */
    triggers: Record<string, FieldTriggerConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-ui)
     */
    ui: string|object
    /**
     * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press
     * or similar.
     */
    validateOnInput: boolean
    /**
     * Value, which can be a Date or a string. If a string is specified, it will be converted using the
     * specified [format](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/DateField#config-format)
     */
    value: string|Date
    /**
     * The week start day in the [picker](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/DateField#config-picker), 0 meaning Sunday, 6 meaning Saturday.
     * Uses localized value per default.
     */
    weekStartDay: number
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#config-y)
     */
    y: number
    /**
     * User performed default action (typed into this field).
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {Model} event.record Selected record. Available for fields with records selection functionality
     * @param {Model[]} event.records Selected records as an array. Available for fields with records selection functionality
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onAction: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, record: Model, records: Model[], userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when this field's value changes.
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onChange: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fired when this field is [cleared](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#function-clear).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#event-clear)
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     */
    onClear: ((event: { source: Field|any }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Fired when the user types into this field.
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {Event} event.event The triggering DOM event
     */
    onInput: ((event: { source: Field|any, value: string|number|boolean|any, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * User clicked one of this field's [triggers](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field#property-triggers)
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {Widget} event.trigger The trigger activated by click or touch tap.
     */
    onTrigger: ((event: { source: Field|any, trigger: Widget }) => void)|string
}

/**
 * Date field widget (text field + date picker) to be used together with Scheduling Engine.
 * This field adjusts time to the earliest possible time of the day based on either:
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField)
 */
export class StartDateField extends DateField {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/StartDateField#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<StartDateFieldConfig>} config
     */
    constructor(config?: Partial<StartDateFieldConfig>);
}

/**
 * Type with configuration options for [TaskEditorBase](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/TaskEditorBase) class.
 */
type TaskEditorBaseConfig = {
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * By default, a Popup is transient, and will [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) when the user clicks or
     * taps outside its owned widgets and when focus moves outside its owned widgets.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-autoClose)
     */
    autoClose: boolean
    /**
     * Auto show flag for Popup.
     * If truthy then Popup is shown automatically upon hover.
     */
    autoShow: boolean
    /**
     * Update assigned [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-bbar)
     */
    bbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-bodyCls)
     */
    bodyCls: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * A message to be shown when Engine is performing task scheduling. Localizable text is 'L{calculateMask}'. Disabled by default.
     */
    calculateMask: string|null
    /**
     * A delay before the [mask](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-calculateMask) becomes visible. This config is needed to avoid UI blinking when calculating is relatively fast.
     * Note, the mask is applied immediately and blocks the content anyway. However if the delay is set, it will be transparent. If `null`, the mask is visible immediately.
     */
    calculateMaskDelay: number|null
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Show a tool in the header to close this Popup, and allow `ESC` close it.
     * The tool is available in the [tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Toolable#property-tools) object
     * under the name `close`. It uses the CSS class `b-popup-close` to apply a
     * default close icon. This may be customized with your own CSS rules.
     */
    closable: boolean
    /**
     * The action to take when calling the [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) method.
     * By default, the popup is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-closeAction)
     */
    closeAction: 'hide'|'destroy'
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-cls)
     */
    cls: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-collapsible)
     */
    collapsible: boolean|Partial<PanelCollapserConfig>|Partial<PanelCollapserOverlayConfig>
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked tasks. Defaults to Gantt `dependencyIdField`
     */
    dependencyIdField: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * The decimal precision to use for Duration field / columns, normally provided by the owning Scheduler´s [durationDisplayPrecision](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/view/SchedulerPro#config-durationDisplayPrecision)
     */
    durationDisplayPrecision: number
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * By default a Popup is focused when it is shown.
     * Configure this as `false` to prevent automatic focus on show.
     */
    focusOnToFront: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-footer)
     */
    footer: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * DOM element to attach popup.
     */
    forElement: HTMLElement
    /**
     * A config [object](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-header)
     */
    header: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * Show a tool in the header to maximize this popup
     */
    maximizable: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized: boolean
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * Optionally show an opaque mask below this Popup when shown.
     * Configure this as `true` to show the mask.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-modal)
     */
    modal: boolean|{
        closeOnMaskTap?: boolean
        transparent?: boolean
    }
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover
     */
    showOnClick: boolean
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-stateId)
     */
    stateId: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/schedulerpro/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-stateProvider)
     */
    stateProvider: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-stateful)
     */
    stateful: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-statefulEvents)
     */
    statefulEvents: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar). If the value assigned to a strip is an array, it is converted to
     * the toolbar's [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-strips)
     */
    strips: Record<string, Partial<ContainerItemConfig>>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-tbar)
     */
    tbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display in the header. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-title)
     */
    title: string
    /**
     * The [tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-tools)
     */
    tools: Record<string, Partial<ToolConfig>>
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * By default, tabbing within a Popup is circular - that is it does not exit.
     * Configure this as `false` to allow tabbing out of the Popup.
     */
    trapFocus: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#config-y)
     */
    y: number
    /**
     * Fired when the [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Popup} event.source This Popup
     */
    onBeforeClose: ((event: { source: Popup }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onCollapse: ((event: { source: Panel }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onExpand: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Tool} event.source This Panel.
     * @param {Tool} event.tool The tool which is being clicked.
     */
    onToolClick: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * Abstract base class for Scheduler and Gantt task editors
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase)
 */
export abstract class TaskEditorBase extends Popup {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/TaskEditorBase#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TaskEditorBaseConfig>} config
     */
    constructor(config?: Partial<TaskEditorBaseConfig>);
    /**
     * Loads a task model into the editor
     * @param {EventModel} record
     */
    loadEvent(record: EventModel): void;
}

type TimelineFeaturesType = {
    cellCopyPaste: CellCopyPaste
    cellEdit: GridCellEdit
    cellMenu: CellMenu
    cellTooltip: CellTooltip
    columnAutoWidth: ColumnAutoWidth
    columnDragToolbar: ColumnDragToolbar
    columnLines: ColumnLines
    columnPicker: ColumnPicker
    columnRename: ColumnRename
    columnReorder: ColumnReorder
    columnResize: ColumnResize
    dependencies: SchedulerDependencies
    dependencyEdit: SchedulerDependencyEdit
    eventCopyPaste: EventCopyPaste
    eventDrag: EventDrag
    eventDragCreate: EventDragCreate
    eventDragSelect: EventDragSelect
    eventEdit: EventEdit
    eventFilter: EventFilter
    eventMenu: EventMenu
    eventNonWorkingTime: EventNonWorkingTime
    eventResize: SchedulerEventResize
    eventTooltip: EventTooltip
    excelExporter: ExcelExporter
    fileDrop: FileDrop
    fillHandle: FillHandle
    filter: Filter
    filterBar: FilterBar
    group: Group
    groupSummary: GroupSummary
    headerMenu: HeaderMenu
    headerZoom: HeaderZoom
    labels: Labels
    mergeCells: MergeCells
    nonWorkingTime: NonWorkingTime
    pan: Pan
    pdfExport: PdfExport
    print: Print
    quickFind: QuickFind
    regionResize: RegionResize
    resourceMenu: ResourceMenu
    resourceTimeRanges: ResourceTimeRanges
    rowCopyPaste: RowCopyPaste
    rowExpander: RowExpander
    rowReorder: RowReorder
    rowResize: RowResize
    scheduleContext: ScheduleContext
    scheduleMenu: ScheduleMenu
    scheduleTooltip: ScheduleTooltip
    search: Search
    simpleEventEdit: SimpleEventEdit
    sort: Sort
    split: Split
    stickyCells: StickyCells
    stickyEvents: StickyEvents
    stripe: Stripe
    summary: Summary
    timeAxisHeaderMenu: TimeAxisHeaderMenu
    timeRanges: TimeRanges
    timeSelection: TimeSelection
    tree: Tree
    treeGroup: TreeGroup
}

type TimelineFeaturesConfigType = {
    cellCopyPaste: string|boolean|Partial<CellCopyPasteConfig>
    cellEdit: string|boolean|Partial<GridCellEditConfig>
    cellMenu: string|boolean|Partial<CellMenuConfig>
    cellTooltip: string|boolean|Partial<CellTooltipConfig>
    columnAutoWidth: string|boolean|Partial<ColumnAutoWidthConfig>
    columnDragToolbar: string|boolean|Partial<ColumnDragToolbarConfig>
    columnLines: string|boolean|Partial<ColumnLinesConfig>
    columnPicker: string|boolean|Partial<ColumnPickerConfig>
    columnRename: string|boolean|Partial<ColumnRenameConfig>
    columnReorder: string|boolean|Partial<ColumnReorderConfig>
    columnResize: string|boolean|Partial<ColumnResizeConfig>
    dependencies: string|boolean|Partial<SchedulerDependenciesConfig>
    dependencyEdit: string|boolean|Partial<SchedulerDependencyEditConfig>
    eventCopyPaste: string|boolean|Partial<EventCopyPasteConfig>
    eventDrag: string|boolean|Partial<EventDragConfig>
    eventDragCreate: string|boolean|Partial<EventDragCreateConfig>
    eventDragSelect: string|boolean|Partial<EventDragSelectConfig>
    eventEdit: string|boolean|Partial<EventEditConfig>
    eventFilter: string|boolean|Partial<EventFilterConfig>
    eventMenu: string|boolean|Partial<EventMenuConfig>
    eventNonWorkingTime: string|boolean|Partial<EventNonWorkingTimeConfig>
    eventResize: string|boolean|Partial<SchedulerEventResizeConfig>
    eventTooltip: string|boolean|Partial<EventTooltipConfig>
    excelExporter: string|boolean|Partial<ExcelExporterConfig>
    fileDrop: string|boolean|Partial<FileDropConfig>
    fillHandle: string|boolean|Partial<FillHandleConfig>
    filter: string|boolean|Partial<FilterConfig>
    filterBar: string|boolean|Partial<FilterBarConfig>
    group: string|boolean|Partial<GroupConfig>
    groupSummary: string|boolean|Partial<GroupSummaryConfig>
    headerMenu: string|boolean|Partial<HeaderMenuConfig>
    headerZoom: string|boolean|Partial<HeaderZoomConfig>
    labels: string|boolean|Partial<LabelsConfig>
    mergeCells: string|boolean|Partial<MergeCellsConfig>
    nonWorkingTime: string|boolean|Partial<NonWorkingTimeConfig>
    pan: string|boolean|Partial<PanConfig>
    pdfExport: string|boolean|Partial<PdfExportConfig>
    print: string|boolean|Partial<PrintConfig>
    quickFind: string|boolean|Partial<QuickFindConfig>
    regionResize: string|boolean|Partial<RegionResizeConfig>
    resourceMenu: string|boolean|Partial<ResourceMenuConfig>
    resourceTimeRanges: string|boolean|Partial<ResourceTimeRangesConfig>
    rowCopyPaste: string|boolean|Partial<RowCopyPasteConfig>
    rowExpander: string|boolean|Partial<RowExpanderConfig>
    rowReorder: string|boolean|Partial<RowReorderConfig>
    rowResize: string|boolean|Partial<RowResizeConfig>
    scheduleContext: string|boolean|Partial<ScheduleContextConfig>
    scheduleMenu: string|boolean|Partial<ScheduleMenuConfig>
    scheduleTooltip: string|boolean|Partial<ScheduleTooltipConfig>
    search: string|boolean|Partial<SearchConfig>
    simpleEventEdit: string|boolean|Partial<SimpleEventEditConfig>
    sort: string|boolean|Partial<SortConfig>
    split: string|boolean|Partial<SplitConfig>
    stickyCells: string|boolean|Partial<StickyCellsConfig>
    stickyEvents: string|boolean|Partial<StickyEventsConfig>
    stripe: string|boolean|Partial<StripeConfig>
    summary: string|boolean|Partial<SummaryConfig>
    timeAxisHeaderMenu: string|boolean|Partial<TimeAxisHeaderMenuConfig>
    timeRanges: string|boolean|Partial<TimeRangesConfig>
    timeSelection: string|boolean|Partial<TimeSelectionConfig>
    tree: string|boolean|Partial<TreeConfig>
    treeGroup: string|boolean|Partial<TreeGroupConfig>
}

/**
 * Type with configuration options for [Timeline](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/Timeline) class.
 */
type TimelineConfig = ContainerItemConfig & {
    type: 'timeline'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * Set to `false` to not allow creating dependencies
     */
    allowCreate: boolean
    /**
     * `false` to require a drop on a target event bar side circle to define the dependency type.
     * If dropped on the event bar, the `defaultValue` of the DependencyModel `type` field will be used to
     * determine the target task side.
     */
    allowDropOnEventBar: boolean
    /**
     * Keep the tooltip open if user moves the mouse over it.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-allowOver)
     */
    allowOver: boolean
    /**
     * Set to `false` if you don't want to allow events overlapping times for any one resource (defaults to `true`).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-allowOverlap)
     */
    allowOverlap: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Set to true to anchor tooltip to the triggering target. If set to `false`, the tooltip
     * will align to the mouse position. When set to `false`, it will also set `anchor: false`
     * to hide anchor arrow.
     */
    anchorToTarget: boolean
    /**
     * Set to `false` to prevent remove row animation and remove the delay related to that.
     */
    animateRemovingRows: boolean
    /**
     * When the [Tree](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/Tree) feature is in use and the Store is a tree store, this
     * config may be set to `true` to visually animate branch node expand and collapse operations.
     * *This is not supported in Scheduler and Gantt*
     */
    animateTreeNodeToggle: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * The optional [AssignmentStore](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/AssignmentStore), holding assignments between resources and events.
     * Required for multi assignments.
     */
    assignmentStore: SchedulerAssignmentStore|Partial<SchedulerAssignmentStoreConfig>
    /**
     * Inline assignments, will be loaded into an internally created AssignmentStore.
     */
    assignments: SchedulerAssignmentModel[]|object[]
    /**
     * You can set this option to `false` to make the timeline panel start and end on the exact provided
     * [startDate](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-startDate)/[endDate](#Scheduler/view/TimelineBase#config-endDate) w/o adjusting them.
     */
    autoAdjustTimeAxis: boolean
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#function-hide) when the user clicks or
     * taps outside its widget. Configure as `false` to make a Tooltip non-transient when user clicks outside it.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-autoClose)
     */
    autoClose: boolean
    /**
     * Automatically set grids height to fit all rows (no scrolling in the grid). In general you should avoid
     * using `autoHeight: true`, since it will bypass Grids virtual rendering and render all rows at once, which
     * in a larger grid is really bad for performance.
     */
    autoHeight: boolean
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#function-hide) when the mouse exits the target
     * element. Configure as `false` to make a Tooltip non-transient.
     */
    autoHide: boolean
    /**
     * Show immediately when created
     */
    autoShow: boolean
    /**
     * Update assigned [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * Controls how much space to leave between stacked event bars in px.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-barMargin)
     */
    barMargin: number
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-bbar)
     */
    bbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-bodyCls)
     */
    bodyCls: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * This config defines the size of the start and end invisible parts of the timespan when [infiniteScroll](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineScroll#config-infiniteScroll) set to `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-bufferCoef)
     */
    bufferCoef: number
    /**
     * This config defines the scroll limit, which, when exceeded will cause a timespan shift.
     * The limit is calculated as the `panelWidth * [bufferCoef](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineScroll#config-bufferCoef) * bufferThreshold`. During scrolling, if the left or right side
     * has less than that of the rendered content - a shift is triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-bufferThreshold)
     */
    bufferThreshold: number
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Show a tool in the header to close this Popup, and allow `ESC` close it.
     * The tool is available in the [tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Toolable#property-tools) object
     * under the name `close`. It uses the CSS class `b-popup-close` to apply a
     * default close icon. This may be customized with your own CSS rules.
     */
    closable: boolean
    /**
     * The action to take when calling the [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) method.
     * By default, the popup is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-closeAction)
     */
    closeAction: 'hide'|'destroy'
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-cls)
     */
    cls: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-collapsible)
     */
    collapsible: boolean|Partial<PanelCollapserConfig>|Partial<PanelCollapserOverlayConfig>
    /**
     * Set to `false` to not show column lines. End result might be overruled by/differ between themes.
     */
    columnLines: boolean
    /**
     * Accepts column definitions for the grid during initialization. They will be used to create
     * [Column](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column) instances that are added to a [ColumnStore](#Grid/data/ColumnStore).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-columns)
     */
    columns: ColumnStore|Partial<GridColumnConfig>[]|Partial<ColumnStoreConfig>
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Event which is used to show context menus.
     * Available options are: 'contextmenu', 'click', 'dblclick'.
     */
    contextMenuTriggerEvent: 'contextmenu'|'click'|'dblclick'
    /**
     * If true, a new event will be created when user double-clicks on a time axis cell (if scheduler is not in
     * read only mode).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-createEventOnDblClick)
     * @param {boolean} createEventOnDblClick.useEventModelDefaults set to `true` to set default duration based on the defaults specified by the [duration](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/EventModel#field-duration) and [durationUnit](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/EventModel#field-durationUnit) fields.
     */
    createEventOnDblClick: boolean|object
    /**
     * A tooltip config object that will be applied to the dependency creation [Tooltip](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip)
     */
    creationTooltip: Partial<TooltipConfig>
    /**
     * A template function that will be called to generate the HTML contents of the dependency creation tooltip.
     * You can return either an HTML string or a [DomConfig](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DomHelper#typedef-DomConfig) object.
     * @param {object} data Data about the dependency being created
     * @param {TimeSpan} data.source The from event
     * @param {TimeSpan} data.target The target event
     * @param {string} data.fromSide The from side (start, end, top, bottom)
     * @param {string} data.toSide The target side (start, end, top, bottom)
     * @param {boolean} data.valid The validity of the dependency
     * @returns {string|DomConfig}
     */
    creationTooltipTemplate: (data: { source: TimeSpan, target: TimeSpan, fromSide: string, toSide: string, valid: boolean }) => string|DomConfig
    /**
     * Supply a [CrudManager](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/CrudManager) instance or a config object if you want to use
     * CrudManager for handling data.
     */
    crudManager: Partial<CrudManagerConfig>|CrudManager
    /**
     * Class that should be used to instantiate a CrudManager in case it's provided as a simple object to
     * [crudManager](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerStores#config-crudManager) config.
     */
    crudManagerClass: typeof CrudManager
    /**
     * Convenient shortcut to set data in grids store both during initialization and at runtime. Can also be
     * used to retrieve data at runtime, although we do recommend interacting with Grids store instead using
     * the [store](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#property-store) property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-data)
     */
    data: object[]|Model[]
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The date to display when used as a component of a Calendar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-date)
     */
    date: Date
    /**
     * A [DateHelper](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat: string
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator: string
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * Region to which columns are added when they have none specified
     */
    defaultRegion: string
    /**
     * Generic resource image, used when provided `imageUrl` or `image` fields or path calculated from resource
     * name are all invalid. If left blank, resource name initials will be shown when no image can be loaded.
     */
    defaultResourceImageName: string
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * Inline dependencies, will be loaded into an internally created DependencyStore.
     */
    dependencies: SchedulerDependencyModel[]|Partial<SchedulerDependencyModelConfig>[]
    /**
     * The optional [DependencyStore](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/DependencyStore).
     */
    dependencyStore: SchedulerDependencyStore|Partial<DependencyStoreConfig>
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-descriptionFormat)
     */
    descriptionFormat: string|string[]|boolean[]
    /**
     * A function that provides the textual description for this view. If provided, this function overrides the
     * [descriptionFormat](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-descriptionRenderer)
     * @param {Widget} view The active view in case the function is in another scope.
     * @returns {string} Description string
     */
    descriptionRenderer: (view: Widget) => string
    /**
     * Configure as `false` to preserve selection when clicking the empty schedule area.
     */
    deselectAllOnScheduleClick: boolean
    /**
     * Configure as `true` to deselect a selected event upon click.
     */
    deselectOnClick: boolean
    /**
     * true to destroy the store when the grid is destroyed
     */
    destroyStore: boolean
    /**
     * Configure as `true` to destroy the Project and stores when `this` is destroyed.
     */
    destroyStores: boolean
    /**
     * Set to `true` to not get a warning when using another base class than GridRowModel for your grid data. If
     * you do, and would like to use the full feature set of the grid then include the fields from GridRowModel
     * in your model definition.
     */
    disableGridRowModelWarning: boolean
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * The time (in milliseconds) that the Tooltip should stay visible for when it shows over its
     * target. If the tooltip is anchored to its target, then moving the mouse during this time
     * resets the timer so that the tooltip will remain visible.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-dismissDelay)
     */
    dismissDelay: number
    /**
     * Defines how dates will be formatted in tooltips etc. This config has priority over similar config on the
     * view preset. For allowed values see [format](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DateHelper#function-format-static).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-displayDateFormat)
     */
    displayDateFormat: string
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * Decimal precision used when displaying durations, used by tooltips and DurationColumn.
     * Specify `false` to use raw value
     */
    durationDisplayPrecision: number|boolean
    /**
     * Text or HTML to display when there is no data to display in the grid
     */
    emptyText: string
    /**
     * Allow using [Delete] and [Backspace] to remove events/assignments
     */
    enableDeleteKey: boolean
    /**
     * Set to `false` if you don't want event bar DOM updates to animate.
     */
    enableEventAnimations: boolean
    /**
     * Enables showing occurrences of recurring events across the scheduler's time axis.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-enableRecurringEvents)
     */
    enableRecurringEvents: boolean
    /**
     * Configure this as `true` to allow elements within cells to be styled as `position: sticky`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-enableSticky)
     */
    enableSticky: boolean
    /**
     * Set to true to allow text selection in the grid cells. Note, this cannot be used simultaneously with the
     * `RowReorder` feature.
     */
    enableTextSelection: boolean
    /**
     * Set to true to listen for CTRL-Z (CMD-Z on Mac OS) keyboard event and trigger undo (redo when SHIFT is
     * pressed). Only applicable when using a [StateTrackingManager](https://bryntum.com/products/schedulerpro/docs/api/Core/data/stm/StateTrackingManager).
     */
    enableUndoRedoKeys: boolean
    /**
     * The end date of the timeline (if not configure with [infiniteScroll](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-infiniteScroll)).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-endDate)
     */
    endDate: Date|string
    /**
     * The name of the end date parameter that will be passed to in every `eventStore` load request.
     */
    endParamName: string
    /**
     * Field from EventModel displayed as text in the bar when rendering
     */
    eventBarTextField: string
    /**
     * The template used to generate the markup of your events in the scheduler. To 'populate' the
     * eventBodyTemplate with data, use the [eventRenderer](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer) method.
     * @param {*} data Data passed from [eventRenderer](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer) method.
     * @returns {DomConfig|string|void}
     * @deprecated Since 5.6.2. Return markup/DomConfigs from [eventRenderer](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer) instead, will be removed in 6.0.0
     */
    eventBodyTemplate: (data: any) => DomConfig|string|void
    /**
     * Event color used by default. Events and resources can specify their own color, with priority order being:
     * Event -&gt; Resource -&gt; Scheduler default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-eventColor)
     */
    eventColor: EventColor
    /**
     * Defines how to handle overlapping events. Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-eventLayout)
     */
    eventLayout: 'stack'|'pack'|'mixed'|'none'|object
    /**
     * An empty function by default, but provided so that you can override it. This function is called each time
     * an event is rendered into the schedule to render the contents of the event. It's called with the event,
     * its resource and a `renderData` object which allows you to populate data placeholders inside the event
     * template. <strong>IMPORTANT</strong> You should never modify any data on the EventModel inside this method.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-eventRenderer)
     * @param {object} detail An object containing the information needed to render an Event.
     * @param {EventModel} detail.eventRecord The event record.
     * @param {ResourceModel} detail.resourceRecord The resource record.
     * @param {AssignmentModel} detail.assignmentRecord The assignment record.
     * @param {object} detail.renderData An object containing details about the event rendering.
     * @param {EventModel} detail.renderData.event The event record.
     * @param {DomClassList|string} detail.renderData.cls An object whose property names represent the CSS class names to be added to the event bar element. Set a property's value to truthy or falsy to add or remove the class name based on the property name. Using this technique, you do not have to know whether the class is already there, or deal with concatenation.
     * @param {DomClassList|string} detail.renderData.wrapperCls An object whose property names represent the CSS class names to be added to the event wrapper element. Set a property's value to truthy or falsy to add or remove the class name based on the property name. Using this technique, you do not have to know whether the class is already there, or deal with concatenation.
     * @param {DomClassList|string} detail.renderData.iconCls An object whose property names represent the CSS class names to be added to an event icon element. Note that an element carrying this icon class is injected into the event element *after* the renderer completes, *before* the renderer's created content. To disable this if the renderer takes full control and creates content using the iconCls, you can set `renderData.iconCls = null`.
     * @param {number} detail.renderData.left Vertical offset position (in pixels) on the time axis.
     * @param {number} detail.renderData.width Width in pixels of the event element.
     * @param {number} detail.renderData.height Height in pixels of the event element.
     * @param {string|<String, String>} detail.renderData.style Inline styles for the event bar DOM element. Use either 'border: 1px solid black' or `{ border: '1px solid black' }`
     * @param {string|<String, String>} detail.renderData.wrapperStyle Inline styles for wrapper of the event bar DOM element. Use either 'border: 1px solid green' or `{ border: '1px solid green' }`
     * @param {string} detail.renderData.eventStyle The `eventStyle` of the event. Use this to apply custom styles to the event DOM element
     * @param {string} detail.renderData.eventColor The `eventColor` of the event. Use this to set a custom color for the rendered event
     * @param {DomConfig>} detail.renderData.children An array of DOM configs used as children to the `b-sch-event` element. Can be populated with additional DOM configs to have more control over contents.
     * @returns {string|object|DomConfig|DomConfig>} A simple string, or a custom object which will be applied to the [eventBodyTemplate](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventBodyTemplate), creating the actual HTML
     */
    eventRenderer: (detail: { eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, renderData: { event: SchedulerEventModel, cls: DomClassList|string, wrapperCls: DomClassList|string, iconCls: DomClassList|string, left: number, width: number, height: number, style: string|Record<string, string>, wrapperStyle: string|Record<string, string>, eventStyle: string, eventColor: string, children: DomConfig[] } }) => string|object|DomConfig|DomConfig[]
    /**
     * `this` reference for the [eventRenderer](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer) function
     */
    eventRendererThisObj: object
    /**
     * Configure as `true`, or set property to `true` to disable event selection.
     */
    eventSelectionDisabled: boolean
    /**
     * The [EventStore](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/EventStore) holding the events to be rendered into the scheduler (required).
     */
    eventStore: SchedulerEventStore|Partial<SchedulerEventStoreConfig>
    /**
     * Event style used by default. Events and resources can specify their own style, with priority order being:
     * Event -&gt; Resource -&gt; Scheduler default. Determines the appearance of the event by assigning a CSS class
     * to it. Available styles are:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-eventStyle)
     */
    eventStyle: 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null
    /**
     * Inline events, will be loaded into an internally created EventStore.
     */
    events: SchedulerEventModel[]|Partial<SchedulerEventModelConfig>[]
    /**
     * An object containing Feature configuration objects (or `true` if no configuration is required)
     * keyed by the Feature class name in all lowercase.
     */
    features: Partial<TimelineFeaturesConfigType>
    /**
     * Set to `true` to stretch the last column in a grid with all fixed width columns
     * to fill extra available space if the grid's width is wider than the sum of all
     * configured column widths.
     */
    fillLastColumn: boolean
    /**
     * Specify `true` to force rendered events/tasks to fill entire ticks. This only affects rendering, start
     * and end dates retain their value on the data level.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-fillTicks)
     */
    fillTicks: boolean
    /**
     * Use fixed row height. Setting this to `true` will configure the underlying RowManager to use fixed row
     * height, which sacrifices the ability to use rows with variable height to gain a fraction better
     * performance.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-fixedRowHeight)
     */
    fixedRowHeight: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * By default a Popup is focused when it is shown.
     * Configure this as `false` to prevent automatic focus on show.
     */
    focusOnToFront: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-footer)
     */
    footer: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * DOM element to attach tooltip to. By default, the mouse entering this element will kick off a timer
     * (see [hoverDelay](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#config-hoverDelay)) to show itself.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-forElement)
     */
    forElement: HTMLElement
    /**
     * A CSS selector which targets child elements of the [forElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#config-forElement) that should produce a
     * tooltip when hovered over.
     */
    forSelector: string
    /**
     * Set to `true` to force the time columns to fit to the available space (horizontal or vertical depends on mode).
     * Note that setting [suppressFit](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-suppressFit) to `true`, will disable `forceFit` functionality. Zooming
     * cannot be used when `forceFit` is set.
     */
    forceFit: boolean
    /**
     * Refresh entire row when a record changes (`true`) or, if possible, only the cells affected (`false`).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-fullRowRefresh)
     */
    fullRowRefresh: boolean
    /**
     * A method allowing you to define date boundaries that will constrain resize, create and drag drop
     * operations. The method will be called with the Resource record, and the Event record.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-getDateConstraints)
     * @param {ResourceModel} resourceRecord The resource record
     * @param {EventModel} eventRecord The event record
     * @returns {object} Constraining object containing `start` and `end` constraints. Omitting either will mean that end is not constrained. So you can prevent a resize or move from moving *before* a certain time while not constraining the end date.
     */
    getDateConstraints: (resourceRecord?: SchedulerResourceModel, eventRecord?: SchedulerEventModel) => object
    /**
     * A method, or the *name* of a method called to update the tooltip's content when the
     * cursor is moved over a target. It receives one argument containing context about the
     * tooltip and show operation. The function should return a string, or a Promise yielding
     * a string.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-getHtml)
     * @param {object} context
     * @param {Tooltip} context.tip The tooltip instance
     * @param {HTMLElement} context.element The Element for which the Tooltip is monitoring mouse movement
     * @param {HTMLElement} context.activeTarget The target element that triggered the show
     * @param {Event} context.event The raw DOM event
     * @returns {string|Promise}
     */
    getHtml: ((context: { tip: Tooltip, element: HTMLElement, activeTarget: HTMLElement, event: Event }) => string|Promise<any>)|string
    /**
     * Scheduler overrides Grids default implementation of [getRowHeight](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#config-getRowHeight) to
     * pre-calculate row heights based on events in the rows.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-getRowHeight)
     * @param {ResourceModel} getRowHeight.record Resource record to determine row height for
     * @returns {number} Desired row height
     */
    getRowHeight: (getRowHeight: { record: SchedulerResourceModel }) => number
    /**
     * A config [object](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-header)
     */
    header: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * The time (in milliseconds) for which the Tooltip remains visible when the mouse leaves the target.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-hideDelay)
     */
    hideDelay: number|boolean
    /**
     * Set to `true` to hide the footer elements
     */
    hideFooters: boolean
    /**
     * Set to `true` to hide the column header elements
     */
    hideHeaders: boolean
    /**
     * Set to `true` to hide the Grid's horizontal scrollbar(s)
     */
    hideHorizontalScrollbar: boolean
    /**
     * By default, when moving rapidly from target to target, if, when mouseovering
     * a new target, the tip is still visible, the tooltip does not hide, it remains
     * visible, but updates its content however it is configured to do so.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-hideOnDelegateChange)
     */
    hideOnDelegateChange: boolean
    /**
     * By default the row hover effect is not visible in the Scheduler part of the grid.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-hideRowHover)
     */
    hideRowHover: boolean
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * Configure as `true`, or set property to `true` to highlight dependent events as well when selecting an event.
     */
    highlightPredecessors: boolean
    /**
     * Configure as `true`, or set property to `true` to highlight dependent events as well when selecting an event.
     */
    highlightSuccessors: boolean
    /**
     * Deprecated, to be removed in version 6.0. Replaced by [overlappingEventSorter](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-overlappingEventSorter).
     * @deprecated Since 5.0. Use [overlappingEventSorter](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-overlappingEventSorter) instead.
     */
    horizontalEventSorterFn: () => void
    /**
     * The amount of time to hover before showing
     */
    hoverDelay: number
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Set to `true` to ignore reacting to DOM events (mouseover/mouseout etc) while scrolling. Useful if you
     * want to maximize scroll performance.
     */
    ignoreDomEventsWhileScrolling: boolean
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Configure as `true` to automatically adjust the panel timespan during scrolling in the time dimension,
     * when the scroller comes close to the start/end edges.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-infiniteScroll)
     */
    infiniteScroll: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * A template method (empty by default) allowing you to control if an event can be selected or not.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-isEventSelectable)
     * @param {EventModel} event The event record
     * @returns {boolean} true if event can be selected, otherwise false
     */
    isEventSelectable: (event: SchedulerEventModel) => boolean
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * See [Keyboard shortcuts](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/Scheduler#keyboard-shortcuts) for details
     */
    keyMap: Record<string, string>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-listeners)
     */
    listeners: object
    /**
     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object, or a message to be shown when a store is performing a remote
     * operation, or Crud Manager is loading data from the sever. Set to `null` to disable default load mask.
     */
    loadMask: string|Partial<MaskConfig>|null
    /**
     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when data is loading. The message and optional configuration from the
     * [loadMask](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/LoadMaskable#config-loadMask) config take priority over these options, just as they do
     * for `maskDefaults`, respectively.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-loadMaskDefaults)
     */
    loadMaskDefaults: Partial<MaskConfig>
    /**
     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when an error occurs loading data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-loadMaskError)
     */
    loadMaskError: Partial<MaskConfig>|Mask|boolean
    /**
     * The message to show while an async tooltip is fetching its content.
     */
    loadingMsg: string
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Time in ms until a longpress is triggered
     */
    longPressTime: number
    /**
     * This flag controls whether Scheduler should preserve its selection of events when loading a new dataset
     * (if selected event ids are included in the newly loaded dataset).
     */
    maintainSelectionOnDatasetChange: boolean
    /**
     * When `true`, events are sized and positioned based on rowHeight, resourceMargin and barMargin settings.
     * Set this to `false` if you want to control height and vertical position using CSS instead.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-managedEventSizing)
     */
    managedEventSizing: boolean
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * Grids change the `maskDefaults` to cover only their `body` element.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The maximum time axis unit to display non-working ranges for ('hour' or 'day' etc).
     * When zooming to a view with a larger unit, no non-working time elements will be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-maxTimeAxisUnit)
     */
    maxTimeAxisUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * The maximum zoom level to which [zoomIn](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomIn) will work. Defaults to the number of
     * [ViewPresets](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/ViewPreset) available, see [presets](#Scheduler/view/mixin/TimelineViewPresets#property-presets)
     * for information. Unless you have modified the collection of available presets, the max zoom level is
     * milliseconds.
     */
    maxZoomLevel: number
    /**
     * Show a tool in the header to maximize this popup
     */
    maximizable: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized: boolean
    /**
     * How to align milestones in relation to their startDate. Only applies when using a `milestoneLayoutMode`
     * other than `default`. Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-milestoneAlign)
     */
    milestoneAlign: 'start'|'center'|'end'
    /**
     * Factor representing the average char width in pixels used to determine milestone width when configured
     * with `milestoneLayoutMode: 'estimate'`.
     */
    milestoneCharWidth: number
    /**
     * How to handle milestones during event layout. How the milestones are displayed when part of the layout
     * are controlled using [milestoneTextPosition](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-milestoneTextPosition).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-milestoneLayoutMode)
     */
    milestoneLayoutMode: 'default'|'estimate'|'data'|'measure'
    /**
     * Position of the milestone text:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-milestoneTextPosition)
     */
    milestoneTextPosition: 'inside'|'outside'|'always-outside'
    /**
     * Grid's `min-height`. Defaults to `10em` to be sure that the Grid always has a height wherever it is
     * inserted.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-minHeight)
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * The minimum zoom level to which [zoomOut](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomOut) will work. Defaults to 0 (year ticks)
     */
    minZoomLevel: number
    /**
     * Optionally show an opaque mask below this Popup when shown.
     * Configure this as `true` to show the mask.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-modal)
     */
    modal: boolean|{
        closeOnMaskTap?: boolean
        transparent?: boolean
    }
    /**
     * Scheduler mode. Supported values: horizontal, vertical
     */
    mode: 'horizontal'|'vertical'
    /**
     * Grid monitors window resize by default.
     */
    monitorResize: boolean
    /**
     * Horizontal offset from mouse when [anchorToTarget](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-mouseOffsetX)
     */
    mouseOffsetX: number
    /**
     * Vertical offset from mouse when [anchorToTarget](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`
     */
    mouseOffsetY: number
    /**
     * Configure as `true` to allow `CTRL+click` to select multiple events in the scheduler.
     */
    multiEventSelect: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * When an event bar has a width less than this value, it gets the CSS class `b-sch-event-narrow`
     * added. You may apply custom CSS rules using this class.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-narrowEventWidth)
     */
    narrowEventWidth: number
    /**
     * Override this method to provide a custom sort function to sort any overlapping events. This only applies
     * to the horizontal mode, where the order the events are sorted in determines their vertical placement
     * within a resource.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-overlappingEventSorter)
     * @param {EventModel} a First event
     * @param {EventModel} b Second event
     * @returns {number} Return -1 to display `a` above `b`, 1 for `b` above `a`
     */
    overlappingEventSorter: (a: SchedulerEventModel, b: SchedulerEventModel) => number
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-owner)
     */
    owner: Widget
    /**
     * Partners this Timeline panel with another Timeline in order to sync their region sizes (sub-grids like locked, normal will get the same width),
     * start and end dates, view preset, zoom level and scrolling position. All these values will be synced with the timeline defined as the `partner`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-partner)
     */
    partner: TimelineBase
    /**
     * Set to true to include `startDate` and `endDate` params indicating the currently viewed date range.
     * Dates are formatted using the same format as the `startDate` field on the EventModel
     * (e.g. 2023-03-08T00:00:00+01:00).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-passStartEndParameters)
     */
    passStartEndParameters: boolean
    /**
     * Specify plugins (an array of classes) in config
     */
    plugins: Function[]
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-positioned)
     */
    positioned: boolean
    /**
     * Maximum number of resources for which height is pre-calculated. If you have many events per
     * resource you might want to lower this number to gain some initial rendering performance.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-preCalculateHeightLimit)
     */
    preCalculateHeightLimit: number
    /**
     * True to preserve focused cell after loading new data
     */
    preserveFocusOnDatasetChange: boolean
    /**
     * Preserve the grid's vertical scroll position when changesets are applied, as in the case of remote
     * changes, or when stores are configured with [syncDataOnLoad](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-syncDataOnLoad).
     */
    preserveScroll: PreserveScrollOptions|boolean
    /**
     * Specify `true` to preserve vertical scroll position after store actions that trigger a `refresh` event,
     * such as loading new data and filtering.
     */
    preserveScrollOnDatasetChange: boolean
    /**
     * An array of [ViewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/ViewPreset) config objects
     * which describes the available timeline layouts for this scheduler.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-presets)
     */
    presets: Partial<ViewPresetConfig>[]
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Project config object or a Project instance
     */
    project: ProjectModel|Partial<ProjectModelConfig>
    /**
     * Unit used to set the length of the time axis when used as a component of a Calendar. Suitable units are
     * `'month'`, `'week'` and `'day'`.
     */
    range: 'day'|'week'|'month'
    /**
     * Configure as `true` to make the scheduler read-only, by disabling any UIs for modifying data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-ref)
     */
    ref: string
    /**
     * Set to `false` to only measure cell contents when double clicking the edge between column headers.
     */
    resizeToFitIncludesHeader: boolean
    /**
     * A config object used to configure the resource columns in vertical mode.
     * See [ResourceHeader](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/ResourceHeader) for more details on available properties.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-resourceColumns)
     */
    resourceColumns: Partial<ResourceHeaderConfig>
    /**
     * Resource image extension, used when creating image path from resource name.
     */
    resourceImageExtension: string
    /**
     * Path to load resource images from. Used by the resource header in vertical mode and the
     * [ResourceInfoColumn](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/column/ResourceInfoColumn) in horizontal mode. Set this to display miniature
     * images for each resource using their `image` or `imageUrl` fields.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-resourceImagePath)
     */
    resourceImagePath: string
    /**
     * Control how much space to leave between the first event/last event and the resources edge (top/bottom
     * margin within the resource row in horizontal mode, left/right margin within the resource column in
     * vertical mode), in px. Defaults to the value of [barMargin](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/Scheduler#config-barMargin).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-resourceMargin)
     */
    resourceMargin: number|Partial<ResourceMarginConfig>
    /**
     * The [ResourceStore](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/ResourceStore) holding the resources to be rendered into the scheduler (required).
     */
    resourceStore: SchedulerResourceStore|Partial<SchedulerResourceStoreConfig>
    /**
     * Resource time ranges store instance or config object for [ResourceTimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ResourceTimeRanges) feature.
     */
    resourceTimeRangeStore: ResourceTimeRangeStore|Partial<ResourceTimeRangeStoreConfig>
    /**
     * Inline resource time ranges, will be loaded into an internally created store if
     * [ResourceTimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ResourceTimeRanges) is enabled.
     */
    resourceTimeRanges: ResourceTimeRangeModel[]|Partial<ResourceTimeRangeModelConfig>[]
    /**
     * Inline resources, will be loaded into an internally created ResourceStore.
     */
    resources: SchedulerResourceModel[]|Partial<SchedulerResourceModelConfig>[]
    /**
     * "Break points" for which responsive config to use for columns and css.
     */
    responsiveLevels: Record<string, number|string>
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * The height in pixels of Scheduler rows.
     */
    rowHeight: number
    /**
     * Set to `false` to not show row lines. End result might be overruled by/differ between themes.
     */
    rowLines: boolean
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Configuration values for the [ScrollManager](https://bryntum.com/products/schedulerpro/docs/api/Core/util/ScrollManager) class on initialization. Returns the
     * [ScrollManager](https://bryntum.com/products/schedulerpro/docs/api/Core/util/ScrollManager) at runtime.
     */
    scrollManager: Partial<ScrollManagerConfig>|ScrollManager
    /**
     * Configures whether the grid is scrollable in the `Y` axis. This is used to configure a [GridScroller](https://bryntum.com/products/schedulerpro/docs/api/Grid/util/GridScroller).
     * See the [scrollerClass](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#config-scrollerClass) config option.
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * The class to instantiate to use as the [scrollable](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#config-scrollable). Defaults to [GridScroller](#Grid/util/GridScroller).
     */
    scrollerClass: typeof Scroller
    /**
     * Set to `false` to not select the resource of the event when clicking an event bar.
     */
    selectResourceOnEventNavigate: boolean
    /**
     * Set to `false` to not select the row/resource when clicking the empty area in a time axis cell.
     */
    selectResourceOnScheduleClick: boolean
    /**
     * The selection settings, where you can set these boolean flags to control what is selected. Options below:
     * @param {boolean} selectionMode.cell Set to `true` to enable cell selection. This takes precedence over row selection, but rows can still be selected programmatically or with checkbox or RowNumber selection. Required for `column` selection
     * @param {boolean} selectionMode.multiSelect Allow multiple selection with ctrl and shift+click or with `checkbox` selection. Required for `dragSelect` and `column` selection
     * @param {boolean|CheckColumnConfig} selectionMode.checkbox Set to `true` to add a checkbox selection column to the grid, or pass a config object for the [CheckColumn](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/CheckColumn)
     * @param {number|string} selectionMode.checkboxIndex Positions the checkbox column at the provided index or to the right of a provided column id. Defaults to 0 or to the right of an included `RowNumberColumn`
     * @param {boolean} selectionMode.checkboxOnly Select rows only when clicking in the checkbox column. Requires cell selection config to be `false` and checkbox to be set to `true`. This setting was previously named `rowCheckboxSelection`
     * @param {boolean} selectionMode.showCheckAll Set to `true` to add a checkbox to the selection column header to select/deselect all rows. Requires checkbox to also be set to `true`
     * @param {boolean} selectionMode.deselectFilteredOutRecords Set to `true` to deselect records when they are filtered out
     * @param {boolean|string} selectionMode.includeChildren Set to `true` to also select/deselect child nodes when a parent node is selected by toggling the checkbox. Set to `always` to always select/deselect child nodes.
     * @param {boolean|'all'|'some'} selectionMode.includeParents Set to `all` or `true` to auto select parent if all its children gets selected. If one gets deselected, the parent will also be deselected. Set to 'some' to select parent if one of its children gets selected. The parent will be deselected if all children gets deselected.
     * @param {boolean} selectionMode.preserveSelectionOnPageChange In `row` selection mode, this flag controls whether the Grid should preserve its selection when loading a new page of a paged data store. Defaults to `false`
     * @param {boolean} selectionMode.preserveSelectionOnDatasetChange In `row` selection mode, this flag controls whether the Grid should preserve its selection of cells / rows when loading a new dataset (assuming the selected records are included in the newly loaded dataset)
     * @param {boolean} selectionMode.deselectOnClick Toggles whether the Grid should deselect a selected row or cell when clicking it
     * @param {boolean} selectionMode.dragSelect Set to `true` to enable multiple selection by dragging. Requires `multiSelect` to also be set to `true`. Also requires the [RowReorder](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/RowReorder) feature to be set to [gripOnly](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/RowReorder#config-gripOnly).
     * @param {boolean} selectionMode.selectOnKeyboardNavigation Set to `false` to disable auto-selection by keyboard navigation. This will activate the `select` keyboard shortcut.
     * @param {boolean} selectionMode.column Set to `true` to be able to select whole columns of cells by clicking the header. Requires cell to be set to `true`
     * @param {boolean|RowNumberColumnConfig} selectionMode.rowNumber Set to `true` or a config object to add a RowNumberColumn which, when clicked, selects the row.
     * @param {boolean} selectionMode.selectRecordOnCell Set to `false` not to include the record in the `selectedRecords` array when one of the record row's cells is selected.
     */
    selectionMode: object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * `false` to not show a tooltip while creating a dependency
     */
    showCreationTooltip: boolean
    /**
     * Configure as `true` to have the grid show a red "changed" tag in cells who's
     * field value has changed and not yet been committed.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-showDirty)
     */
    showDirty: boolean|{
        duringEdit?: boolean
    }
    /**
     * If set to `true` this will show a color field in the [EventEdit](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventEdit) editor and also a
     * picker in the [EventMenu](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventMenu). Both enables the user to choose a color which will be
     * applied to the event bar's background. See EventModel's
     * [eventColor](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventColor) config.
     * config.
     */
    showEventColorPickers: boolean
    /**
     * Set to `true` to show the lag in the tooltip
     */
    showLagInTooltip: boolean
    /**
     * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover
     */
    showOnClick: boolean
    /**
     * Show on hover
     */
    showOnHover: boolean
    /**
     * Set to `false` to hide recurring fields in event editor, even if the
     * [Recurring Events](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/RecurringEvents#config-enableRecurringEvents) is `true`
     * and a recurring event is being edited.
     */
    showRecurringUI: boolean
    /**
     * Set to `true` to show a tooltip when hovering a dependency line
     */
    showTooltip: boolean
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Set to `true` to snap to the current time resolution increment while interacting with scheduled events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-snap)
     */
    snap: boolean
    /**
     * Affects drag drop and resizing of events when [snap](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineDateMapper#config-snap)
     * is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-snapRelativeToEventStartDate)
     */
    snapRelativeToEventStartDate: boolean
    /**
     * The start date of the timeline (if not configure with [infiniteScroll](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-infiniteScroll)).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-startDate)
     */
    startDate: Date|string
    /**
     * The name of the start date parameter that will be passed to in every `eventStore` load request.
     */
    startParamName: string
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-stateId)
     */
    stateId: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/schedulerpro/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-stateProvider)
     */
    stateProvider: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-stateful)
     */
    stateful: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-statefulEvents)
     */
    statefulEvents: object|string[]
    /**
     * Unit used to control how large steps to take when clicking the previous and next buttons in the Calendar
     * UI. Only applies when used as a component of a Calendar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-stepUnit)
     */
    stepUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * When set, the text in the major time axis header sticks in the scrolling viewport as long as possible.
     */
    stickyHeaders: boolean
    /**
     * Store that holds records to display in the grid, or a store config object. If the configuration contains
     * a `readUrl`, an `AjaxStore` will be created.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-store)
     */
    store: Partial<Store|StoreConfig|AjaxStore|AjaxStoreConfig>
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar). If the value assigned to a strip is an array, it is converted to
     * the toolbar's [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-strips)
     */
    strips: Record<string, Partial<ContainerItemConfig>>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * An object containing sub grid configuration objects keyed by a `region` property.
     * By default, grid has a 'locked' region (if configured with locked columns) and a 'normal' region.
     * The 'normal' region defaults to use `flex: 1`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-subGridConfigs)
     */
    subGridConfigs: Record<string, Partial<SubGridConfig>>
    /**
     * Set to `true` to prevent auto calculating of a minimal [tickSize](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineEventRendering#property-tickSize)
     * to always fit the content to the screen size. Setting this property on `true` will disable [forceFit](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-forceFit) behaviour.
     */
    suppressFit: boolean
    /**
     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object, or a message to be shown when Crud Manager
     * is persisting changes on the server. Set to `null` to disable default sync mask.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-syncMask)
     */
    syncMask: string|Partial<MaskConfig>|null
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-tbar)
     */
    tbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * CSS class used for terminals
     */
    terminalCls: string
    /**
     * Delay in ms before hiding the terminals when the mouse leaves an event bar or terminal.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-terminalHideDelay)
     */
    terminalHideDelay: number
    /**
     * Terminal offset from their initial position, in px. Positive values move terminals further away from the
     * event bar, negative values inside the event bar.
     */
    terminalOffset: number
    /**
     * Delay in ms before showing the terminals when hovering over an event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-terminalShowDelay)
     */
    terminalShowDelay: number
    /**
     * Where (on event bar edges) to display terminals. The sides are `'start'`, `'top'`,
     * `'end'` and `'bottom'`
     */
    terminalSides: string[]
    /**
     * Terminal diameter in px, overrides the default CSS value for it (which might depend on theme).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-terminalSize)
     */
    terminalSize: number|string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-textContent)
     */
    textContent: boolean
    /**
     * The width/height (depending on vertical / horizontal mode) of all the time columns.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-tickSize)
     */
    tickSize: number
    /**
     * A [TimeAxis](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/TimeAxis) config object or instance, used to create a backing data store of
     * 'ticks' providing the input date data for the time axis of timeline panel. Created automatically if none
     * supplied.
     */
    timeAxis: Partial<TimeAxisConfig>|TimeAxis
    /**
     * The time ranges store instance for [TimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeRanges) feature.
     */
    timeRangeStore: Store|Partial<StoreConfig>
    /**
     * Inline time ranges, will be loaded into an internally created store if [TimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeRanges)
     * is enabled.
     */
    timeRanges: TimeSpan[]|Partial<TimeSpanConfig>[]
    /**
     * Set to a time zone or a UTC offset. This will set the projects
     * [timeZone](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/ProjectModel#config-timeZone) config accordingly. As this config is only a referer,
     * please se project's config [documentation](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/ProjectModel#config-timeZone) for more
     * information.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-timeZone)
     */
    timeZone: string|number
    /**
     * A title to display in the header. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-title)
     */
    title: string
    /**
     * The [tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-tools)
     */
    tools: Record<string, Partial<ToolConfig>>
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * A template function allowing you to configure the contents of the tooltip shown when hovering a
     * dependency line. You can return either an HTML string or a [DomConfig](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DomHelper#typedef-DomConfig) object.
     * @param {DependencyBaseModel} dependency The dependency record
     * @returns {string|DomConfig}
     */
    tooltipTemplate: (dependency: DependencyBaseModel) => string|DomConfig
    /**
     * By default, once a tooltip is shown aligned as requested, it stays put.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-trackMouse)
     */
    trackMouse: boolean
    /**
     * Animation transition duration in milliseconds.
     */
    transitionDuration: number
    /**
     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
     * forwards or backwards.
     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
     */
    trapFocus: boolean
    /**
     * Configure as `true` to trigger `selectionChange` when removing a selected event/assignment.
     */
    triggerSelectionChangeOnRemove: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-ui)
     */
    ui: string|object
    /**
     * By default, scrolling the schedule will update the [timelineContext](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/SchedulerBase#property-timelineContext) to reflect the new
     * currently hovered context. When displaying a large number of events on screen at the same time, this will
     * have a slight impact on scrolling performance. In such scenarios, opt out of this behavior by setting
     * this config to `false`.
     */
    updateTimelineContextOnScroll: boolean
    /**
     * By default, scheduler fade events in on load. Specify `false` to prevent this animation or specify one
     * of the available animation types to use it (`true` equals `'fade-in'`):
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-useInitialAnimation)
     */
    useInitialAnimation: boolean|'fade-in'|'slide-from-left'|'slide-from-top'|string
    /**
     * The time axis column config for vertical [mode](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/SchedulerBase#config-mode).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-verticalTimeAxisColumn)
     */
    verticalTimeAxisColumn: Partial<VerticalTimeAxisColumnConfig>
    /**
     * A string key used to lookup a predefined [ViewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/ViewPreset) (e.g. 'weekAndDay', 'hourAndDay'),
     * managed by [PresetManager](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/PresetManager). See [PresetManager](#Scheduler/preset/PresetManager) for more information.
     * Or a config object for a viewPreset.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-viewPreset)
     */
    viewPreset: string|Partial<ViewPresetConfig>
    /**
     * A date to bring into view initially on the scrollable timeline.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-visibleDate)
     */
    visibleDate: Date|VisibleDate
    /**
     * Integer number indicating the size of timespan during zooming. When zooming, the timespan is adjusted to make
     * the scrolling area `visibleZoomFactor` times wider than the timeline area itself. Used in
     * [zoomToSpan](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomToSpan) and [zoomToLevel](#Scheduler/view/mixin/TimelineZoomable#function-zoomToLevel) functions.
     */
    visibleZoomFactor: number
    /**
     * A valid JS day index between 0-6 (0: Sunday, 1: Monday etc.) to be considered the start day of the week.
     * When omitted, the week start day is retrieved from the active locale class.
     */
    weekStartDay: number
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * An object with format `{ fromDay, toDay, fromHour, toHour }` that describes the working days and hours.
     * This object will be used to populate TimeAxis [include](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/TimeAxis#config-include) property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-workingTime)
     */
    workingTime: object
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-y)
     */
    y: number
    /**
     * Whether the originally rendered timespan should be preserved while zooming. By default, it is set to `false`,
     * meaning the timeline panel will adjust the currently rendered timespan to limit the amount of HTML content to
     * render. When setting this option to `true`, be careful not to allow to zoom a big timespan in seconds
     * resolution for example. That will cause <strong>a lot</strong> of HTML content to be rendered and affect performance. You
     * can use [minZoomLevel](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineZoomable#config-minZoomLevel) and [maxZoomLevel](#Scheduler/view/mixin/TimelineZoomable#config-maxZoomLevel) config options for that.
     */
    zoomKeepsOriginalTimespan: boolean
    /**
     * If true, you can zoom in and out on the time axis using CTRL-key + mouse wheel.
     */
    zoomOnMouseWheel: boolean
    /**
     * True to zoom to time span when double-clicking a time axis cell.
     */
    zoomOnTimeAxisDoubleClick: boolean
    /**
     * Fired on the owning Scheduler/Gantt after a dependency drag creation operation finished, no matter to outcome
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {DependencyBaseModel} event.dependency The created dependency
     */
    onAfterDependencyCreateDrop: ((event: { source: TimeSpan, target: TimeSpan, dependency: DependencyBaseModel }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget after a dependency is successfully saved
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler instance
     * @param {SchedulerDependencyModel} event.dependencyRecord The dependency about to be saved
     */
    onAfterDependencySave: ((event: { source: Scheduler, dependencyRecord: SchedulerDependencyModel }) => void)|string
    /**
     * Fires on the owning Scheduler at the end of the drag create gesture whether or not
     * a new event was created by the gesture.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {SchedulerEventModel} event.eventRecord The event record being created
     * @param {SchedulerResourceModel} event.resourceRecord The resource record
     * @param {HTMLElement} event.eventElement The element representing the created event record
     */
    onAfterDragCreate: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, eventElement: HTMLElement }) => void)|string
    /**
     * Fired on the owning Scheduler after event drop
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords
     * @param {SchedulerEventModel[]} event.eventRecords
     * @param {boolean} event.valid
     * @param {object} event.context
     * @param {MouseEvent} event.domEvent Browser event
     */
    onAfterEventDrop: ((event: { source: Scheduler, assignmentRecords: SchedulerAssignmentModel[], eventRecords: SchedulerEventModel[], valid: boolean, context: object, domEvent: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler after editor is closed by any action - save, delete or cancel
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     */
    onAfterEventEdit: ((event: { source: Scheduler }) => void)|string
    /**
     * Fires on the owning Scheduler after an event is successfully saved
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler instance
     * @param {SchedulerEventModel} event.eventRecord The record about to be saved
     */
    onAfterEventSave: ((event: { source: Scheduler, eventRecord: SchedulerEventModel }) => void)|string
    /**
     * Fired any time there is a change to the assignments selected in the Scheduler.
     * @param {object} event Event object
     * @param {'select'|'deselect'|'update'|'clear'} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {SchedulerAssignmentModel[]} event.selected An array of the Assignments added to the selection.
     * @param {SchedulerAssignmentModel[]} event.deselected An array of the Assignments removed from the selection.
     * @param {SchedulerAssignmentModel[]} event.selection The new selection.
     */
    onAssignmentSelectionChange: ((event: { action: 'select'|'deselect'|'update'|'clear', selected: SchedulerAssignmentModel[], deselected: SchedulerAssignmentModel[], selection: SchedulerAssignmentModel[] }) => void)|string
    /**
     * Fires before an assignment is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or
     * by the event editor. Can for example be used to display a custom dialog to confirm deletion, in which
     * case records should be "manually" removed after confirmation:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-beforeAssignmentDelete)
     * @param {object} event Event object
     * @param {Scheduler} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeAssignmentDelete: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => boolean|void)|string
    /**
     * Fired any time there is going to be a change to the assignments selected in the Scheduler.
     * Returning `false` prevents the change
     * @param {object} event Event object
     * @param {string} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {SchedulerEventModel[]} event.selected An array of assignments that will be added to the selection.
     * @param {SchedulerEventModel[]} event.deselected An array of assignments that will be removed from the selection.
     * @param {SchedulerEventModel[]} event.selection The currently selected assignments, before applying `selected` and `deselected`.
     */
    onBeforeAssignmentSelectionChange: ((event: { action: string, selected: SchedulerEventModel[], deselected: SchedulerEventModel[], selection: SchedulerEventModel[] }) => boolean|void)|string
    /**
     * Fires on the owning Grid before the cell editing is canceled, return `false` to prevent cancellation.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     */
    onBeforeCancelCellEdit: ((event: { source: Grid, editorContext: Location }) => boolean|void)|string
    /**
     * Fires on the owning Grid before deleting a range of selected cell values by pressing `Backspace` or `Del`
     * buttons while [autoEdit](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellEdit#config-autoEdit) is set to `true`. Return `false` to prevent editing.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {(Location|Model)[]} event.gridSelection An array of cell selectors or records that will have their values deleted (the records themself will not get deleted, only visible column values).
     */
    onBeforeCellDelete: ((event: { source: Grid, gridSelection: (Location|Model)[] }) => boolean|void)|string
    /**
     * Fires on the owning Grid before editing starts, return `false` to prevent editing
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {Field} event.editorContext.editor The input field that the column is configured with (see [field](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column#config-field)). This property mey be replaced to be a different [field](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field) in the handler, to take effect just for the impending edit.
     * @param {Function} event.editorContext.finalize An async function may be injected into this property which performs asynchronous finalization tasks such as complex validation of confirmation. The value `true` or `false` must be returned.
     * @param {object} event.editorContext.finalize.context An object describing the editing context upon requested completion of the edit.
     * @param {any} event.editorContext.value Cell value
     */
    onBeforeCellEditStart: ((event: { source: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Field, finalize: { context?: object }, value: any } }) => boolean|void)|string
    /**
     * Fired when the [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Popup} event.source This Popup
     */
    onBeforeClose: ((event: { source: Popup }) => void)|string
    /**
     * This event is fired prior to starting a column drag gesture. The drag is canceled if a listener returns `false`.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    onBeforeColumnDragStart: ((event: { source: Grid, column: Column, event: Event }) => boolean|void)|string
    /**
     * This event is fired when a column is dropped, and you can return false from a listener to abort the operation.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Column} event.newParent The new parent column.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    onBeforeColumnDropFinalize: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, event: Event, region: string }) => boolean|void)|string
    /**
     * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location[]} event.cells The cells about to be copied or cut
     * @param {string} event.data The string data about to be copied or cut
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other beforeCopy events
     */
    onBeforeCopy: ((event: { source: Grid, cells: Location[], data: string, isCut: boolean, entityName: string }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before a dependency is added
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyEdit} event.dependencyEdit The dependency edit feature
     * @param {SchedulerDependencyModel} event.dependencyRecord The dependency about to be added
     */
    onBeforeDependencyAdd: ((event: { source: Scheduler, dependencyEdit: SchedulerDependencyEdit, dependencyRecord: SchedulerDependencyModel }) => boolean|void)|string
    /**
     * Fired on the owning Scheduler/Gantt before a dependency creation drag operation starts. Return `false` to
     * prevent it
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     */
    onBeforeDependencyCreateDrag: ((event: { source: TimeSpan }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when a dependency drag creation operation is about to finalize
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {'start'|'end'|'top'|'bottom'} event.fromSide The from side (start / end / top / bottom)
     * @param {'start'|'end'|'top'|'bottom'} event.toSide The to side (start / end / top / bottom)
     */
    onBeforeDependencyCreateFinalize: ((event: { source: TimeSpan, target: TimeSpan, fromSide: 'start'|'end'|'top'|'bottom', toSide: 'start'|'end'|'top'|'bottom' }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before a dependency is deleted
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler instance
     * @param {SchedulerDependencyModel} event.dependencyRecord The dependency record about to be deleted
     */
    onBeforeDependencyDelete: ((event: { source: Scheduler, dependencyRecord: SchedulerDependencyModel }) => boolean|void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before an dependency is displayed in the editor.
     * This may be listened for to allow an application to take over dependency editing duties. Return `false` to
     * stop the default editing UI from being shown or a `Promise` yielding `true` or `false` for async vetoing.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyEdit} event.dependencyEdit The dependencyEdit feature
     * @param {SchedulerDependencyModel} event.dependencyRecord The record about to be shown in the editor.
     */
    onBeforeDependencyEdit: ((event: { source: Scheduler, dependencyEdit: SchedulerDependencyEdit, dependencyRecord: SchedulerDependencyModel }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Scheduler or Gantt widget when the editor for a dependency is available but before it is shown. Allows
     * manipulating fields before the widget is shown.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyEdit} event.dependencyEdit The dependencyEdit feature
     * @param {SchedulerDependencyModel} event.dependencyRecord The record about to be shown in the editor.
     * @param {Popup} event.editor The editor popup
     */
    onBeforeDependencyEditShow: ((event: { source: Scheduler, dependencyEdit: SchedulerDependencyEdit, dependencyRecord: SchedulerDependencyModel, editor: Popup }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before a dependency is saved
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler instance
     * @param {SchedulerDependencyModel} event.dependencyRecord The dependency about to be saved
     * @param {object} event.values The new values
     */
    onBeforeDependencySave: ((event: { source: Scheduler, dependencyRecord: SchedulerDependencyModel, values: object }) => boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires on the owning Scheduler at the beginning of the drag gesture. Returning `false` from a listener prevents
     * the drag create operation from starting.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-beforeDragCreate)
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {SchedulerResourceModel} event.resourceRecord
     * @param {Date} event.date The datetime associated with the drag start point.
     */
    onBeforeDragCreate: ((event: { source: Scheduler, resourceRecord: SchedulerResourceModel, date: Date }) => boolean|void)|string
    /**
     * Fires on the owning Scheduler to allow implementer to prevent immediate finalization by setting
     * `data.context.async = true` in the listener, to show a confirmation popup etc
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-beforeDragCreateFinalize)
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel} event.eventRecord The event record being created
     * @param {SchedulerResourceModel} event.resourceRecord The resource record
     * @param {HTMLElement} event.eventElement The element representing the new Event record
     * @param {object} event.context
     * @param {boolean} event.context.async Set true to handle drag create asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize drag create. This method accepts one argument: pass true to update records, or false, to ignore changes
     */
    onBeforeDragCreateFinalize: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, eventElement: HTMLElement, context: { async: boolean, finalize: Function } }) => void)|string
    /**
     * Fires before an event is added. Can be triggered by schedule double click or drag create action.
     * @param {object} event Event object
     * @param {Scheduler} event.source The Scheduler instance
     * @param {SchedulerEventModel} event.eventRecord The record about to be added
     * @param {SchedulerResourceModel[]} event.resourceRecords Resources that the record is assigned to
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords The assignment records
     */
    onBeforeEventAdd: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecords: SchedulerResourceModel[], assignmentRecords: SchedulerAssignmentModel[] }) => boolean|void)|string
    /**
     * Fires before an event is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or by the
     * event editor. Return `false` to immediately veto the removal (or a `Promise` yielding `true` or `false`
     * for async vetoing).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-beforeEventDelete)
     * @param {object} event Event object
     * @param {Scheduler|any} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeEventDelete: ((event: { source: Scheduler|any, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean|void>)|string
    /**
     * Fired on the owning Scheduler before event dragging starts. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel} event.eventRecord Event record the drag starts from
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the drag starts from
     * @param {SchedulerEventModel[]} event.eventRecords Event records being dragged
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords Assignment records being dragged
     * @param {MouseEvent} event.event Browser event DEPRECATED (replaced by domEvent)
     * @param {MouseEvent} event.domEvent Browser event
     */
    onBeforeEventDrag: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], event: MouseEvent, domEvent: MouseEvent }) => boolean|void)|string
    /**
     * Fires on the owning Scheduler before drag selection starts. Return false to prevent the operation.
     * @param {object} event Event object
     * @param {Event} event.event The native browser DOM event
     */
    onBeforeEventDragSelect: ((event: { event: Event }) => boolean|void)|string
    /**
     * This event is fired on the owning Scheduler after the event drag operation completes, but before changing any data.
     * It allows implementer to use asynchronous validation/finalization by setting `context.async = true`
     * in the listener, for example, to show a confirmation popup, make async data request etc.
     * In such case, implementer need to call the `context.finalize()` method manually:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-beforeEventDropFinalize)
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {object} event.context
     * @param {DropData} event.context.dropData Information about the drop points for dragged events/assignments.
     * @param {boolean} event.context.async Set to `true` to not finalize the drag-drop operation immediately (e.g. to wait for user confirmation)
     * @param {SchedulerEventModel[]} event.context.eventRecords Event records being dragged
     * @param {SchedulerAssignmentModel[]} event.context.assignmentRecords Assignment records being dragged
     * @param {SchedulerEventModel} event.context.targetEventRecord Event record for drop target
     * @param {SchedulerResourceModel} event.context.newResource Resource record for drop target
     * @param {boolean} event.context.valid Set this to `false` to abort the drop immediately.
     * @param {Function} event.context.finalize Call this method after an <strong>async</strong> finalization flow, to finalize the drag-drop operation. This method accepts one argument: pass `true` to update records, or `false` to ignore changes
     * @param {MouseEvent} event.domEvent Browser event
     */
    onBeforeEventDropFinalize: ((event: { source: Scheduler, context: { dropData: DropData, async: boolean, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], targetEventRecord: SchedulerEventModel, newResource: SchedulerResourceModel, valid: boolean, finalize: Function }, domEvent: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler before an event is displayed in an editor.
     * This may be listened for to allow an application to take over event editing duties. Returning `false`
     * stops the default editing UI from being shown.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {EventEdit} event.eventEdit The eventEdit feature
     * @param {SchedulerEventModel} event.eventRecord The record about to be shown in the event editor.
     * @param {SchedulerResourceModel} event.resourceRecord The Resource record for the event. If the event is being created, it will not contain a resource, so this parameter specifies the resource the event is being created for.
     * @param {HTMLElement} event.eventElement The element which represents the event in the scheduler display.
     */
    onBeforeEventEdit: ((event: { source: Scheduler, eventEdit: EventEdit, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, eventElement: HTMLElement }) => boolean|void)|string
    /**
     * Fires on the owning Scheduler when the editor for an event is available but before it is populated with
     * data and shown. Allows manipulating fields etc.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {EventEdit} event.eventEdit The eventEdit feature
     * @param {SchedulerEventModel} event.eventRecord The record about to be shown in the event editor.
     * @param {SchedulerResourceModel} event.resourceRecord The Resource record for the event. If the event is being created, it will not contain a resource, so this parameter specifies the resource the event is being created for.
     * @param {HTMLElement} event.eventElement The element which represents the event in the scheduler display.
     * @param {Popup} event.editor The editor
     */
    onBeforeEventEditShow: ((event: { source: Scheduler, eventEdit: EventEdit, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, eventElement: HTMLElement, editor: Popup }) => void)|string
    /**
     * Fired on the owning Scheduler before resizing starts. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel} event.eventRecord Event record being resized
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onBeforeEventResize: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => boolean|void)|string
    /**
     * Fired on the owning Scheduler to allow implementer to prevent immediate finalization by setting
     * `data.context.async = true` in the listener, to show a confirmation popup etc
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-beforeEventResizeFinalize)
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {object} event.context
     * @param {SchedulerEventModel} event.context.eventRecord Event record being resized
     * @param {Date} event.context.startDate New startDate (changed if resizing start side)
     * @param {Date} event.context.endDate New endDate (changed if resizing end side)
     * @param {Date} event.context.originalStartDate Start date before resize
     * @param {Date} event.context.originalEndDate End date before resize
     * @param {boolean} event.context.async Set true to handle resize asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize resize. This method accepts one argument: pass `true` to update records, or `false`, to ignore changes
     * @param {Event} event.event Browser event
     */
    onBeforeEventResizeFinalize: ((event: { source: Scheduler, context: { eventRecord: SchedulerEventModel, startDate: Date, endDate: Date, originalStartDate: Date, originalEndDate: Date, async: boolean, finalize: Function }, event: Event }) => void)|string
    /**
     * Fires on the owning Scheduler before an event is saved.
     * Return `false` to immediately prevent saving
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-beforeEventSave)
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler instance
     * @param {SchedulerEventModel} event.eventRecord The record about to be saved
     * @param {SchedulerResourceModel[]} event.resourceRecords The resources to which the event is assigned
     * @param {object} event.values The new values
     * @param {object} event.context Extended save context:
     * @param {boolean} event.context.async Set this to `true` in a listener to indicate that the listener will asynchronously decide to prevent or not the event save.
     * @param {Function} event.context.finalize Function to call to finalize the save. Used when `async` is `true`. Provide `false` to the function to prevent the save.
     */
    onBeforeEventSave: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecords: SchedulerResourceModel[], values: object, context: { async?: boolean, finalize: Function } }) => Promise<boolean|void>)|string
    /**
     * Fired any time there is going to be a change to the events selected in the Scheduler.
     * Returning `false` prevents the change
     * @param {object} event Event object
     * @param {string} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {SchedulerEventModel[]} event.selected An array of events that will be added to the selection.
     * @param {SchedulerEventModel[]} event.deselected An array of events that will be removed from the selection.
     * @param {SchedulerEventModel[]} event.selection The currently selected events, before applying `selected` and `deselected`.
     */
    onBeforeEventSelectionChange: ((event: { action: string, selected: SchedulerEventModel[], deselected: SchedulerEventModel[], selection: SchedulerEventModel[] }) => boolean|void)|string
    /**
     * Fires on the owning Grid before the cell editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * @param {object} event Event object
     * @param {Grid} event.grid Target grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onBeforeFinishCellEdit: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before pan starts. Return `false` to prevent the operation.
     * @param {object} event Event object
     * @param {Event} event.event The native browser DOM event
     */
    onBeforePan: ((event: { event: Event }) => boolean|void)|string
    /**
     * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData about to be pasted
     * @param {Location} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other beforePaste events
     */
    onBeforePaste: ((event: { source: Grid, clipboardData: string, targetCell: Location, entityName: string }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Grid before export started. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {object} event.config Export config
     */
    onBeforePdfExport: ((event: { config: object }) => boolean|void)|string
    /**
     * Fired before the [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) is changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onBeforePresetChange: ((event: { source: Scheduler, startDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Fires before a row is rendered.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Row} event.row The row about to be rendered.
     * @param {Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    onBeforeRenderRow: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows are about to be rendered
     * @param {object} event Event object
     * @param {Grid} event.source This grid.
     */
    onBeforeRenderRows: ((event: { source: Grid }) => void)|string
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records to be deselected in this operation.
     * @param {Model[]} event.selected The records to be selected in this operation.
     * @param {Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Location[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Location[]} event.selectedCells The cells to be selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    onBeforeSelectionChange: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fired on the owning Scheduler/Gantt before showing dependency terminals on a task or event. Return `false` to
     * prevent it
     * @param {object} event Event object
     * @param {TimeSpan} event.source The hovered task
     */
    onBeforeShowTerminals: ((event: { source: TimeSpan }) => void)|string
    /**
     * Fired when a group is going to be expanded or collapsed using the UI.
     * Returning `false` from a listener prevents the operation
     * @param {object} event Event object
     * @param {Model} event.groupRecord Group record
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     * @param {Event} event.domEvent The user interaction event (eg a `click` event) if the toggle request was instigated by user interaction.
     */
    onBeforeToggleGroup: ((event: { groupRecord: Model, collapse: boolean, domEvent: Event }) => boolean|void)|string
    /**
     * Fired before a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    onBeforeToggleNode: ((event: { source: Grid, record: Model, collapse: boolean }) => void)|string
    /**
     * Fires on the owning Grid when editing is cancelled
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Event} event.event Included if the cancellation was triggered by a DOM event
     */
    onCancelCellEdit: ((event: { source: Grid, editorContext: Location, event: Event }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellContextMenu: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellDblClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * This event fires on the owning grid before the context menu is shown for a cell.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-cellMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuBeforeShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column, record: Model }) => boolean|void)|string
    /**
     * This event fires on the owning grid when an item is selected in the cell context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid after the context menu is shown for a cell.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid when a check item is toggled in the cell context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     * @param {boolean} event.checked Checked or not
     */
    onCellMenuToggleItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model, checked: boolean }) => void)|string
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOut: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOver: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onCollapse: ((event: { source: Panel }) => void)|string
    /**
     * Fired before a parent node record is collapsed.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record which has been collapsed.
     */
    onCollapseNode: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * This event is fired when a column is being dragged, and you can set the `valid` flag on t
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Event} event.event The browser event.
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     */
    onColumnDrag: ((event: { source: Grid, column: Column, insertBefore: Column, event: Event, context: { valid: boolean } }) => void)|string
    /**
     * This event is fired when a column drag gesture has started.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    onColumnDragStart: ((event: { source: Grid, column: Column, event: Event }) => void)|string
    /**
     * This event is always fired after a column is dropped. The `valid` param is true if the operation was not
     * vetoed and the column was moved in the column store.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Column} event.newParent The new parent column.
     * @param {boolean} event.valid true if the operation was not vetoed.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    onColumnDrop: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, valid: boolean, event: Event, region: string }) => boolean|void)|string
    /**
     * This event fires on the owning widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Widget} event.source The owning widget
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     */
    onContextMenuItem: ((event: { source: Widget, menu: Menu, item: MenuItem }) => void)|string
    /**
     * This event fires on the owning widget when a check item is toggled in the context menu.
     * @param {object} event Event object
     * @param {Widget} event.source The owning widget
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {boolean} event.checked Checked or not
     */
    onContextMenuToggleItem: ((event: { source: Widget, menu: Menu, item: MenuItem, checked: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a copy action is performed.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location[]} event.cells The cells about to be copied or cut
     * @param {string} event.copiedDataString The concatenated data string that was copied or cut
     * @param {boolean} event.isCut `true` if this was a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other copy events
     */
    onCopy: ((event: { source: Grid, cells: Location[], copiedDataString: string, isCut: boolean, entityName: string }) => void)|string
    /**
     * Fired when data in the store changes.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-dataChange)
     * @param {object} event Event object
     * @param {Grid} event.source Owning grid
     * @param {Store} event.store The originating store
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'updatemultiple'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onDataChange: ((event: { source: Grid, store: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired when the range of dates encapsulated by the UI changes. This will be when
     * moving a view in time by reconfiguring its [timeAxis](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-timeAxis). This will happen
     * when zooming, or changing [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-viewPreset).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-dateRangeChange)
     * @param {object} event Event object
     * @param {TimelineBase} event.source This Scheduler/Gantt instance.
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onDateRangeChange: ((event: { source: TimelineBase, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fired when dependencies are rendered
     */
    onDependenciesDrawn: (() => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when a click is registered on a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyClick: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when a context menu event is registered on a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyContextMenu: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when a dependency creation drag operation starts
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     */
    onDependencyCreateDragStart: ((event: { source: TimeSpan }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when a dependency drag creation operation succeeds
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {DependencyBaseModel} event.dependency The created dependency
     */
    onDependencyCreateDrop: ((event: { source: TimeSpan, target: TimeSpan, dependency: DependencyBaseModel }) => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when a double click is registered on a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyDblClick: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when the mouse moves out of a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyMouseOut: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when the mouse moves over a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyMouseOver: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when asynchronous dependency validation completes
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {number} event.dependencyType The dependency type, see [Type](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static)
     */
    onDependencyValidationComplete: ((event: { source: TimeSpan, target: TimeSpan, dependencyType: number }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when asynchronous dependency validation starts
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {number} event.dependencyType The dependency type, see [Type](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static)
     */
    onDependencyValidationStart: ((event: { source: TimeSpan, target: TimeSpan, dependencyType: number }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires on the owning Scheduler after the new event has been created.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {SchedulerEventModel} event.eventRecord The new `EventModel` record.
     * @param {SchedulerResourceModel} event.resourceRecord The resource for the row in which the event is being created.
     * @param {MouseEvent} event.event The ending mouseup event.
     * @param {HTMLElement} event.eventElement The DOM element representing the newly created event un the UI.
     */
    onDragCreateEnd: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, event: MouseEvent, eventElement: HTMLElement }) => void)|string
    /**
     * Fires on the owning Scheduler after the drag start has created a new Event record.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {SchedulerEventModel} event.eventRecord The event record being created
     * @param {SchedulerResourceModel} event.resourceRecord The resource record
     * @param {HTMLElement} event.eventElement The element representing the new event.
     */
    onDragCreateStart: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, eventElement: HTMLElement }) => void)|string
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid} event.source
     * @param {Model[]|object} event.selectedCells The cells that is currently being dragged over
     */
    onDragSelecting: ((event: { source: Grid, selectedCells: Model[]|object|Partial<ModelConfig> }) => void)|string
    /**
     * Fired when a double click or drag gesture has created a new event and added it to the event store.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler.
     * @param {SchedulerEventModel} event.eventRecord The new event record.
     * @param {SchedulerResourceModel} event.resourceRecord The resource assigned to the new event.
     */
    onEventAutoCreated: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel }) => void)|string
    /**
     * Triggered for click on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventClick: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for right-click on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventContextMenu: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for double-click on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventDblClick: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler when event is dragged
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords Event records being dragged
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords Assignment records being dragged
     * @param {Date} event.startDate Start date for the current location
     * @param {Date} event.endDate End date for the current location
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the drag started from
     * @param {SchedulerResourceModel} event.newResource Resource at the current location
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to `false` to signal that the current drop position is invalid.
     * @param {MouseEvent} event.domEvent Browser event
     */
    onEventDrag: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], startDate: Date, endDate: Date, resourceRecord: SchedulerResourceModel, newResource: SchedulerResourceModel, context: { valid: boolean }, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler after an event drag operation has been aborted
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords Event records being dragged
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords Assignment records being dragged
     * @param {MouseEvent} event.domEvent Browser event
     */
    onEventDragAbort: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], domEvent: MouseEvent }) => void)|string
    /**
     * Triggered when drag mode is changed, for example when copy key is
     * pressed or released while dragging.
     * @param {object} event Event object
     * @param {string} event.mode Drag mode, could be either 'move', 'copy', or 'auto'
     */
    onEventDragModeChange: ((event: { mode: string }) => void)|string
    /**
     * Fired on the owning Scheduler after an event drag operation regardless of the operation being cancelled or not
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     */
    onEventDragReset: ((event: { source: Scheduler }) => void)|string
    /**
     * Fired on the owning Scheduler when event dragging starts
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the drag starts from
     * @param {SchedulerEventModel[]} event.eventRecords Event records being dragged
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords Assignment records being dragged
     * @param {MouseEvent} event.event Browser event DEPRECATED (replaced by domEvent)
     * @param {MouseEvent} event.domEvent Browser event
     */
    onEventDragStart: ((event: { source: Scheduler, resourceRecord: SchedulerResourceModel, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], event: MouseEvent, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler when an event is dropped
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {SchedulerEventModel[]} event.eventRecords
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords
     * @param {HTMLElement} event.externalDropTarget The HTML element dropped upon, if drop happened on a valid external drop target
     * @param {boolean} event.isCopy
     * @param {object} event.context
     * @param {SchedulerEventModel} event.context.targetEventRecord Event record for drop target
     * @param {SchedulerResourceModel} event.context.newResource Resource record for drop target
     * @param {MouseEvent} event.domEvent Browser event
     */
    onEventDrop: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], externalDropTarget: HTMLElement, isCopy: boolean, context: { targetEventRecord: SchedulerEventModel, newResource: SchedulerResourceModel }, domEvent: MouseEvent }) => void)|string
    /**
     * Fired before the editor will load the event record data into its input fields. This is useful if you
     * want to modify the fields before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The editor widget
     * @param {SchedulerEventModel} event.record The record
     */
    onEventEditBeforeSetRecord: ((event: { source: Container, record: SchedulerEventModel }) => void)|string
    /**
     * Triggered when a keydown event is observed if there are selected events.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel[]} event.eventRecords The selected event records
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords The selected assignment records
     * @param {KeyboardEvent} event.event Browser event
     */
    onEventKeyDown: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], event: KeyboardEvent }) => void)|string
    /**
     * Triggered when a keyup event is observed if there are selected events.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel[]} event.eventRecords The selected event records
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords The selected assignment records
     * @param {KeyboardEvent} event.event Browser event
     */
    onEventKeyUp: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], event: KeyboardEvent }) => void)|string
    /**
     * This event fires on the owning Scheduler before the context menu is shown for an event. Allows manipulation of the items
     * to show in the same way as in `processItems`. Returning `false` from a listener prevents the menu from
     * being shown.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {SchedulerEventModel} event.eventRecord Event record for which the menu was triggered
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     * @param {MouseEvent} event.event Pointer event which triggered the context menu (if any)
     */
    onEventMenuBeforeShow: ((event: { source: Scheduler, items: Record<string, Partial<MenuItemConfig>>, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement, event?: MouseEvent }) => boolean|void)|string
    /**
     * This event fires on the owning Scheduler when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {MenuItem} event.item
     * @param {SchedulerEventModel} event.eventRecord
     * @param {SchedulerResourceModel} event.resourceRecord
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    onEventMenuItem: ((event: { source: Scheduler, item: MenuItem, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement }) => void)|string
    /**
     * This event fires on the owning Scheduler after showing the context menu for an event
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {Menu} event.menu The menu
     * @param {SchedulerEventModel} event.eventRecord Event record for which the menu was triggered
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    onEventMenuShow: ((event: { source: Scheduler, menu: Menu, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement }) => void)|string
    /**
     * Triggered for mouse down on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseDown: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the mouse enters an event bar.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseEnter: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the mouse leaves an event bar.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseLeave: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for mouse out events within and when moving out of an event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-eventMouseOut)
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseOut: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for mouse over events when moving into and within an event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-eventMouseOver)
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseOver: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for mouse up on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseUp: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler on each resize move event
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel} event.eventRecord Event record being resized
     * @param {Date} event.startDate
     * @param {Date} event.endDate
     * @param {HTMLElement} event.element
     */
    onEventPartialResize: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, startDate: Date, endDate: Date, element: HTMLElement }) => void)|string
    /**
     * Fires on the owning Scheduler after the resizing gesture has finished.
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {boolean} event.changed Shows if the record has been changed by the resize action
     * @param {SchedulerEventModel} event.eventRecord Event record being resized
     */
    onEventResizeEnd: ((event: { source: Scheduler, changed: boolean, eventRecord: SchedulerEventModel }) => void)|string
    /**
     * Fires on the owning Scheduler when event resizing starts
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel} event.eventRecord Event record being resized
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onEventResizeStart: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Fired any time there is a change to the events selected in the Scheduler.
     * @param {object} event Event object
     * @param {'select'|'deselect'|'update'|'clear'} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {SchedulerEventModel[]} event.selected An array of the Events added to the selection.
     * @param {SchedulerEventModel[]} event.deselected An array of the Event removed from the selection.
     * @param {SchedulerEventModel[]} event.selection The new selection.
     */
    onEventSelectionChange: ((event: { action: 'select'|'deselect'|'update'|'clear', selected: SchedulerEventModel[], deselected: SchedulerEventModel[], selection: SchedulerEventModel[] }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onExpand: ((event: { source: Panel }) => void)|string
    /**
     * Fired after a parent node record is expanded.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record which has been expanded.
     */
    onExpandNode: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * Fired when a file is dropped on the widget element
     * @param {object} event Event object
     * @param {Grid} event.source The owning Grid instance
     * @param {DataTransferItem} event.file The dropped file descriptor
     * @param {DragEvent} event.domEvent The native DragEvent
     */
    onFileDrop: ((event: { source: Grid, file: DataTransferItem, domEvent: DragEvent }) => void)|string
    /**
     * Fires on the owning Grid when cell editing is finished
     * @param {object} event Event object
     * @param {Grid} event.grid Target grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onFinishCellEdit: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when a row drag operation is aborted
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {MouseEvent} event.event
     */
    onGridRowAbort: ((event: { source: DragHelper, context: object, event: MouseEvent }) => void)|string
    /**
     * Fired before dragging starts, return false to prevent the drag operation.
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent|TouchEvent} event.event
     */
    onGridRowBeforeDragStart: ((event: { source: DragHelper, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => boolean|void)|string
    /**
     * Fired before the row drop operation is finalized. You can return false to abort the drop operation, or a
     * Promise yielding `true` / `false` which allows for asynchronous abort (e.g. first show user a confirmation dialog).
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the `record`, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    onGridRowBeforeDropFinalize: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => Promise<boolean|void>)|string
    /**
     * Fired while the row is being dragged, in the listener function you have access to `context.insertBefore` a grid /
     * tree record, and additionally `context.parent` (a TreeNode) for trees. You can signal that the drop position is
     * valid or invalid by setting `context.valid = false;`
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent} event.event
     */
    onGridRowDrag: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[] }, event: MouseEvent }) => void)|string
    /**
     * Fired when dragging starts.
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent|TouchEvent} event.event
     */
    onGridRowDragStart: ((event: { source: DragHelper, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => void)|string
    /**
     * Fired after the row drop operation has completed, regardless of validity
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid true or false depending on whether the drop position was valid
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model} event.context.record [DEPRECATED] The dragged row record
     * @param {Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the record, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    onGridRowDrop: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, record: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => void)|string
    /**
     * This event fires on the owning Grid before the context menu is shown for a header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/HeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-headerMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     */
    onHeaderMenuBeforeShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => boolean|void)|string
    /**
     * This event fires on the owning Grid when an item is selected in the header context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     */
    onHeaderMenuItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid after the context menu is shown for a header
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     */
    onHeaderMenuShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid when a check item is toggled in the header context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {boolean} event.checked Checked or not
     */
    onHeaderMenuToggleItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, checked: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOut: ((event: { event: MouseEvent }) => void)|string
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOver: ((event: { event: MouseEvent }) => void)|string
    /**
     * Fired when a user gesture causes the active item to change.
     * @param {object} event Event object
     * @param {Event} event.event The browser event which instigated navigation. May be a click or key or focus event.
     * @param {HTMLElement|null} event.item The newly active item, or `null` if focus moved out.
     * @param {HTMLElement|null} event.oldItem The previously active item, or `null` if focus is moving in.
     */
    onNavigate: ((event: { event: Event, item: HTMLElement|null, oldItem: HTMLElement|null }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a paste action is performed.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData that was pasted
     * @param {Model[]} event.modifiedRecords The records which have been modified due to the paste action
     * @param {Location} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other paste events
     */
    onPaste: ((event: { source: Grid, clipboardData: string, modifiedRecords: Model[], targetCell: Location, entityName: string }) => void)|string
    /**
     * Fires on the owning Scheduler if a paste action is not allowed
     * @param {object} event Event object
     * @param {Scheduler} event.source Owner scheduler
     * @param {SchedulerEventModel[]} event.eventRecords
     * @param {SchedulerAssignmentModel[]} event.assignmentRecords
     * @param {Date} event.date The paste date
     * @param {SchedulerResourceModel} event.resourceRecord The target resource record
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'event' to distinguish this event from other `pasteNotAllowed` events
     * @param {'overlappingEvents'|'resourceReadOnly'} event.reason A string id to use for displaying an error message to the user.
     */
    onPasteNotAllowed: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], date: Date, resourceRecord: SchedulerResourceModel, isCut: boolean, entityName: string, reason: 'overlappingEvents'|'resourceReadOnly' }) => void)|string
    /**
     * Fires on the owning Grid when export has finished
     * @param {object} event Event object
     * @param {Response} event.response Optional response, if received
     * @param {Error} event.error Optional error, if exception occurred
     */
    onPdfExport: ((event: { response?: Response, error?: Error }) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => void)|string
    /**
     * Fired after the [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) has changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.centerDate The new center date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onPresetChange: ((event: { source: Scheduler, startDate: Date, centerDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired after releasing an event, useful to cleanup of custom content added on `renderEvent` or in `eventRenderer`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord The event record
     * @param {SchedulerResourceModel} event.resourceRecord The resource record
     * @param {SchedulerAssignmentModel} event.assignmentRecord The assignment record
     * @param {object} event.renderData An object containing details about the event rendering
     * @param {HTMLElement} event.element The event bar element
     */
    onReleaseEvent: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, renderData: object, element: HTMLElement }) => void)|string
    /**
     * Fired after rendering an event, when its element is available in DOM.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord The event record
     * @param {SchedulerResourceModel} event.resourceRecord The resource record
     * @param {SchedulerAssignmentModel} event.assignmentRecord The assignment record
     * @param {object} event.renderData An object containing details about the event rendering, see [eventRenderer](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer) for details
     * @param {boolean} event.isRepaint `true` if this render is a repaint of the event, updating its existing element
     * @param {boolean} event.isReusingElement `true` if this render lead to the event reusing a released events element
     * @param {HTMLElement} event.element The event bar element
     */
    onRenderEvent: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, renderData: object, isRepaint: boolean, isReusingElement: boolean, element: HTMLElement }) => void)|string
    /**
     * Fires after a row is rendered.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Row} event.row The row that has been rendered.
     * @param {Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    onRenderRow: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows have been rendered
     * @param {object} event Event object
     * @param {Grid} event.source This grid.
     */
    onRenderRows: ((event: { source: Grid }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Fired when clicking a resource header cell
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerResourceModel} event.resourceRecord The resource record
     * @param {Event} event.event The event
     */
    onResourceHeaderClick: ((event: { source: Scheduler, resourceRecord: SchedulerResourceModel, event: Event }) => void)|string
    /**
     * Fired when activating context menu on a resource header cell
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerResourceModel} event.resourceRecord The resource record
     * @param {Event} event.event The event
     */
    onResourceHeaderContextmenu: ((event: { source: Scheduler, resourceRecord: SchedulerResourceModel, event: Event }) => void)|string
    /**
     * Fired when double clicking a resource header cell
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerResourceModel} event.resourceRecord The resource record
     * @param {Event} event.event The event
     */
    onResourceHeaderDblclick: ((event: { source: Scheduler, resourceRecord: SchedulerResourceModel, event: Event }) => void)|string
    /**
     * This event fires on the owning scheduler before the context menu is shown for a resource.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ResourceMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-resourceMenuBeforeShow)
     * @param {object} event Event object
     * @param {Scheduler} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     * @param {SchedulerResourceModel} event.resourceRecord Record
     */
    onResourceMenuBeforeShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column, resourceRecord: SchedulerResourceModel }) => boolean|void)|string
    /**
     * This event fires on the owning scheduler when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {SchedulerResourceModel} event.record Record
     */
    onResourceMenuItem: ((event: { source: Scheduler, menu: Menu, item: MenuItem, record: SchedulerResourceModel }) => void)|string
    /**
     * This event fires on the owning scheduler after the context menu is shown for a resource.
     * @param {object} event Event object
     * @param {Scheduler} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {SchedulerResourceModel} event.record Record
     */
    onResourceMenuShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, record: SchedulerResourceModel }) => void)|string
    /**
     * This event fires on the owning grid when a check item is toggled in the context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {SchedulerResourceModel} event.resourceRecord Record
     * @param {boolean} event.checked Checked or not
     */
    onResourceMenuToggleItem: ((event: { source: Scheduler, menu: Menu, item: MenuItem, resourceRecord: SchedulerResourceModel, checked: boolean }) => void)|string
    /**
     * Triggered for click on a resource time range. Only triggered if the ResourceTimeRange feature is configured with
     * `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeClick: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for right-click on a resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeContextMenu: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for double-click on a resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeDblClick: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse down ona resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeMouseDown: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse out of a resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeMouseOut: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse over on a resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeMouseOver: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered for mouse up ona resource time range. Only triggered if the ResourceTimeRange feature is configured
     * with `enableMouseEvents: true`.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {ResourceTimeRanges} event.feature The ResourceTimeRange feature
     * @param {ResourceTimeRangeModel} event.resourceTimeRangeRecord Resource time range record
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onResourceTimeRangeMouseUp: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    onResponsive: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string
    /**
     * Triggered when user clicks an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {TimeSpan} event.tick A record which encapsulates the time axis tick clicked on.
     * @param {number} event.tickIndex The index of the time axis tick clicked on.
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleClick: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when user right-clicks an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {TimeSpan} event.tick A record which encapsulates the time axis tick clicked on.
     * @param {number} event.tickIndex The index of the time axis tick clicked on.
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleContextMenu: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when user double-clicks an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {TimeSpan} event.tick A record which encapsulates the time axis tick clicked on.
     * @param {number} event.tickIndex The index of the time axis tick clicked on.
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Index of double-clicked resource
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleDblClick: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget before the context menu is shown for the schedule. Allows manipulation of the items
     * to show in the same way as in `processItems`. Returning `false` from a listener prevents the menu from
     * being shown.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {SchedulerEventModel} event.eventRecord Event record for which the menu was triggered
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    onScheduleMenuBeforeShow: ((event: { source: Scheduler, items: Record<string, Partial<MenuItemConfig>>, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, date: Date, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement }) => boolean|void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {MenuItem} event.item
     * @param {SchedulerResourceModel} event.resourceRecord
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {HTMLElement} event.element
     */
    onScheduleMenuItem: ((event: { source: Scheduler, item: MenuItem, resourceRecord: SchedulerResourceModel, date: Date, element: HTMLElement }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget after showing the context menu for the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Menu} event.menu The menu
     * @param {SchedulerResourceModel} event.resourceRecord
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {HTMLElement} event.targetElement
     */
    onScheduleMenuShow: ((event: { source: Scheduler, items: Record<string, Partial<MenuItemConfig>>, menu: Menu, resourceRecord: SchedulerResourceModel, date: Date, targetElement: HTMLElement }) => void)|string
    /**
     * Triggered when user mousedowns over an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseDown: ((event: { source: Scheduler, date: Date, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when mouse enters an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseEnter: ((event: { source: Scheduler, date: Date, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when mouse leaves an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseLeave: ((event: { source: Scheduler, event: MouseEvent }) => void)|string
    /**
     * Triggered when user moves mouse over an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {TimeSpan} event.tick A record which encapsulates the time axis tick clicked on.
     * @param {number} event.tickIndex The index of the time axis tick clicked on.
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseMove: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when user mouseups over an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseUp: ((event: { source: Scheduler, date: Date, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Grid has scrolled vertically
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {number} event.scrollTop The vertical scroll position.
     */
    onScroll: ((event: { source: Grid, scrollTop: number }) => void)|string
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select'|'deselect'} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records deselected in this operation.
     * @param {Model[]} event.selected The records selected in this operation.
     * @param {Model[]} event.selection The records in the new selection.
     * @param {Location[]} event.deselectedCells The cells deselected in this operation.
     * @param {Location[]} event.selectedCells The cells selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the new selection.
     */
    onSelectionChange: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => void)|string
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    onSelectionModeChange: ((event: { selectionMode: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * Fires when splitting the Grid.
     * @param {object} event Event object
     * @param {GridBase[]} event.subViews The sub views created by the split
     * @param {object} event.options The options passed to the split call
     * @param {'horizontal'|'vertical'|'both'} event.options.direction The direction of the split
     * @param {Column} event.options.atColumn The column to split at
     * @param {Model} event.options.atRecord The record to split at
     */
    onSplit: ((event: { subViews: GridBase[], options: { direction: 'horizontal'|'vertical'|'both', atColumn: Column, atRecord: Model } }) => void)|string
    /**
     * Fired by the Grid when the collapse icon is clicked. Return `false` to prevent the default collapse action,
     * if you want to implement your own behavior.
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterCollapseClick: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => boolean|void)|string
    /**
     * Fired by the Grid after a sub-grid has been resized using the splitter
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The resized subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterDragEnd: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fired by the Grid when a sub-grid resize gesture starts
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The subgrid about to be resized
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterDragStart: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fires on the owning Grid when editing starts
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onStartCellEdit: ((event: { source: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fires after a sub grid is collapsed.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance
     * @param {SubGrid} event.subGrid The sub grid instance
     */
    onSubGridCollapse: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Fires after a sub grid is expanded.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance
     * @param {SubGrid} event.subGrid The sub grid instance
     */
    onSubGridExpand: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Fired when the timeaxis has changed, for example by zooming or configuring a new time span.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {object} event.config Config object used to reconfigure the time axis.
     * @param {Date} event.config.startDate New start date (if supplied)
     * @param {Date} event.config.endDate New end date (if supplied)
     */
    onTimeAxisChange: ((event: { source: Scheduler, config: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fires after a click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderClick: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a right click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderContextMenu: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a double click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderDblClick: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget before the context menu is shown for the time axis header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeAxisHeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-timeAxisHeaderMenuBeforeShow)
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Time axis column
     */
    onTimeAxisHeaderMenuBeforeShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => boolean|void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget when an item is selected in the header context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Time axis column
     */
    onTimeAxisHeaderMenuItem: ((event: { source: Scheduler, menu: Menu, item: MenuItem, column: Column }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget after the context menu is shown for a header
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Time axis column
     */
    onTimeAxisHeaderMenuShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.event DEPRECATED 5.3.0 Use `domEvent` instead
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTimeRangeHeaderClick: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, event: MouseEvent, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a right click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.event DEPRECATED 5.3.0 Use `domEvent` instead
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTimeRangeHeaderContextMenu: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, event: MouseEvent, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a double click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.event DEPRECATED 5.3.0 Use `domEvent` instead
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTimeRangeHeaderDblClick: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, event: MouseEvent, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered when time selection changes
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Date} event.startDate The selected range start date, or `undefined`
     * @param {Date} event.endDate The selected range end date, or `undefined`
     */
    onTimeSelectionChange: ((event: { source: Scheduler, startDate: Date, endDate: Date }) => void)|string
    /**
     * Triggered when clicking the time selection header element
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Date} event.startDate The selected range start date
     * @param {Date} event.endDate The selected range end date
     * @param {Event} event.domEvent The raw DOM event
     */
    onTimeSelectionElementClick: ((event: { source: Scheduler, startDate: Date, endDate: Date, domEvent: Event }) => void)|string
    /**
     * Fired when the pointer-activated [timelineContext](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineDomEvents#property-timelineContext) has changed.
     * @param {object} event Event object
     * @param {TimelineContext} event.oldContext The tick/resource context being deactivated.
     * @param {TimelineContext} event.context The tick/resource context being activated.
     */
    onTimelineContextChange: ((event: { oldContext: TimelineContext, context: TimelineContext }) => void)|string
    /**
     * Fired when the *scheduler* viewport (not the overall Scheduler element) changes size.
     * This happens when the grid changes height, or when the subgrid which encapsulates the
     * scheduler column changes width.
     * @param {object} event Event object
     * @param {Widget} event.source This Scheduler
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onTimelineViewportResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Group expanded or collapsed
     * @param {object} event Event object
     * @param {Model} event.groupRecord Group record
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     */
    onToggleGroup: ((event: { groupRecord: Model, collapse: boolean }) => void)|string
    /**
     * Fired after a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    onToggleNode: ((event: { record: Model, collapse: boolean }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Tool} event.source This Panel.
     * @param {Tool} event.tool The tool which is being clicked.
     */
    onToolClick: ((event: { source: Tool, tool: Tool }) => void)|string
    /**
     * Fires when un-splitting the Grid.
     */
    onUnsplit: (() => void)|string
    /**
     * Fired when the range of dates visible within the viewport changes. This will be when
     * scrolling along a time axis.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-visibleDateRangeChange)
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onVisibleDateRangeChange: ((event: { source: Scheduler, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
}

/**
 * A visual component showing an overview timeline of events having the [showInTimeline](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/EventModel#field-showInTimeline)
 * field set to true. The timeline component subclasses the [Scheduler](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/Scheduler) and to use it,
 * simply provide it with a [ProjectModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel):
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline)
 */
export class Timeline extends Scheduler {
    /**
     * An object containing Features
     */
    features: TimelineFeaturesType
    /**
     * Fired any time there is a change to the assignments selected in the Scheduler.
     * @param {object} event Event object
     * @param {'select'|'deselect'|'update'|'clear'} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {SchedulerAssignmentModel[]} event.selected An array of the Assignments added to the selection.
     * @param {SchedulerAssignmentModel[]} event.deselected An array of the Assignments removed from the selection.
     * @param {SchedulerAssignmentModel[]} event.selection The new selection.
     */
    onAssignmentSelectionChange: ((event: { action: 'select'|'deselect'|'update'|'clear', selected: SchedulerAssignmentModel[], deselected: SchedulerAssignmentModel[], selection: SchedulerAssignmentModel[] }) => void)|string
    /**
     * Fires before an assignment is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or
     * by the event editor. Can for example be used to display a custom dialog to confirm deletion, in which
     * case records should be "manually" removed after confirmation:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-beforeAssignmentDelete)
     * @param {object} event Event object
     * @param {Scheduler} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeAssignmentDelete: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => boolean|void)|string
    /**
     * Fired any time there is going to be a change to the assignments selected in the Scheduler.
     * Returning `false` prevents the change
     * @param {object} event Event object
     * @param {string} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {SchedulerEventModel[]} event.selected An array of assignments that will be added to the selection.
     * @param {SchedulerEventModel[]} event.deselected An array of assignments that will be removed from the selection.
     * @param {SchedulerEventModel[]} event.selection The currently selected assignments, before applying `selected` and `deselected`.
     */
    onBeforeAssignmentSelectionChange: ((event: { action: string, selected: SchedulerEventModel[], deselected: SchedulerEventModel[], selection: SchedulerEventModel[] }) => boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before an event is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or by the
     * event editor. Return `false` to immediately veto the removal (or a `Promise` yielding `true` or `false`
     * for async vetoing).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-beforeEventDelete)
     * @param {object} event Event object
     * @param {Scheduler|any} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeEventDelete: ((event: { source: Scheduler|any, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean|void>)|string
    /**
     * Fired any time there is going to be a change to the events selected in the Scheduler.
     * Returning `false` prevents the change
     * @param {object} event Event object
     * @param {string} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {SchedulerEventModel[]} event.selected An array of events that will be added to the selection.
     * @param {SchedulerEventModel[]} event.deselected An array of events that will be removed from the selection.
     * @param {SchedulerEventModel[]} event.selection The currently selected events, before applying `selected` and `deselected`.
     */
    onBeforeEventSelectionChange: ((event: { action: string, selected: SchedulerEventModel[], deselected: SchedulerEventModel[], selection: SchedulerEventModel[] }) => boolean|void)|string
    /**
     * Fired before the [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) is changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onBeforePresetChange: ((event: { source: Scheduler, startDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records to be deselected in this operation.
     * @param {Model[]} event.selected The records to be selected in this operation.
     * @param {Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Location[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Location[]} event.selectedCells The cells to be selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    onBeforeSelectionChange: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellContextMenu: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellDblClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOut: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOver: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid} event.source
     * @param {Model[]|object} event.selectedCells The cells that is currently being dragged over
     */
    onDragSelecting: ((event: { source: Grid, selectedCells: Model[]|object|Partial<ModelConfig> }) => void)|string
    /**
     * Triggered for click on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventClick: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for right-click on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventContextMenu: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for double-click on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventDblClick: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for mouse down on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseDown: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the mouse enters an event bar.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseEnter: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when the mouse leaves an event bar.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseLeave: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for mouse out events within and when moving out of an event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-eventMouseOut)
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseOut: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for mouse over events when moving into and within an event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-eventMouseOver)
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseOver: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for mouse up on an event.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {SchedulerEventModel} event.eventRecord Event record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record
     * @param {MouseEvent} event.event Browser event
     */
    onEventMouseUp: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string
    /**
     * Fired any time there is a change to the events selected in the Scheduler.
     * @param {object} event Event object
     * @param {'select'|'deselect'|'update'|'clear'} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {SchedulerEventModel[]} event.selected An array of the Events added to the selection.
     * @param {SchedulerEventModel[]} event.deselected An array of the Event removed from the selection.
     * @param {SchedulerEventModel[]} event.selection The new selection.
     */
    onEventSelectionChange: ((event: { action: 'select'|'deselect'|'update'|'clear', selected: SchedulerEventModel[], deselected: SchedulerEventModel[], selection: SchedulerEventModel[] }) => void)|string
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOut: ((event: { event: MouseEvent }) => void)|string
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOver: ((event: { event: MouseEvent }) => void)|string
    /**
     * Fired when a user gesture causes the active item to change.
     * @param {object} event Event object
     * @param {Event} event.event The browser event which instigated navigation. May be a click or key or focus event.
     * @param {HTMLElement|null} event.item The newly active item, or `null` if focus moved out.
     * @param {HTMLElement|null} event.oldItem The previously active item, or `null` if focus is moving in.
     */
    onNavigate: ((event: { event: Event, item: HTMLElement|null, oldItem: HTMLElement|null }) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => void)|string
    /**
     * Fired after the [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) has changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.centerDate The new center date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onPresetChange: ((event: { source: Scheduler, startDate: Date, centerDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    onResponsive: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string
    /**
     * Triggered when user clicks an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {TimeSpan} event.tick A record which encapsulates the time axis tick clicked on.
     * @param {number} event.tickIndex The index of the time axis tick clicked on.
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleClick: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when user right-clicks an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {TimeSpan} event.tick A record which encapsulates the time axis tick clicked on.
     * @param {number} event.tickIndex The index of the time axis tick clicked on.
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleContextMenu: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when user double-clicks an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {TimeSpan} event.tick A record which encapsulates the time axis tick clicked on.
     * @param {number} event.tickIndex The index of the time axis tick clicked on.
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Index of double-clicked resource
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleDblClick: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when user mousedowns over an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseDown: ((event: { source: Scheduler, date: Date, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when mouse enters an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseEnter: ((event: { source: Scheduler, date: Date, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when mouse leaves an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseLeave: ((event: { source: Scheduler, event: MouseEvent }) => void)|string
    /**
     * Triggered when user moves mouse over an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {TimeSpan} event.tick A record which encapsulates the time axis tick clicked on.
     * @param {number} event.tickIndex The index of the time axis tick clicked on.
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseMove: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when user mouseups over an empty area in the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {Date} event.date Date at mouse position
     * @param {Date} event.tickStartDate The start date of the current time axis tick
     * @param {Date} event.tickEndDate The end date of the current time axis tick
     * @param {Row} event.row Row under the mouse (in horizontal mode only)
     * @param {number} event.index Resource index
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {MouseEvent} event.event Browser event
     */
    onScheduleMouseUp: ((event: { source: Scheduler, date: Date, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select'|'deselect'} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records deselected in this operation.
     * @param {Model[]} event.selected The records selected in this operation.
     * @param {Model[]} event.selection The records in the new selection.
     * @param {Location[]} event.deselectedCells The cells deselected in this operation.
     * @param {Location[]} event.selectedCells The cells selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the new selection.
     */
    onSelectionChange: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => void)|string
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    onSelectionModeChange: ((event: { selectionMode: object }) => void)|string
    /**
     * Fires after a click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderClick: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a right click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderContextMenu: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a double click on a time axis cell
     * @param {object} event Event object
     * @param {TimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderDblClick: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fired when the pointer-activated [timelineContext](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineDomEvents#property-timelineContext) has changed.
     * @param {object} event Event object
     * @param {TimelineContext} event.oldContext The tick/resource context being deactivated.
     * @param {TimelineContext} event.context The tick/resource context being activated.
     */
    onTimelineContextChange: ((event: { oldContext: TimelineContext, context: TimelineContext }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TimelineConfig>} config
     */
    constructor(config?: Partial<TimelineConfig>);
}

type VersionGridFeaturesType = {
    cellCopyPaste: CellCopyPaste
    cellEdit: GridCellEdit
    cellMenu: CellMenu
    cellTooltip: CellTooltip
    columnAutoWidth: ColumnAutoWidth
    columnDragToolbar: ColumnDragToolbar
    columnPicker: ColumnPicker
    columnRename: ColumnRename
    columnReorder: ColumnReorder
    columnResize: ColumnResize
    excelExporter: GridExcelExporter
    fileDrop: FileDrop
    fillHandle: FillHandle
    filter: Filter
    filterBar: FilterBar
    group: Group
    groupSummary: GridGroupSummary
    headerMenu: HeaderMenu
    mergeCells: MergeCells
    pdfExport: GridPdfExport
    print: GridPrint
    quickFind: QuickFind
    regionResize: RegionResize
    rowCopyPaste: RowCopyPaste
    rowExpander: RowExpander
    rowReorder: GridRowReorder
    rowResize: GridRowResize
    search: Search
    sort: Sort
    split: GridSplit
    stickyCells: StickyCells
    stripe: Stripe
    summary: GridSummary
    tree: Tree
    treeGroup: TreeGroup
}

type VersionGridFeaturesConfigType = {
    cellCopyPaste: string|boolean|Partial<CellCopyPasteConfig>
    cellEdit: string|boolean|Partial<GridCellEditConfig>
    cellMenu: string|boolean|Partial<CellMenuConfig>
    cellTooltip: string|boolean|Partial<CellTooltipConfig>
    columnAutoWidth: string|boolean|Partial<ColumnAutoWidthConfig>
    columnDragToolbar: string|boolean|Partial<ColumnDragToolbarConfig>
    columnPicker: string|boolean|Partial<ColumnPickerConfig>
    columnRename: string|boolean|Partial<ColumnRenameConfig>
    columnReorder: string|boolean|Partial<ColumnReorderConfig>
    columnResize: string|boolean|Partial<ColumnResizeConfig>
    excelExporter: string|boolean|Partial<GridExcelExporterConfig>
    fileDrop: string|boolean|Partial<FileDropConfig>
    fillHandle: string|boolean|Partial<FillHandleConfig>
    filter: string|boolean|Partial<FilterConfig>
    filterBar: string|boolean|Partial<FilterBarConfig>
    group: string|boolean|Partial<GroupConfig>
    groupSummary: string|boolean|Partial<GridGroupSummaryConfig>
    headerMenu: string|boolean|Partial<HeaderMenuConfig>
    mergeCells: string|boolean|Partial<MergeCellsConfig>
    pdfExport: string|boolean|Partial<GridPdfExportConfig>
    print: string|boolean|Partial<GridPrintConfig>
    quickFind: string|boolean|Partial<QuickFindConfig>
    regionResize: string|boolean|Partial<RegionResizeConfig>
    rowCopyPaste: string|boolean|Partial<RowCopyPasteConfig>
    rowExpander: string|boolean|Partial<RowExpanderConfig>
    rowReorder: string|boolean|Partial<GridRowReorderConfig>
    rowResize: string|boolean|Partial<GridRowResizeConfig>
    search: string|boolean|Partial<SearchConfig>
    sort: string|boolean|Partial<SortConfig>
    split: string|boolean|Partial<GridSplitConfig>
    stickyCells: string|boolean|Partial<StickyCellsConfig>
    stripe: string|boolean|Partial<StripeConfig>
    summary: string|boolean|Partial<GridSummaryConfig>
    tree: string|boolean|Partial<TreeConfig>
    treeGroup: string|boolean|Partial<TreeGroupConfig>
}

/**
 * Type with configuration options for [VersionGrid](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/VersionGrid) class.
 */
type VersionGridConfig = ContainerItemConfig & {
    type: 'versiongrid'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * Keep the tooltip open if user moves the mouse over it.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-allowOver)
     */
    allowOver: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Set to true to anchor tooltip to the triggering target. If set to `false`, the tooltip
     * will align to the mouse position. When set to `false`, it will also set `anchor: false`
     * to hide anchor arrow.
     */
    anchorToTarget: boolean
    /**
     * Set to `false` to prevent remove row animation and remove the delay related to that.
     */
    animateRemovingRows: boolean
    /**
     * When the [Tree](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/Tree) feature is in use and the Store is a tree store, this
     * config may be set to `true` to visually animate branch node expand and collapse operations.
     * *This is not supported in Scheduler and Gantt*
     */
    animateTreeNodeToggle: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#function-hide) when the user clicks or
     * taps outside its widget. Configure as `false` to make a Tooltip non-transient when user clicks outside it.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-autoClose)
     */
    autoClose: boolean
    /**
     * Automatically set grids height to fit all rows (no scrolling in the grid). In general you should avoid
     * using `autoHeight: true`, since it will bypass Grids virtual rendering and render all rows at once, which
     * in a larger grid is really bad for performance.
     */
    autoHeight: boolean
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#function-hide) when the mouse exits the target
     * element. Configure as `false` to make a Tooltip non-transient.
     */
    autoHide: boolean
    /**
     * Show immediately when created
     */
    autoShow: boolean
    /**
     * Update assigned [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-bbar)
     */
    bbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-bodyCls)
     */
    bodyCls: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Show a tool in the header to close this Popup, and allow `ESC` close it.
     * The tool is available in the [tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Toolable#property-tools) object
     * under the name `close`. It uses the CSS class `b-popup-close` to apply a
     * default close icon. This may be customized with your own CSS rules.
     */
    closable: boolean
    /**
     * The action to take when calling the [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) method.
     * By default, the popup is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-closeAction)
     */
    closeAction: 'hide'|'destroy'
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-cls)
     */
    cls: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-collapsible)
     */
    collapsible: boolean|Partial<PanelCollapserConfig>|Partial<PanelCollapserOverlayConfig>
    /**
     * Set to `false` to not show column lines. End result might be overruled by/differ between themes.
     */
    columnLines: boolean
    /**
     * Accepts column definitions for the grid during initialization. They will be used to create
     * [Column](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column) instances that are added to a [ColumnStore](#Grid/data/ColumnStore).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-columns)
     */
    columns: ColumnStore|Partial<GridColumnConfig>[]|Partial<ColumnStoreConfig>
    /**
     * The id of the version currently being compared, if any.
     */
    comparingVersionId: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Event which is used to show context menus.
     * Available options are: 'contextmenu', 'click', 'dblclick'.
     */
    contextMenuTriggerEvent: 'contextmenu'|'click'|'dblclick'
    /**
     * Convenient shortcut to set data in grids store both during initialization and at runtime. Can also be
     * used to retrieve data at runtime, although we do recommend interacting with Grids store instead using
     * the [store](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#property-store) property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-data)
     */
    data: object[]|Model[]
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The date format used for displaying date values in change actions.
     */
    dateFormat: string
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * Region to which columns are added when they have none specified
     */
    defaultRegion: string
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * true to destroy the store when the grid is destroyed
     */
    destroyStore: boolean
    /**
     * Set to `true` to not get a warning when using another base class than GridRowModel for your grid data. If
     * you do, and would like to use the full feature set of the grid then include the fields from GridRowModel
     * in your model definition.
     */
    disableGridRowModelWarning: boolean
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * The time (in milliseconds) that the Tooltip should stay visible for when it shows over its
     * target. If the tooltip is anchored to its target, then moving the mouse during this time
     * resets the timer so that the tooltip will remain visible.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-dismissDelay)
     */
    dismissDelay: number
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * Text or HTML to display when there is no data to display in the grid
     */
    emptyText: string
    /**
     * Configure this as `true` to allow elements within cells to be styled as `position: sticky`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-enableSticky)
     */
    enableSticky: boolean
    /**
     * Set to true to allow text selection in the grid cells. Note, this cannot be used simultaneously with the
     * `RowReorder` feature.
     */
    enableTextSelection: boolean
    /**
     * Set to true to listen for CTRL-Z (CMD-Z on Mac OS) keyboard event and trigger undo (redo when SHIFT is
     * pressed). Only applicable when using a [StateTrackingManager](https://bryntum.com/products/schedulerpro/docs/api/Core/data/stm/StateTrackingManager).
     */
    enableUndoRedoKeys: boolean
    /**
     * An object containing Feature configuration objects (or `true` if no configuration is required)
     * keyed by the Feature class name in all lowercase.
     */
    features: Partial<VersionGridFeaturesConfigType>
    /**
     * Set to `true` to stretch the last column in a grid with all fixed width columns
     * to fill extra available space if the grid's width is wider than the sum of all
     * configured column widths.
     */
    fillLastColumn: boolean
    /**
     * Use fixed row height. Setting this to `true` will configure the underlying RowManager to use fixed row
     * height, which sacrifices the ability to use rows with variable height to gain a fraction better
     * performance.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-fixedRowHeight)
     */
    fixedRowHeight: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * By default a Popup is focused when it is shown.
     * Configure this as `false` to prevent automatic focus on show.
     */
    focusOnToFront: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-footer)
     */
    footer: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * DOM element to attach tooltip to. By default, the mouse entering this element will kick off a timer
     * (see [hoverDelay](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#config-hoverDelay)) to show itself.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-forElement)
     */
    forElement: HTMLElement
    /**
     * A CSS selector which targets child elements of the [forElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#config-forElement) that should produce a
     * tooltip when hovered over.
     */
    forSelector: string
    /**
     * Refresh entire row when a record changes (`true`) or, if possible, only the cells affected (`false`).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-fullRowRefresh)
     */
    fullRowRefresh: boolean
    /**
     * A method, or the *name* of a method called to update the tooltip's content when the
     * cursor is moved over a target. It receives one argument containing context about the
     * tooltip and show operation. The function should return a string, or a Promise yielding
     * a string.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-getHtml)
     * @param {object} context
     * @param {Tooltip} context.tip The tooltip instance
     * @param {HTMLElement} context.element The Element for which the Tooltip is monitoring mouse movement
     * @param {HTMLElement} context.activeTarget The target element that triggered the show
     * @param {Event} context.event The raw DOM event
     * @returns {string|Promise}
     */
    getHtml: ((context: { tip: Tooltip, element: HTMLElement, activeTarget: HTMLElement, event: Event }) => string|Promise<any>)|string
    /**
     * A function called for each row to determine its height. It is passed a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) and
     * expected to return the desired height of that records row. If the function returns a falsy value, Grids
     * configured [rowHeight](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#config-rowHeight) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-getRowHeight)
     * @param {Model} getRowHeight.record Record to determine row height for
     * @returns {number} Desired row height
     */
    getRowHeight: (getRowHeight: { record: Model }) => number
    /**
     * A config [object](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-header)
     */
    header: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * The time (in milliseconds) for which the Tooltip remains visible when the mouse leaves the target.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-hideDelay)
     */
    hideDelay: number|boolean
    /**
     * Set to `true` to hide the footer elements
     */
    hideFooters: boolean
    /**
     * Set to `true` to hide the column header elements
     */
    hideHeaders: boolean
    /**
     * Set to `true` to hide the Grid's horizontal scrollbar(s)
     */
    hideHorizontalScrollbar: boolean
    /**
     * By default, when moving rapidly from target to target, if, when mouseovering
     * a new target, the tip is still visible, the tooltip does not hide, it remains
     * visible, but updates its content however it is configured to do so.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-hideOnDelegateChange)
     */
    hideOnDelegateChange: boolean
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The amount of time to hover before showing
     */
    hoverDelay: number
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * See [Keyboard shortcuts](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/Grid#keyboard-shortcuts) for details
     */
    keyMap: Record<string, string>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-listeners)
     */
    listeners: object
    /**
     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object, or a message to be shown when a store is performing a remote
     * operation, or Crud Manager is loading data from the sever. Set to `null` to disable default load mask.
     */
    loadMask: string|Partial<MaskConfig>|null
    /**
     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when data is loading. The message and optional configuration from the
     * [loadMask](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/LoadMaskable#config-loadMask) config take priority over these options, just as they do
     * for `maskDefaults`, respectively.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-loadMaskDefaults)
     */
    loadMaskDefaults: Partial<MaskConfig>
    /**
     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when an error occurs loading data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-loadMaskError)
     */
    loadMaskError: Partial<MaskConfig>|Mask|boolean
    /**
     * The message to show while an async tooltip is fetching its content.
     */
    loadingMsg: string
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Time in ms until a longpress is triggered
     */
    longPressTime: number
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * Grids change the `maskDefaults` to cover only their `body` element.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * Show a tool in the header to maximize this popup
     */
    maximizable: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized: boolean
    /**
     * Grid's `min-height`. Defaults to `10em` to be sure that the Grid always has a height wherever it is
     * inserted.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-minHeight)
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * Optionally show an opaque mask below this Popup when shown.
     * Configure this as `true` to show the mask.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-modal)
     */
    modal: boolean|{
        closeOnMaskTap?: boolean
        transparent?: boolean
    }
    /**
     * Grid monitors window resize by default.
     */
    monitorResize: boolean
    /**
     * Horizontal offset from mouse when [anchorToTarget](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-mouseOffsetX)
     */
    mouseOffsetX: number
    /**
     * Vertical offset from mouse when [anchorToTarget](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`
     */
    mouseOffsetY: number
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-owner)
     */
    owner: Widget
    /**
     * Specify plugins (an array of classes) in config
     */
    plugins: Function[]
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-positioned)
     */
    positioned: boolean
    /**
     * True to preserve focused cell after loading new data
     */
    preserveFocusOnDatasetChange: boolean
    /**
     * Preserve the grid's vertical scroll position when changesets are applied, as in the case of remote
     * changes, or when stores are configured with [syncDataOnLoad](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-syncDataOnLoad).
     */
    preserveScroll: PreserveScrollOptions|boolean
    /**
     * Specify `true` to preserve vertical scroll position after store actions that trigger a `refresh` event,
     * such as loading new data and filtering.
     */
    preserveScrollOnDatasetChange: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * The [ProjectModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel) whose versions and changes are being observed in this grid.
     */
    project: ProjectModel
    /**
     * Set to `true` to make the grid read-only, by disabling any UIs for modifying data.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-ref)
     */
    ref: string
    /**
     * Set to `false` to only measure cell contents when double clicking the edge between column headers.
     */
    resizeToFitIncludesHeader: boolean
    /**
     * "Break points" for which responsive config to use for columns and css.
     */
    responsiveLevels: Record<string, number|string>
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Row height in pixels. This allows the default height for rows to be controlled. Note that it may be
     * overriden by specifying a [rowHeight](https://bryntum.com/products/schedulerpro/docs/api/Grid/data/GridRowModel#field-rowHeight) on a per record basis, or from
     * a column [renderer](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column#config-renderer).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-rowHeight)
     */
    rowHeight: number
    /**
     * Set to `false` to not show row lines. End result might be overruled by/differ between themes.
     */
    rowLines: boolean
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Configuration values for the [ScrollManager](https://bryntum.com/products/schedulerpro/docs/api/Core/util/ScrollManager) class on initialization. Returns the
     * [ScrollManager](https://bryntum.com/products/schedulerpro/docs/api/Core/util/ScrollManager) at runtime.
     */
    scrollManager: Partial<ScrollManagerConfig>|ScrollManager
    /**
     * Configures whether the grid is scrollable in the `Y` axis. This is used to configure a [GridScroller](https://bryntum.com/products/schedulerpro/docs/api/Grid/util/GridScroller).
     * See the [scrollerClass](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#config-scrollerClass) config option.
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * The class to instantiate to use as the [scrollable](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#config-scrollable). Defaults to [GridScroller](#Grid/util/GridScroller).
     */
    scrollerClass: typeof Scroller
    /**
     * The selection settings, where you can set these boolean flags to control what is selected. Options below:
     * @param {boolean} selectionMode.cell Set to `true` to enable cell selection. This takes precedence over row selection, but rows can still be selected programmatically or with checkbox or RowNumber selection. Required for `column` selection
     * @param {boolean} selectionMode.multiSelect Allow multiple selection with ctrl and shift+click or with `checkbox` selection. Required for `dragSelect` and `column` selection
     * @param {boolean|CheckColumnConfig} selectionMode.checkbox Set to `true` to add a checkbox selection column to the grid, or pass a config object for the [CheckColumn](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/CheckColumn)
     * @param {number|string} selectionMode.checkboxIndex Positions the checkbox column at the provided index or to the right of a provided column id. Defaults to 0 or to the right of an included `RowNumberColumn`
     * @param {boolean} selectionMode.checkboxOnly Select rows only when clicking in the checkbox column. Requires cell selection config to be `false` and checkbox to be set to `true`. This setting was previously named `rowCheckboxSelection`
     * @param {boolean} selectionMode.showCheckAll Set to `true` to add a checkbox to the selection column header to select/deselect all rows. Requires checkbox to also be set to `true`
     * @param {boolean} selectionMode.deselectFilteredOutRecords Set to `true` to deselect records when they are filtered out
     * @param {boolean|string} selectionMode.includeChildren Set to `true` to also select/deselect child nodes when a parent node is selected by toggling the checkbox. Set to `always` to always select/deselect child nodes.
     * @param {boolean|'all'|'some'} selectionMode.includeParents Set to `all` or `true` to auto select parent if all its children gets selected. If one gets deselected, the parent will also be deselected. Set to 'some' to select parent if one of its children gets selected. The parent will be deselected if all children gets deselected.
     * @param {boolean} selectionMode.preserveSelectionOnPageChange In `row` selection mode, this flag controls whether the Grid should preserve its selection when loading a new page of a paged data store. Defaults to `false`
     * @param {boolean} selectionMode.preserveSelectionOnDatasetChange In `row` selection mode, this flag controls whether the Grid should preserve its selection of cells / rows when loading a new dataset (assuming the selected records are included in the newly loaded dataset)
     * @param {boolean} selectionMode.deselectOnClick Toggles whether the Grid should deselect a selected row or cell when clicking it
     * @param {boolean} selectionMode.dragSelect Set to `true` to enable multiple selection by dragging. Requires `multiSelect` to also be set to `true`. Also requires the [RowReorder](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/RowReorder) feature to be set to [gripOnly](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/RowReorder#config-gripOnly).
     * @param {boolean} selectionMode.selectOnKeyboardNavigation Set to `false` to disable auto-selection by keyboard navigation. This will activate the `select` keyboard shortcut.
     * @param {boolean} selectionMode.column Set to `true` to be able to select whole columns of cells by clicking the header. Requires cell to be set to `true`
     * @param {boolean|RowNumberColumnConfig} selectionMode.rowNumber Set to `true` or a config object to add a RowNumberColumn which, when clicked, selects the row.
     * @param {boolean} selectionMode.selectRecordOnCell Set to `false` not to include the record in the `selectedRecords` array when one of the record row's cells is selected.
     */
    selectionMode: object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Configure as `true` to have the grid show a red "changed" tag in cells who's
     * field value has changed and not yet been committed.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-showDirty)
     */
    showDirty: boolean|{
        duringEdit?: boolean
    }
    /**
     * Whether to show only versions that have been assigned a specific name.
     */
    showNamedVersionsOnly: boolean
    /**
     * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover
     */
    showOnClick: boolean
    /**
     * Show on hover
     */
    showOnHover: boolean
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Whether to display transactions not yet associated with a version.
     */
    showUnattachedTransactions: boolean
    /**
     * Whether to include version rows in the display.
     */
    showVersions: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-stateId)
     */
    stateId: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/schedulerpro/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-stateProvider)
     */
    stateProvider: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-stateful)
     */
    stateful: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-statefulEvents)
     */
    statefulEvents: object|string[]
    /**
     * The store instance or config object that holds the records to be displayed by this TreeGrid. If assigning
     * a store instance, it must be configured with `tree: true`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-store)
     */
    store: Store|Partial<StoreConfig>
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar). If the value assigned to a strip is an array, it is converted to
     * the toolbar's [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-strips)
     */
    strips: Record<string, Partial<ContainerItemConfig>>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * An object containing sub grid configuration objects keyed by a `region` property.
     * By default, grid has a 'locked' region (if configured with locked columns) and a 'normal' region.
     * The 'normal' region defaults to use `flex: 1`.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-subGridConfigs)
     */
    subGridConfigs: Record<string, Partial<SubGridConfig>>
    /**
     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object, or a message to be shown when Crud Manager
     * is persisting changes on the server. Set to `null` to disable default sync mask.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-syncMask)
     */
    syncMask: string|Partial<MaskConfig>|null
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-tbar)
     */
    tbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display in the header. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-title)
     */
    title: string
    /**
     * The [tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-tools)
     */
    tools: Record<string, Partial<ToolConfig>>
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * By default, once a tooltip is shown aligned as requested, it stays put.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-trackMouse)
     */
    trackMouse: boolean
    /**
     * Animation transition duration in milliseconds.
     */
    transitionDuration: number
    /**
     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
     * forwards or backwards.
     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
     */
    trapFocus: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#config-y)
     */
    y: number
    /**
     * Fires on the owning Grid before the cell editing is canceled, return `false` to prevent cancellation.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     */
    onBeforeCancelCellEdit: ((event: { source: Grid, editorContext: Location }) => boolean|void)|string
    /**
     * Fires on the owning Grid before deleting a range of selected cell values by pressing `Backspace` or `Del`
     * buttons while [autoEdit](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellEdit#config-autoEdit) is set to `true`. Return `false` to prevent editing.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {(Location|Model)[]} event.gridSelection An array of cell selectors or records that will have their values deleted (the records themself will not get deleted, only visible column values).
     */
    onBeforeCellDelete: ((event: { source: Grid, gridSelection: (Location|Model)[] }) => boolean|void)|string
    /**
     * Fires on the owning Grid before editing starts, return `false` to prevent editing
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {Field} event.editorContext.editor The input field that the column is configured with (see [field](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column#config-field)). This property mey be replaced to be a different [field](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field) in the handler, to take effect just for the impending edit.
     * @param {Function} event.editorContext.finalize An async function may be injected into this property which performs asynchronous finalization tasks such as complex validation of confirmation. The value `true` or `false` must be returned.
     * @param {object} event.editorContext.finalize.context An object describing the editing context upon requested completion of the edit.
     * @param {any} event.editorContext.value Cell value
     */
    onBeforeCellEditStart: ((event: { source: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Field, finalize: { context?: object }, value: any } }) => boolean|void)|string
    /**
     * Fired when the [close](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Popup} event.source This Popup
     */
    onBeforeClose: ((event: { source: Popup }) => void)|string
    /**
     * This event is fired prior to starting a column drag gesture. The drag is canceled if a listener returns `false`.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    onBeforeColumnDragStart: ((event: { source: Grid, column: Column, event: Event }) => boolean|void)|string
    /**
     * This event is fired when a column is dropped, and you can return false from a listener to abort the operation.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Column} event.newParent The new parent column.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    onBeforeColumnDropFinalize: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, event: Event, region: string }) => boolean|void)|string
    /**
     * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location[]} event.cells The cells about to be copied or cut
     * @param {string} event.data The string data about to be copied or cut
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other beforeCopy events
     */
    onBeforeCopy: ((event: { source: Grid, cells: Location[], data: string, isCut: boolean, entityName: string }) => Promise<boolean|void>)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires on the owning Grid before the cell editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * @param {object} event Event object
     * @param {Grid} event.grid Target grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onBeforeFinishCellEdit: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData about to be pasted
     * @param {Location} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other beforePaste events
     */
    onBeforePaste: ((event: { source: Grid, clipboardData: string, targetCell: Location, entityName: string }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Grid before export started. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {object} event.config Export config
     */
    onBeforePdfExport: ((event: { config: object }) => boolean|void)|string
    /**
     * Fires before a row is rendered.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Row} event.row The row about to be rendered.
     * @param {Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    onBeforeRenderRow: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows are about to be rendered
     * @param {object} event Event object
     * @param {Grid} event.source This grid.
     */
    onBeforeRenderRows: ((event: { source: Grid }) => void)|string
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records to be deselected in this operation.
     * @param {Model[]} event.selected The records to be selected in this operation.
     * @param {Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Location[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Location[]} event.selectedCells The cells to be selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    onBeforeSelectionChange: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fired when a group is going to be expanded or collapsed using the UI.
     * Returning `false` from a listener prevents the operation
     * @param {object} event Event object
     * @param {Model} event.groupRecord Group record
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     * @param {Event} event.domEvent The user interaction event (eg a `click` event) if the toggle request was instigated by user interaction.
     */
    onBeforeToggleGroup: ((event: { groupRecord: Model, collapse: boolean, domEvent: Event }) => boolean|void)|string
    /**
     * Fired before a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    onBeforeToggleNode: ((event: { source: Grid, record: Model, collapse: boolean }) => void)|string
    /**
     * Fires on the owning Grid when editing is cancelled
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Event} event.event Included if the cancellation was triggered by a DOM event
     */
    onCancelCellEdit: ((event: { source: Grid, editorContext: Location, event: Event }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellContextMenu: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellDblClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * This event fires on the owning grid before the context menu is shown for a cell.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#event-cellMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuBeforeShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column, record: Model }) => boolean|void)|string
    /**
     * This event fires on the owning grid when an item is selected in the cell context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid after the context menu is shown for a cell.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid when a check item is toggled in the cell context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     * @param {boolean} event.checked Checked or not
     */
    onCellMenuToggleItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model, checked: boolean }) => void)|string
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOut: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOver: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onCollapse: ((event: { source: Panel }) => void)|string
    /**
     * Fired before a parent node record is collapsed.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record which has been collapsed.
     */
    onCollapseNode: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * This event is fired when a column is being dragged, and you can set the `valid` flag on t
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Event} event.event The browser event.
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     */
    onColumnDrag: ((event: { source: Grid, column: Column, insertBefore: Column, event: Event, context: { valid: boolean } }) => void)|string
    /**
     * This event is fired when a column drag gesture has started.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    onColumnDragStart: ((event: { source: Grid, column: Column, event: Event }) => void)|string
    /**
     * This event is always fired after a column is dropped. The `valid` param is true if the operation was not
     * vetoed and the column was moved in the column store.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Column} event.newParent The new parent column.
     * @param {boolean} event.valid true if the operation was not vetoed.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    onColumnDrop: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, valid: boolean, event: Event, region: string }) => boolean|void)|string
    /**
     * Fires when the user chooses to compare a selected version.
     * @param {object} event Event object
     * @param {VersionModel} event.version The [VersionModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/VersionModel) being restored
     */
    onCompare: ((event: { version: VersionModel }) => void)|string
    /**
     * This event fires on the owning widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Widget} event.source The owning widget
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     */
    onContextMenuItem: ((event: { source: Widget, menu: Menu, item: MenuItem }) => void)|string
    /**
     * This event fires on the owning widget when a check item is toggled in the context menu.
     * @param {object} event Event object
     * @param {Widget} event.source The owning widget
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {boolean} event.checked Checked or not
     */
    onContextMenuToggleItem: ((event: { source: Widget, menu: Menu, item: MenuItem, checked: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a copy action is performed.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location[]} event.cells The cells about to be copied or cut
     * @param {string} event.copiedDataString The concatenated data string that was copied or cut
     * @param {boolean} event.isCut `true` if this was a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other copy events
     */
    onCopy: ((event: { source: Grid, cells: Location[], copiedDataString: string, isCut: boolean, entityName: string }) => void)|string
    /**
     * Fired when data in the store changes.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#event-dataChange)
     * @param {object} event Event object
     * @param {Grid} event.source Owning grid
     * @param {Store} event.store The originating store
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'updatemultiple'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onDataChange: ((event: { source: Grid, store: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid} event.source
     * @param {Model[]|object} event.selectedCells The cells that is currently being dragged over
     */
    onDragSelecting: ((event: { source: Grid, selectedCells: Model[]|object|Partial<ModelConfig> }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onExpand: ((event: { source: Panel }) => void)|string
    /**
     * Fired after a parent node record is expanded.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record which has been expanded.
     */
    onExpandNode: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * Fired when a file is dropped on the widget element
     * @param {object} event Event object
     * @param {Grid} event.source The owning Grid instance
     * @param {DataTransferItem} event.file The dropped file descriptor
     * @param {DragEvent} event.domEvent The native DragEvent
     */
    onFileDrop: ((event: { source: Grid, file: DataTransferItem, domEvent: DragEvent }) => void)|string
    /**
     * Fires on the owning Grid when cell editing is finished
     * @param {object} event Event object
     * @param {Grid} event.grid Target grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onFinishCellEdit: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when a row drag operation is aborted
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {MouseEvent} event.event
     */
    onGridRowAbort: ((event: { source: DragHelper, context: object, event: MouseEvent }) => void)|string
    /**
     * Fired before dragging starts, return false to prevent the drag operation.
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent|TouchEvent} event.event
     */
    onGridRowBeforeDragStart: ((event: { source: DragHelper, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => boolean|void)|string
    /**
     * Fired before the row drop operation is finalized. You can return false to abort the drop operation, or a
     * Promise yielding `true` / `false` which allows for asynchronous abort (e.g. first show user a confirmation dialog).
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the `record`, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    onGridRowBeforeDropFinalize: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => Promise<boolean|void>)|string
    /**
     * Fired while the row is being dragged, in the listener function you have access to `context.insertBefore` a grid /
     * tree record, and additionally `context.parent` (a TreeNode) for trees. You can signal that the drop position is
     * valid or invalid by setting `context.valid = false;`
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent} event.event
     */
    onGridRowDrag: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[] }, event: MouseEvent }) => void)|string
    /**
     * Fired when dragging starts.
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent|TouchEvent} event.event
     */
    onGridRowDragStart: ((event: { source: DragHelper, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => void)|string
    /**
     * Fired after the row drop operation has completed, regardless of validity
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid true or false depending on whether the drop position was valid
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model} event.context.record [DEPRECATED] The dragged row record
     * @param {Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the record, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    onGridRowDrop: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, record: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => void)|string
    /**
     * This event fires on the owning Grid before the context menu is shown for a header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/HeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#event-headerMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     */
    onHeaderMenuBeforeShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => boolean|void)|string
    /**
     * This event fires on the owning Grid when an item is selected in the header context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     */
    onHeaderMenuItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid after the context menu is shown for a header
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     */
    onHeaderMenuShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid when a check item is toggled in the header context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {boolean} event.checked Checked or not
     */
    onHeaderMenuToggleItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, checked: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOut: ((event: { event: MouseEvent }) => void)|string
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOver: ((event: { event: MouseEvent }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a paste action is performed.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData that was pasted
     * @param {Model[]} event.modifiedRecords The records which have been modified due to the paste action
     * @param {Location} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other paste events
     */
    onPaste: ((event: { source: Grid, clipboardData: string, modifiedRecords: Model[], targetCell: Location, entityName: string }) => void)|string
    /**
     * Fires on the owning Grid when export has finished
     * @param {object} event Event object
     * @param {Response} event.response Optional response, if received
     * @param {Error} event.error Optional error, if exception occurred
     */
    onPdfExport: ((event: { response?: Response, error?: Error }) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fires after a row is rendered.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Row} event.row The row that has been rendered.
     * @param {Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    onRenderRow: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows have been rendered
     * @param {object} event Event object
     * @param {Grid} event.source This grid.
     */
    onRenderRows: ((event: { source: Grid }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    onResponsive: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string
    /**
     * Fires when the user chooses to restore a selected version.
     * @param {object} event Event object
     * @param {VersionModel} event.version The [VersionModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/VersionModel) being restored
     */
    onRestore: ((event: { version: VersionModel }) => void)|string
    /**
     * Grid has scrolled vertically
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {number} event.scrollTop The vertical scroll position.
     */
    onScroll: ((event: { source: Grid, scrollTop: number }) => void)|string
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select'|'deselect'} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records deselected in this operation.
     * @param {Model[]} event.selected The records selected in this operation.
     * @param {Model[]} event.selection The records in the new selection.
     * @param {Location[]} event.deselectedCells The cells deselected in this operation.
     * @param {Location[]} event.selectedCells The cells selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the new selection.
     */
    onSelectionChange: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => void)|string
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    onSelectionModeChange: ((event: { selectionMode: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * Fires when splitting the Grid.
     * @param {object} event Event object
     * @param {GridBase[]} event.subViews The sub views created by the split
     * @param {object} event.options The options passed to the split call
     * @param {'horizontal'|'vertical'|'both'} event.options.direction The direction of the split
     * @param {Column} event.options.atColumn The column to split at
     * @param {Model} event.options.atRecord The record to split at
     */
    onSplit: ((event: { subViews: GridBase[], options: { direction: 'horizontal'|'vertical'|'both', atColumn: Column, atRecord: Model } }) => void)|string
    /**
     * Fired by the Grid when the collapse icon is clicked. Return `false` to prevent the default collapse action,
     * if you want to implement your own behavior.
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterCollapseClick: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => boolean|void)|string
    /**
     * Fired by the Grid after a sub-grid has been resized using the splitter
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The resized subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterDragEnd: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fired by the Grid when a sub-grid resize gesture starts
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The subgrid about to be resized
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterDragStart: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fires on the owning Grid when editing starts
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onStartCellEdit: ((event: { source: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fires when the user chooses to stop comparing a currently compared version.
     */
    onStopCompare: (() => void)|string
    /**
     * Fires after a sub grid is collapsed.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance
     * @param {SubGrid} event.subGrid The sub grid instance
     */
    onSubGridCollapse: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Fires after a sub grid is expanded.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance
     * @param {SubGrid} event.subGrid The sub grid instance
     */
    onSubGridExpand: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Group expanded or collapsed
     * @param {object} event Event object
     * @param {Model} event.groupRecord Group record
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     */
    onToggleGroup: ((event: { groupRecord: Model, collapse: boolean }) => void)|string
    /**
     * Fired after a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    onToggleNode: ((event: { record: Model, collapse: boolean }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Tool} event.source This Panel.
     * @param {Tool} event.tool The tool which is being clicked.
     */
    onToolClick: ((event: { source: Tool, tool: Tool }) => void)|string
    /**
     * Fires when un-splitting the Grid.
     */
    onUnsplit: (() => void)|string
}

/**
 * Displays a list of versions and the transactions they contain. For use with the [Versions](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/feature/Versions)
 * feature.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid)
 */
export class VersionGrid extends TreeGrid {
    /**
     * The id of the version currently being compared, if any.
     */
    comparingVersionId: boolean
    /**
     * Whether to show only versions that have been assigned a specific name.
     */
    showNamedVersionsOnly: boolean
    /**
     * Whether to display transactions not yet associated with a version.
     */
    showUnattachedTransactions: boolean
    /**
     * Whether to include version rows in the display.
     */
    showVersions: boolean
    /**
     * An object containing Features
     */
    features: VersionGridFeaturesType
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records to be deselected in this operation.
     * @param {Model[]} event.selected The records to be selected in this operation.
     * @param {Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Location[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Location[]} event.selectedCells The cells to be selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    onBeforeSelectionChange: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/VersionGrid#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellContextMenu: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellDblClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOut: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOver: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fires when the user chooses to compare a selected version.
     * @param {object} event Event object
     * @param {VersionModel} event.version The [VersionModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/VersionModel) being restored
     */
    onCompare: ((event: { version: VersionModel }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid} event.source
     * @param {Model[]|object} event.selectedCells The cells that is currently being dragged over
     */
    onDragSelecting: ((event: { source: Grid, selectedCells: Model[]|object|Partial<ModelConfig> }) => void)|string
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOut: ((event: { event: MouseEvent }) => void)|string
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOver: ((event: { event: MouseEvent }) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => void)|string
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    onResponsive: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string
    /**
     * Fires when the user chooses to restore a selected version.
     * @param {object} event Event object
     * @param {VersionModel} event.version The [VersionModel](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/VersionModel) being restored
     */
    onRestore: ((event: { version: VersionModel }) => void)|string
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select'|'deselect'} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records deselected in this operation.
     * @param {Model[]} event.selected The records selected in this operation.
     * @param {Model[]} event.selection The records in the new selection.
     * @param {Location[]} event.deselectedCells The cells deselected in this operation.
     * @param {Location[]} event.selectedCells The cells selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the new selection.
     */
    onSelectionChange: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => void)|string
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    onSelectionModeChange: ((event: { selectionMode: object }) => void)|string
    /**
     * Fires when the user chooses to stop comparing a currently compared version.
     */
    onStopCompare: (() => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<VersionGridConfig>} config
     */
    constructor(config?: Partial<VersionGridConfig>);
    /**
     * Sorts the actions within a transaction using precedence heuristic to show most "significant"
     * actions first.
     * @param {ChangeLogAction[]} actions
     */
    static sortActionRows(actions: ChangeLogAction[]): void;
}

/**
 * Type with configuration options for [AdvancedTab](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab) class.
 */
type AdvancedTabConfig = {
    type: 'advancedtab'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * Update assigned [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#config-y)
     */
    y: number
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
}

/**
 * Advanced task options [scheduler task editor](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor) or
 * [gantt task editor](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor) tab.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab)
 */
export class AdvancedTab extends FormTab {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/AdvancedTab#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<AdvancedTabConfig>} config
     */
    constructor(config?: Partial<AdvancedTabConfig>);
}

/**
 * Type with configuration options for [DependencyTab](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/taskeditor/DependencyTab) class.
 */
type DependencyTabConfig = {
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * Update assigned [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * A task field (`id`, `wbsCode`, `sequenceNumber` etc) that will be used when displaying and editing linked
     * tasks. Defaults to Gantt `dependencyIdField`.
     */
    dependencyIdField: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * A task field (`id`, `wbsCode`, `sequenceNumber` etc) to sort tasks in the task combo by
     */
    taskComboSortField: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#config-y)
     */
    y: number
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
}

/**
 * Abstract base class for SuccessorsTab and PredecessorsTab.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab)
 */
export abstract class DependencyTab extends EditorTab {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/DependencyTab#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<DependencyTabConfig>} config
     */
    constructor(config?: Partial<DependencyTabConfig>);
}

/**
 * Type with configuration options for [EditorTab](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/taskeditor/EditorTab) class.
 */
type EditorTabConfig = {
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * Update assigned [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#config-y)
     */
    y: number
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
}

/**
 * Base class for tabs that <strong>do not contain fields</strong> (non-form tabs) in [scheduler task editor](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor) or
 * [gantt task editor](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor), such as Successors, Predecessors or Resources.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab)
 */
export class EditorTab extends Container {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/EditorTab#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<EditorTabConfig>} config
     */
    constructor(config?: Partial<EditorTabConfig>);
}

/**
 * Type with configuration options for [FormTab](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/taskeditor/FormTab) class.
 */
type FormTabConfig = {
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * Update assigned [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#config-y)
     */
    y: number
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
}

/**
 * Base class for tabs that <strong>contain fields</strong> (form-like tabs) in [scheduler task editor](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor) or
 * [gantt task editor](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor), such as General or Notes.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab)
 */
export class FormTab extends EditorTab {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/FormTab#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<FormTabConfig>} config
     */
    constructor(config?: Partial<FormTabConfig>);
}

/**
 * Type with configuration options for [GeneralTab](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/taskeditor/GeneralTab) class.
 */
type GeneralTabConfig = {
    type: 'generaltab'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * Update assigned [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#config-y)
     */
    y: number
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
}

/**
 * A tab inside the [scheduler task editor](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor) or
 * [gantt task editor](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor) showing the general information for a task.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab)
 */
export class GeneralTab extends FormTab {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/GeneralTab#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<GeneralTabConfig>} config
     */
    constructor(config?: Partial<GeneralTabConfig>);
}

/**
 * Type with configuration options for [NotesTab](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/taskeditor/NotesTab) class.
 */
type NotesTabConfig = {
    type: 'notestab'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * Update assigned [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#config-y)
     */
    y: number
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
}

/**
 * A tab inside the [scheduler task editor](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor) or
 * [gantt task editor](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor) showing the notes for an event or task.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab)
 */
export class NotesTab extends FormTab {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/NotesTab#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<NotesTabConfig>} config
     */
    constructor(config?: Partial<NotesTabConfig>);
}

/**
 * Type with configuration options for [PredecessorsTab](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab) class.
 */
type PredecessorsTabConfig = {
    type: 'predecessorstab'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * Update assigned [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * A task field (`id`, `wbsCode`, `sequenceNumber` etc) that will be used when displaying and editing linked
     * tasks. Defaults to Gantt `dependencyIdField`.
     */
    dependencyIdField: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * A task field (`id`, `wbsCode`, `sequenceNumber` etc) to sort tasks in the task combo by
     */
    taskComboSortField: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#config-y)
     */
    y: number
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
}

/**
 * A tab inside the [scheduler task editor](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor) or
 * [gantt task editor](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor) showing the predecessors of an event or task.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab)
 */
export class PredecessorsTab extends DependencyTab {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/PredecessorsTab#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<PredecessorsTabConfig>} config
     */
    constructor(config?: Partial<PredecessorsTabConfig>);
}

/**
 * Type with configuration options for [RecurrenceTab](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab) class.
 */
type RecurrenceTabConfig = {
    type: 'recurrencetab'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * Update assigned [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#config-y)
     */
    y: number
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
}

/**
 * Tab for editing an events recurrence rule, only shown when Scheduler Pro is configured to use recurring events
 * (see [enableRecurringEvents](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/RecurringEvents#config-enableRecurringEvents)).
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab)
 */
export class RecurrenceTab extends EditorTab {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/RecurrenceTab#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<RecurrenceTabConfig>} config
     */
    constructor(config?: Partial<RecurrenceTabConfig>);
}

/**
 * Type with configuration options for [ResourcesTab](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab) class.
 */
type ResourcesTabConfig = {
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * Update assigned [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Specify `true` to show the "Units" column representing the
     * [assignment units](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/AssignmentModel) value.
     */
    showUnits: boolean
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#config-y)
     */
    y: number
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
}

/**
 * A tab inside the [scheduler task editor](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor) or
 * [gantt task editor](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor) showing the assigned resources for an event or task.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab)
 */
export class ResourcesTab extends EditorTab {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/ResourcesTab#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ResourcesTabConfig>} config
     */
    constructor(config?: Partial<ResourcesTabConfig>);
}

/**
 * Type with configuration options for [SchedulerAdvancedTab](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab) class.
 */
type SchedulerAdvancedTabConfig = {
    type: 'scheduleradvancedtab'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * Update assigned [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#config-y)
     */
    y: number
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
}

/**
 * Advanced task options for [scheduler task editor](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor) or
 * [gantt task editor](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor) tab.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab)
 */
export class SchedulerAdvancedTab extends FormTab {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<SchedulerAdvancedTabConfig>} config
     */
    constructor(config?: Partial<SchedulerAdvancedTabConfig>);
}

/**
 * Type with configuration options for [SchedulerGeneralTab](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab) class.
 */
type SchedulerGeneralTabConfig = {
    type: 'schedulergeneraltab'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * Update assigned [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#config-y)
     */
    y: number
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
}

/**
 * A tab inside the [scheduler task editor](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor) showing the general
 * information for an event from a simplified scheduler project.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab)
 */
export class SchedulerGeneralTab extends FormTab {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SchedulerGeneralTab#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<SchedulerGeneralTabConfig>} config
     */
    constructor(config?: Partial<SchedulerGeneralTabConfig>);
}

/**
 * Type with configuration options for [SuccessorsTab](https://bryntum.com/products/grid/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab) class.
 */
type SuccessorsTabConfig = {
    type: 'successorstab'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * Update assigned [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: object
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: object
    /**
     * A task field (`id`, `wbsCode`, `sequenceNumber` etc) that will be used when displaying and editing linked
     * tasks. Defaults to Gantt `dependencyIdField`.
     */
    dependencyIdField: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.
     * If there is a `forElement`, this config will be that element's encapsulating Widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot
     */
    rootElement: ShadowRoot
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * A task field (`id`, `wbsCode`, `sequenceNumber` etc) to sort tasks in the task combo by
     */
    taskComboSortField: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#config-y)
     */
    y: number
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
}

/**
 * A tab inside the [scheduler task editor](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/SchedulerTaskEditor) or
 * [gantt task editor](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/GanttTaskEditor) showing the successors of an event or task.
 * ...
 * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab)
 */
export class SuccessorsTab extends DependencyTab {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/taskeditor/SuccessorsTab#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<SuccessorsTabConfig>} config
     */
    constructor(config?: Partial<SuccessorsTabConfig>);
}

export class EventLoaderClass {
}

export const EventLoader : <T extends AnyConstructor<Container>>(base : T) => AnyConstructor<InstanceType<T> & EventLoaderClass>
